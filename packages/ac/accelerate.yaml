all-versions:
- 0.4.0
- 0.5.0.0
- 0.6.0.0
- 0.7.1.0
- 0.8.0.0
- 0.8.1.0
- 0.9.0.0
- 0.9.0.1
- 0.10.0.0
- 0.12.0.0
- 0.12.1.0
- 0.12.2.0
- 0.13.0.0
- 0.13.0.1
- 0.13.0.2
- 0.13.0.3
- 0.13.0.4
- 0.13.0.5
- 0.14.0.0
- 0.15.0.0
- 0.15.1.0
- 1.0.0.0
- 1.1.0.0
- 1.1.1.0
- 1.2.0.0
- 1.2.0.1
- 1.3.0.0
author: The Accelerate Team
basic-deps:
  ansi-terminal: '>=0.6.2'
  base: '>=4.12 && <4.15'
  base-orphans: '>=0.3'
  bytestring: '>=0.10.2'
  containers: '>=0.3'
  cryptonite: '>=0.21'
  deepseq: '>=1.3'
  directory: '>=1.0'
  exceptions: '>=0.6'
  filepath: '>=1.0'
  ghc-prim: '>=0'
  half: '>=0.3'
  hashable: '>=1.1'
  hashtables: '>=1.2.3'
  hedgehog: '>=0.5'
  lens: '>=4.0'
  mtl: '>=2.0'
  prettyprinter: '>=1.2'
  prettyprinter-ansi-terminal: '>=1.0'
  primitive: '>=0.6.4'
  tasty: '>=0.11'
  template-haskell: '>=0'
  terminal-size: '>=0.3'
  text: '>=1.2'
  transformers: '>=0.3'
  unique: '>=0'
  unix: '>=0'
  unordered-containers: '>=0.2'
  vector: '>=0.10'
changelog: |+
  # Change Log

  Notable changes to the project will be documented in this file.

  The format is based on [Keep a Changelog](http://keepachangelog.com/) and the
  project adheres to the [Haskell Package Versioning
  Policy (PVP)](https://pvp.haskell.org)

  ## [1.3.0.0] - 2020-08-26
  ### Added
    * Instances of `Elt` are now derivable via `Generic` for simple (Haskell'98)
      product _and_ sum data types.
    * Pattern synonyms for manipulating custom product and sum types can now be
      created; see `Pattern`, `mkPattern`
    * Added pattern synonyms for accessing tuples and indices, as an alternative
      to `lift` and `unlift`.
    * Support for pattern matching in the embedded language; see `match`

  ### Changed
    * The `stencil` functions now support fusion. Note however that the source
      (delayed) array will be evaluated at _every_ access to the stencil pattern;
      if the delayed function is expensive, you may wish to explicitly `compute`
      the source array first, matching the old behaviour.
    * Removed `Slice` constraint from some indexing operations
    * Improve fusion for `zipWith*` ([#453])
    * The indexing function to `permute` now returns a `Maybe` type ([#87])

    * (internal) Visible type applications are used instead of `Proxy` types
    * (internal) `EltR` is now a class-associated type of `Elt`
    * (internal) `GArrayData` has been simplified
    * (internal) SIMD representation has been improved and generalised
    * (internal) Internal refactoring ([#449], [#455], [#457], [#460])

    * Probably many others I have forgotten about

  ### Removed
    * Drop support for GHC-7.10 .. 8.4.

  ### Contributors

  Special thanks to those who contributed patches as part of this release:

    * Trevor L. McDonell (@tmcdonell)
    * Joshua Meredith (@JoshMeredith)
    * Ivo Gabe de Wolff (@ivogabe)
    * David van Balen (@dpvanbalen)
    * Jaro Reinders (@noughtmare)
    * Alex Lang (@alang9)
    * Paul Wilson (@status_failed)
    * @lennonhill
    * Travis Whitaker (@TravisWhitaker)
    * Roger Bosman (@rogerbosman)
    * Robbert van der Helm (@robbert-vdh)
    * Sam (@sam-340453)
    * Lars van den Haak (@sakehl)
    * Rinat Striungis (@Haskell-mouse)
    * Viktor Kronvall (@considerate)
    * Tom Smeding (@tomsmeding)
    * Ryan Scott (@RyanGlScott)


  ## [1.2.0.1] - 2018-10-06
  ### Fixed
    * Build fix for ghc-8.6

  ## [1.2.0.0] - 2018-04-03
  ### Changed
    * Internal debugging/RTS options handling has been changed. Compiling this package now implies that backends are also compiled in debug mode (no need to set the `-fdebug` cabal flag for those packages as well).
    * Complex numbers are stored in the C-style array-of-struct representation.
    * Improve numeric handling of complex numbers.
    * Coercions (`bitcast`) now occur between the underlying representation types
    * Front-end performance improvements

  ### Added
    * Support for half-precision floating-point numbers.
    * Support for struct-of-array-of-struct representations. Currently this is limited to fields of 2,3,4,8, or 16-elements wide.
    * Add equivalents for `Data.Functor`, `Data.Semigroup` (ghc-8+)
    * Add instances and helper functions for `Maybe` and `Either` types
    * Add rank generalised versions of `take`, `drop`, `head`, `tail`, `init`, `slit`, `reverse` and `transpose`.
    * Implement counters and reporting for `-ddump-gc-stats`

  ### Contributors

  Special thanks to those who contributed patches as part of this release:

    * Trevor L. McDonell (@tmcdonell)
    * Ryan Scott (@ryanglscott)
    * Rinat Striungis (@Haskell-mouse)


  ## [1.1.1.0] - 2017-09-26
  ### Changed
    * Improve and colourise the pretty-printer


  ## [1.1.0.0] - 2017-09-21
  ### Added
    * Additional EKG monitoring hooks ([#340])

    * Operations from `RealFloat`

  ### Changed
    * Changed type of `scanl'`, `scanr'` to return an `Acc` tuple, rather than a
      tuple of `Acc` arrays.
    * Specialised folds `sum`, `product`, `minimum`, `maximum`, `and`, `or`,
      `any`, `all` now reduce along the innermost dimension only, rather than
      reducing all elements. You can recover the old behaviour by first
      `flatten`-ing the input array.
    * Add new stencil boundary condition `function`, to apply the given function
      to out-of-bounds indices.

  ### Fixed
    * [#390]: Wrong number of arguments in printf


  ## [1.0.0.0] - 2017-03-31
    * Many API and internal changes
    * Bug fixes and other enhancements


  ## [0.15.1.0]
    * Fix type of `allocateArray`


  ## [0.15.0.0]
    * Bug fixes and performance improvements.


  ## [0.14.0.0]
    * New iteration constructs.
    * Additional Prelude-like functions.
    * Improved code generation and fusion optimisation.
    * Concurrent kernel execution in the CUDA backend.
    * Bug fixes.


  ## [0.13.0.0]
    * New array fusion optimisation.
    * New foreign function interface for array and scalar expressions.
    * Additional Prelude-like functions.
    * New example programs.
    * Bug fixes and performance improvements.


  ## [0.12.0.0]
    * Full sharing recovery in scalar expressions and array computations.
    * Two new example applications in package `accelerate-examples` (both including a graphical frontend):
      * A real-time Canny edge detection
      * An interactive fluid flow simulator
    * Bug fixes.


  ## [0.11.0.0]
    * New Prelude-like functions `zip*`, `unzip*`, `fill`, `enumFrom*`, `tail`,
      `init`, `drop`, `take`, `slit`, `gather*`, `scatter*`, and `shapeSize`.
    * New simplified AST (in package `accelerate-backend-kit`) for backend writers
      who want to avoid the complexities of the type-safe AST.


  ## [0.10.0.0]
    * Complete sharing recovery for scalar expressions (but currently disabled by default).
    * Also bug fixes in array sharing recovery and a few new convenience functions.


  ## [0.9.0.0]
    * Streaming computations
    * Precompilation
    * Repa-style array indices
    * Additional collective operations supported by the CUDA backend: `stencil`s,
      more `scan`s, rank-polymorphic `fold`, `generate`.
    * Conversions to other array formats
    * Bug fixes


  ## 0.8.1.0
    * Bug fixes and some performance tweaks.


  ## 0.8.0.0
    * More collective operations supported by the CUDA backend: `replicate`,
      `slice` and `foldSeg`. Frontend and interpreter support for `stencil`.
    * Bug fixes.


  ## [0.7.1.0]
    * Initial release of the CUDA backend


  [1.3.0.0]:          https://github.com/AccelerateHS/accelerate/compare/v1.2.0.1...v1.3.0.0
  [1.2.0.1]:          https://github.com/AccelerateHS/accelerate/compare/v1.2.0.0...v1.2.0.1
  [1.2.0.0]:          https://github.com/AccelerateHS/accelerate/compare/v1.1.0.0...v1.2.0.0
  [1.1.1.0]:          https://github.com/AccelerateHS/accelerate/compare/v1.1.0.0...v1.1.1.0
  [1.1.0.0]:          https://github.com/AccelerateHS/accelerate/compare/1.0.0.0...v1.1.0.0
  [1.0.0.0]:          https://github.com/AccelerateHS/accelerate/compare/0.15.1.0...1.0.0.0
  [0.15.1.0]:         https://github.com/AccelerateHS/accelerate/compare/0.15.0.0...0.15.1.0
  [0.15.0.0]:         https://github.com/AccelerateHS/accelerate/compare/0.14.0.0...0.15.0.0
  [0.14.0.0]:         https://github.com/AccelerateHS/accelerate/compare/0.13.0.0...0.14.0.0
  [0.13.0.0]:         https://github.com/AccelerateHS/accelerate/compare/0.12.0.0...0.13.0.0
  [0.12.0.0]:         https://github.com/AccelerateHS/accelerate/compare/0.11.0.0...0.12.0.0
  [0.11.0.0]:         https://github.com/AccelerateHS/accelerate/compare/0.10.0.0...0.11.0.0
  [0.10.0.0]:         https://github.com/AccelerateHS/accelerate/compare/0.9.0.0...0.10.0.0
  [0.9.0.0]:          https://github.com/AccelerateHS/accelerate/compare/0_8_1_0...0.9.0.0
  [0.7.1.0]:          https://github.com/AccelerateHS/accelerate/compare/0_6_0_0...0_7_1_0

  [#87]:              https://github.com/AccelerateHS/accelerate/issues/87
  [#340]:             https://github.com/AccelerateHS/accelerate/issues/340
  [#390]:             https://github.com/AccelerateHS/accelerate/issues/390
  [#453]:             https://github.com/AccelerateHS/accelerate/pull/453
  [#449]:             https://github.com/AccelerateHS/accelerate/pull/449
  [#455]:             https://github.com/AccelerateHS/accelerate/pull/455
  [#457]:             https://github.com/AccelerateHS/accelerate/pull/457
  [#460]:             https://github.com/AccelerateHS/accelerate/pull/460

changelog-type: markdown
description: |+
  <div align="center">
  <img width="450" src="https://github.com/AccelerateHS/accelerate/raw/master/images/accelerate-logo-text-v.png?raw=true" alt="henlo, my name is Theia"/>

  # High-performance parallel arrays for Haskell

  [![GitHub CI](https://github.com/tmcdonell/accelerate/workflows/CI/badge.svg)](https://github.com/tmcdonell/accelerate/actions)
  [![Gitter](https://img.shields.io/gitter/room/nwjs/nw.js.svg)](https://gitter.im/AccelerateHS/Lobby)
  <br>
  [![Stackage LTS](https://stackage.org/package/accelerate/badge/lts)](https://stackage.org/lts/package/accelerate)
  [![Stackage Nightly](https://stackage.org/package/accelerate/badge/nightly)](https://stackage.org/nightly/package/accelerate)
  [![Hackage](https://img.shields.io/hackage/v/accelerate.svg)](https://hackage.haskell.org/package/accelerate)

  </div>

  `Data.Array.Accelerate` defines an embedded language of array computations for high-performance computing in Haskell. Computations on multi-dimensional, regular arrays are expressed in the form of parameterised collective operations (such as maps, reductions, and permutations). These computations are online-compiled and executed on a range of architectures.

  For more details, see our papers:

   * [Accelerating Haskell Array Codes with Multicore GPUs][CKLM+11]
   * [Optimising Purely Functional GPU Programs][MCKL13] ([slides][MCKL13-slides])
   * [Embedding Foreign Code][CMCK14]
   * [Type-safe Runtime Code Generation: Accelerate to LLVM][MCGN15] ([slides][MCGN15-slides]) ([video][MCGN15-video])
   * [Streaming Irregular Arrays][CMCK17] ([video][CMCK17-video])

  There are also slides from some fairly recent presentations:

   * [Embedded Languages for High-Performance Computing in Haskell][Embedded]
   * [GPGPU Programming in Haskell with Accelerate][YLJ13-slides] ([video][YLJ13-video]) ([workshop][YLJ13-workshop])

  Chapter 6 of Simon Marlow's book [Parallel and Concurrent Programming in Haskell][Mar13] contains a tutorial introduction to Accelerate.

  [Trevor's PhD thesis][Trevor-thesis] details the design and implementation of frontend optimisations and CUDA backend.


  **Table of Contents**

  - [An Embedded Language for Accelerated Array Computations](#an-embedded-language-for-accelerated-array-computations)
    - [A simple example](#a-simple-example)
    - [Availability](#availability)
    - [Additional components](#additional-components)
    - [Requirements](#requirements)
    - [Documentation](#documentation)
    - [Examples](#examples)
    - [Who are we?](#who-are-we)
    - [Mailing list and contacts](#mailing-list-and-contacts)
    - [Citing Accelerate](#citing-accelerate)
    - [What's missing?](#whats-missing)

  A simple example
  ----------------

  As a simple example, consider the computation of a dot product of two vectors of single-precision floating-point numbers:

      dotp :: Acc (Vector Float) -> Acc (Vector Float) -> Acc (Scalar Float)
      dotp xs ys = fold (+) 0 (zipWith (*) xs ys)

  Except for the type, this code is almost the same as the corresponding Haskell code on lists of floats. The types indicate that the computation may be online-compiled for performance; for example, using `Data.Array.Accelerate.LLVM.PTX.run` it may be on-the-fly off-loaded to a GPU.

  Availability
  ------------

  Package accelerate is available from

   * Hackage: [accelerate][Hackage] - install with `cabal install accelerate`
   * GitHub: [AccelerateHS/accelerate][GitHub] - get the source with `git clone https://github.com/AccelerateHS/accelerate.git`. The easiest way to compile the source distributions is via the Haskell [stack](https://docs.haskellstack.org/en/stable/README/) tool.

  Additional components
  ---------------------

  The following supported add-ons are available as separate packages:

    * [accelerate-llvm-native][accelerate-llvm-native]: Backend targeting multicore CPUs
    * [accelerate-llvm-ptx][accelerate-llvm-ptx]: Backend targeting CUDA-enabled NVIDIA GPUs. Requires a GPU with compute capability 2.0 or greater (see the [table on Wikipedia][wiki-cc])
    * [accelerate-examples][accelerate-examples]: Computational kernels and applications showcasing the use of Accelerate as well as a regression test suite (supporting function and performance testing)
    * [accelerate-io][accelerate-io]: Fast conversion between Accelerate arrays and other array formats (for example, Repa and Vector)
    * [accelerate-fft][accelerate-fft]: Fast Fourier transform implementation, with FFI bindings to optimised implementations
    * [accelerate-blas][accelerate-blas]: BLAS and LAPACK operations, with FFI bindings to optimised implementations
    * [accelerate-bignum][accelerate-bignum]: Fixed-width large integer arithmetic
    * [colour-accelerate][colour-accelerate]: Colour representations in Accelerate (RGB, sRGB, HSV, and HSL)
    * [gloss-accelerate][gloss-accelerate]: Generate [gloss][gloss] pictures from Accelerate
    * [gloss-raster-accelerate][gloss-raster-accelerate]: Parallel rendering of raster images and animations
    * [lens-accelerate][lens-accelerate]: [Lens][lens] operators for Accelerate types
    * [linear-accelerate][linear-accelerate]: [Linear][linear] vector spaces in Accelerate
    * [mwc-random-accelerate][mwc-random-accelerate]: Generate Accelerate arrays filled with high quality pseudorandom numbers
    * [numeric-prelude-accelerate][numeric-prelude-accelerate]: Lifting the [numeric-prelude][numeric-prelude] to Accelerate
    * [wigner-ville-accelerate](https://github.com/Haskell-mouse/wigner-ville-accelerate): Wigner-Ville time-frequency distribution.

  Install them from Hackage with `cabal install PACKAGENAME`.


  Documentation
  -------------

    * Haddock documentation is included and linked with the individual package releases on [Hackage][Hackage].
    * Haddock documentation for in-development components can be found [here](http://tmcdonell-bot.github.io/accelerate-travis-buildbot/).
    * The idea behind the HOAS (higher-order abstract syntax) to de-Bruijn conversion used in the library is [described separately][HOAS-conv].

  Examples
  --------

  ### accelerate-examples

  The [accelerate-examples][accelerate-examples] package provides a range of computational kernels and a few complete applications. To install these from Hackage, issue `cabal install accelerate-examples`. The examples include:

    * An implementation of [canny edge detection][wiki-canny]
    * An interactive [mandelbrot set][wiki-mandelbrot] generator
    * An [N-body simulation][wiki-nbody] of gravitational attraction between solid particles
    * An implementation of the [PageRank][wiki-pagerank] algorithm
    * A simple [ray-tracer][wiki-raytracing]
    * A particle based simulation of stable fluid flows
    * A cellular automata simulation
    * A "password recovery" tool, for dictionary lookup of MD5 hashes

  [![Mandelbrot](https://i.imgur.com/5Tbsp1j.jpg "accelerate-mandelbrot")](https://i.imgur.com/RgXRqsc.jpg)
  [![Raytracer](https://i.imgur.com/7ohhKm9.jpg "accelerate-ray")](https://i.imgur.com/ZNEGEJK.jpg)

  <!--
  <video width=400 height=300 controls=false autoplay loop>
    <source="http://www.cse.unsw.edu.au/~tmcdonell/images/ray.mp4" type="video/mp4">
  </video>
  -->


  ### LULESH

  [LULESH-accelerate][lulesh-accelerate] is in implementation of the Livermore Unstructured Lagrangian Explicit Shock Hydrodynamics (LULESH) mini-app. [LULESH][LULESH] represents a typical hydrodynamics code such as [ALE3D][ALE3D], but is a highly simplified application, hard-coded to solve the Sedov blast problem on an unstructured hexahedron mesh.

  ![LULESH mesh](https://i.imgur.com/bIkODKd.jpg)


  ### Additional examples

  Accelerate users have also built some substantial applications of their own.
  Please feel free to add your own examples!

    * Jonathan Fraser, [GPUVAC](https://github.com/GeneralFusion/gpuvac): An explicit advection magnetohydrodynamics simulation
    * David van Balen, [Sudokus](https://github.com/dpvanbalen/Sudokus): A sudoku solver
    * Trevor L. McDonell, [lol-accelerate][lol-accelerate]: A backend to the Λ ○ λ ([Lol][lol]) library for ring-based lattice cryptography
    * Henning Thielemann, [patch-image](http://hackage.haskell.org/package/patch-image): Combine a collage of overlapping images
    * apunktbau, [bildpunkt](https://github.com/abau/bildpunkt): A ray-marching distance field renderer
    * klarh, [hasdy](https://github.com/klarh/hasdy): Molecular dynamics in Haskell using Accelerate
    * Alexandros Gremm used Accelerate as part of the [2014 CSCS summer school](http://user.cscs.ch/blog/2014/cscs_usi_summer_school_2014_30_june_10_july_2014_in_serpiano_tessin/index.html) ([code](https://github.com/agremm/cscs))


  Who are we?
  -----------

  The Accelerate team (past and present) consists of:

    * Manuel M T Chakravarty ([@mchakravarty])  <!-- 2008..2017? -->
    * Gabriele Keller ([@gckeller])             <!-- 2008..     -->
    * Trevor L. McDonell ([@tmcdonell])         <!-- 2009..     -->
    * Robert Clifton-Everest ([@robeverest])    <!-- 2013..     -->
    * Frederik M. Madsen ([@fmma])              <!-- 2014       -->
    * Ryan R. Newton ([@rrnewton])              <!-- 2012..2013 -->
    * Joshua Meredith ([@JoshMeredith])         <!-- 2018..     -->
    * Ben Lever ([@blever])                     <!-- 2010..2011 -->
    * Sean Seefried ([@sseefried])              <!-- 2010..2011 -->
    * Ivo Gabe de Wolff ([@ivogabe])            <!-- 2019..     -->

  The maintainer and principal developer of Accelerate is Trevor L.
  McDonell <trevor.mcdonell@gmail.com>.


  Mailing list and contacts
  -------------------------

    * Mailing list: [`accelerate-haskell@googlegroups.com`](mailto:accelerate-haskell@googlegroups.com) (discussions on both use and development are welcome)
    * Sign up for the mailing list at the [Accelerate Google Groups page][Google-Group]
    * Bug reports and issues tracking: [GitHub project page][Issues]
    * Chat with us on [gitter](https://gitter.im/AccelerateHS/Lobby)


  Citing Accelerate
  -----------------

  If you use Accelerate for academic research, you are encouraged (though not
  required) to cite the following papers:
  <!-- ([BibTeX](http://www.cse.unsw.edu.au/~tmcdonell/papers/accelerate.bib)): -->

    * Manuel M. T. Chakravarty, Gabriele Keller, Sean Lee, Trevor L. McDonell, and Vinod Grover.
      [Accelerating Haskell Array Codes with Multicore GPUs][CKLM+11].
      In _DAMP '11: Declarative Aspects of Multicore Programming_, ACM, 2011.

    * Trevor L. McDonell, Manuel M. T. Chakravarty, Gabriele Keller, and Ben Lippmeier.
      [Optimising Purely Functional GPU Programs][MCKL13].
      In _ICFP '13: The 18th ACM SIGPLAN International Conference on Functional Programming_, ACM, 2013.

    * Robert Clifton-Everest, Trevor L. McDonell, Manuel M. T. Chakravarty, and Gabriele Keller.
      [Embedding Foreign Code][CMCK14].
      In _PADL '14: The 16th International Symposium on Practical Aspects of Declarative Languages_, Springer-Verlag, LNCS, 2014.

    * Trevor L. McDonell, Manuel M. T. Chakravarty, Vinod Grover, and Ryan R. Newton.
      [Type-safe Runtime Code Generation: Accelerate to LLVM][MCGN15].
      In _Haskell '15: The 8th ACM SIGPLAN Symposium on Haskell_, ACM, 2015.

    * Robert Clifton-Everest, Trevor L. McDonell, Manuel M. T. Chakravarty, and Gabriele Keller.
      [Streaming Irregular Arrays][CMCK17].
      In Haskell '17: The 10th ACM SIGPLAN Symposium on Haskell, ACM, 2017.


  Accelerate is primarily developed by academics, so citations matter a lot to us.
  As an added benefit, you increase Accelerate's exposure and potential user (and
  developer!) base, which is a benefit to all users of Accelerate. Thanks in advance!


  What's missing?
  ---------------

  Here is a list of features that are currently missing:

   * Preliminary API (parts of the API may still change in subsequent releases)
   * Many more features... contact us!

    [@mchakravarty]:              https://github.com/mchakravarty
    [@gckeller]:                  https://github.com/gckeller
    [@tmcdonell]:                 https://github.com/tmcdonell
    [@robeverest]:                https://github.com/robeverest
    [@fmma]:                      https://github.com/fmma
    [@rrnewton]:                  https://github.com/rrnewton
    [@JoshMeredith]:              https://github.com/JoshMeredith
    [@blever]:                    https://github.com/blever
    [@sseefried]:                 https://github.com/sseefried
    [@ivogabe]:                   https://github.com/ivogabe

    [CKLM+11]:                    https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/acc-cuda-damp2011.pdf
    [MCKL13]:                     https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/acc-optim-icfp2013.pdf
    [MCKL13-slides]:              https://speakerdeck.com/tmcdonell/optimising-purely-functional-gpu-programs
    [CMCK14]:                     https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/acc-ffi-padl2014.pdf
    [MCGN15]:                     https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/acc-llvm-haskell2015.pdf
    [MCGN15-slides]:              https://speakerdeck.com/tmcdonell/type-safe-runtime-code-generation-accelerate-to-llvm
    [MCGN15-video]:               https://www.youtube.com/watch?v=snXhXA5noVc
    [HIW'09]:                     https://wiki.haskell.org/HaskellImplementorsWorkshop
    [CMCK17]:                     https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/acc-seq2-haskell2017.pdf
    [CMCK17-video]:               https://www.youtube.com/watch?v=QIWSqp7AaNo
    [Mar13]:                      http://chimera.labs.oreilly.com/books/1230000000929
    [Embedded]:                   https://speakerdeck.com/mchakravarty/embedded-languages-for-high-performance-computing-in-haskell
    [Hackage]:                    http://hackage.haskell.org/package/accelerate
    [accelerate-cuda]:            https://github.com/AccelerateHS/accelerate-cuda
    [accelerate-examples]:        https://github.com/AccelerateHS/accelerate-examples
    [accelerate-io]:              https://github.com/AccelerateHS/accelerate-io
    [accelerate-fft]:             https://github.com/AccelerateHS/accelerate-fft
    [accelerate-blas]:            https://github.com/tmcdonell/accelerate-blas
    [accelerate-backend-kit]:     https://github.com/AccelerateHS/accelerate-backend-kit
    [accelerate-buildbot]:        https://github.com/AccelerateHS/accelerate-buildbot
    [accelerate-repa]:            https://github.com/blambo/accelerate-repa
    [accelerate-opencl]:          https://github.com/hiPERFIT/accelerate-opencl
    [accelerate-cabal]:           https://github.com/AccelerateHS/accelerate/accelerate.cabal
    [accelerate-cuda-cabal]:      https://github.com/AccelerateHS/accelerate-cuda/accelerate-cuda.cabal
    [accelerate-llvm]:            https://github.com/AccelerateHS/accelerate-llvm
    [accelerate-llvm-native]:     https://github.com/AccelerateHS/accelerate-llvm
    [accelerate-llvm-ptx]:        https://github.com/AccelerateHS/accelerate-llvm
    [accelerate-bignum]:          https://github.com/tmcdonell/accelerate-bignum
    [GitHub]:                     https://github.com/AccelerateHS/accelerate
    [Wiki]:                       https://github.com/AccelerateHS/accelerate/wiki
    [Issues]:                     https://github.com/AccelerateHS/accelerate/issues
    [Google-Group]:               http://groups.google.com/group/accelerate-haskell
    [HOAS-conv]:                  https://github.com/mchakravarty/hoas-conv
    <!-- [HOAS-conv]:                  https://web.archive.org/web/20180805092417/http://www.cse.unsw.edu.au/~chak/haskell/term-conv/ -->
    [repa]:                       http://hackage.haskell.org/package/repa
    [wiki-cc]:                    https://en.wikipedia.org/wiki/CUDA#Supported_GPUs
    [YLJ13-video]:                http://youtu.be/ARqE4yT2Z0o
    [YLJ13-slides]:               https://speakerdeck.com/tmcdonell/gpgpu-programming-in-haskell-with-accelerate
    [YLJ13-workshop]:             https://speakerdeck.com/tmcdonell/gpgpu-programming-in-haskell-with-accelerate-workshop
    [wiki-canny]:                 https://en.wikipedia.org/wiki/Canny_edge_detector
    [wiki-mandelbrot]:            https://en.wikipedia.org/wiki/Mandelbrot_set
    [wiki-nbody]:                 https://en.wikipedia.org/wiki/N-body
    [wiki-raytracing]:            https://en.wikipedia.org/wiki/Ray_tracing
    [wiki-pagerank]:              https://en.wikipedia.org/wiki/Pagerank
    [Trevor-thesis]:              https://github.com/tmcdonell/tmcdonell.github.io/raw/master/papers/TrevorMcDonell_PhD_Thesis.pdf
    [colour-accelerate]:          https://github.com/tmcdonell/colour-accelerate
    [gloss]:                      https://hackage.haskell.org/package/gloss
    [gloss-accelerate]:           https://github.com/tmcdonell/gloss-accelerate
    [gloss-raster-accelerate]:    https://github.com/tmcdonell/gloss-raster-accelerate
    [lens]:                       https://hackage.haskell.org/package/lens
    [lens-accelerate]:            https://github.com/tmcdonell/lens-accelerate
    [linear]:                     https://hackage.haskell.org/package/linear
    [linear-accelerate]:          https://github.com/tmcdonell/linear-accelerate
    [mwc-random-accelerate]:      https://github.com/tmcdonell/mwc-random-accelerate
    [numeric-prelude]:            https://hackage.haskell.org/package/numeric-prelude
    [numeric-prelude-accelerate]: https://github.com/tmcdonell/numeric-prelude-accelerate
    [LULESH]:                     https://codesign.llnl.gov/lulesh.php
    [ALE3D]:                      https://wci.llnl.gov/simulation/computer-codes/ale3d
    [lulesh-accelerate]:          https://github.com/tmcdonell/lulesh-accelerate
    [lol]:                        https://hackage.haskell.org/package/lol
    [lol-accelerate]:             https://github.com/tmcdonell/lol-accelerate

description-type: markdown
hash: f19e43687e9a306fddaddfa68a764b157ceb2522d9a821e31bc3353c730fda2b
homepage: https://github.com/AccelerateHS/accelerate/
latest: 1.3.0.0
license-name: BSD-3-Clause
maintainer: Trevor L. McDonell <trevor.mcdonell@gmail.com>
synopsis: An embedded language for accelerated array processing
test-bench-deps:
  accelerate: '>=0'
  base: '>=4.10'
  doctest: '>=0.11'
