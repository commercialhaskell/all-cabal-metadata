all-versions:
- 0.1.0.0
- 0.1.1.0
author: Moritz Clasmeier
basic-deps:
  aeson: '>=0'
  aeson-casing: '>=0'
  base: '>=4.7 && <5'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  exceptions: '>=0'
  filepath: '>=0'
  http-client: '>=0'
  http-client-tls: '>=0'
  http-types: '>=0'
  katip: '>=0'
  lens: '>=0'
  lens-aeson: '>=0'
  mtl: '>=0'
  random: '>=0'
  safe-exceptions: '>=0'
  say: '>=0'
  stm: '>=0'
  text: '>=0'
  th-format: '>=0.1.2.0'
  transformers: '>=0'
  unliftio: '>=0'
  unliftio-core: '>=0'
changelog: ''
changelog-type: ''
description: |
  # Access Token Provider [![Hackage version](https://img.shields.io/hackage/v/access-token-provider.svg?label=Hackage)](https://hackage.haskell.org/package/access-token-provider) [![Stackage version](https://www.stackage.org/package/access-token-provider/badge/lts?label=Stackage)](https://www.stackage.org/package/access-token-provider) [![Build Status](https://travis-ci.org/mtesseract/access-token-provider.svg?branch=master)](https://travis-ci.org/mtesseract/access-token-provider)

  This package provides a convenient retrieval mechanism for access
  tokens. Multiple provider backends, including OAuth2 Resource Owner
  Password Credentials Grant, file-based token access (e.g. for
  Kubernetes) and fetching tokens from the environment (e.g. for local
  testing) are supported; custom provider backends can easily be added.

  ## Examples

  ```haskell
  import qualified Security.AccessTokenProvider as ATP

  retrieveSomeToken :: IO ()
  retrieveSomeToken = do
    tokenProvider <- ATP.new (AccessTokenName "token-name")
    token <- ATP.retrieveAccessToken tokenProvider
    print token
  ```

  ## Configuration

  Configuration is done by setting certain environment variables,
  depending on the provider.

  ### OAuth2 based token retrieval

  The OAuth2 (Resource Owner Password Credentials Grant) provider
  expects the `ATP_CONF_ROPCG` environment variable to contain a JSON
  object as follows:

  ```json
  {
    "credentials_directory": "/optional/credentials/directory",
    "auth_endpoint": "<OAuth2 authentication endpoint>",
    "tokens": {"token-name": {"scopes": ["first-scope", "second-scope"]}}
  }
  ```

  The `credentials_directory` setting defaults to the content of the
  environment variable `CREDENTIALS_DIR`. It is expected to contain the
  files `user.json` and `client.json`, containing the user and client
  credentials respectively.

  ### File based token retrieval (e.g. for Kubernetes)

  The file based provider expects the `ATP_CONF_FILE` environment
  variable to contain a JSON object as follows:

  ```json
  {
    "tokens": {"token-name": "/some/file/name"}
  }
  ```

  As a short cut, you can simply save a token path directly in the
  environment variable `TOKEN_FILE`.

  ### Environment based token retrieval (e.g. for testing)

  The file based provider expects the `ATP_CONF_FIXED` environment
  variable to contain a JSON object as follows:

  ```json
  {
    "tokens": {"token-name": "some-fixed-token"}
  }
  ```
description-type: markdown
hash: 0904a3d89ff894768d44100566d3e544033c550e7c4695a6afa840c42e8ffafa
homepage: https://github.com/mtesseract/access-token-provider#readme
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: mtesseract@silverratio.net
synopsis: Provides Access Token for Services
test-bench-deps:
  access-token-provider: '>=0'
  aeson: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  exceptions: '>=0'
  http-client: '>=0'
  http-types: '>=0'
  katip: '>=0'
  lens: '>=0'
  mtl: '>=0'
  random: '>=0'
  safe-exceptions: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  text: '>=0'
  th-format: '>=0'
  unliftio: '>=0'
  unliftio-core: '>=0'
  uuid: '>=0'
