all-versions:
- '0.0'
- 0.0.1
author: Alice Rixte
basic-deps:
  base: '>=4.18 && <5'
  data-default: '>=0.7 && <0.9'
  groups: '>=0.5 && <0.6'
changelog: "# Changelog for `lr-acts`\r\n\r\nAll notable changes to this project will
  be documented in this file.\r\n\r\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\r\nand
  this project adheres to the\r\n[Haskell Package Versioning Policy](https://pvp.haskell.org/).\r\n\r\n##
  0.0 - 2025-05-22\r\n\r\n### Added\r\n\r\n- Left and right actions\r\n- Semigroup,
  monoid and group actions\r\n- Cyclic and generated actions\r\n- Torsors\r\n- Semidirect
  products\r\n\r\n## 0.0.1 - 2024-05-24\r\n\r\n- Fix deriving mechanism for Torsor
  instances\r\n"
changelog-type: markdown
description: "# lr-acts\r\n\r\n[![Haskell](https://img.shields.io/badge/language-Haskell-orange.svg)](https://haskell.org)
  [![Hackage](https://img.shields.io/hackage/v/lr-acts.svg)](https://hackage.haskell.org/package/lr-acts)
  \ [![BSD3 License](https://img.shields.io/badge/license-BSD3-blue.svg)](https://github.com/AliceRixte/lr-acts/LICENSE)\r\n\r\n\r\n##
  Features\r\n\r\n* Left and right actions of\r\n  * sets\r\n  * semigroup\r\n  *
  monoids\r\n  * groups\r\n* Semidirect product\r\n* Group torsors\r\n* Cyclic actions\r\n*
  Generated actions\r\n\r\n\r\n### Fine-grained class hierarchy\r\n\r\nLeft and right
  actions with a fine-grained class hierarchy for action properties. For left actions,
  here are the provided classes :\r\n\r\n``` haskell\r\nclass LAct               --
  Set action\r\n => LActSg               -- Semigroup action\r\n     => LActMn           --
  Monoid action\r\n          => LTorsor     -- Torsor\r\n => LActDistrib          --
  Distributive action\r\n => LActNeutral          -- Neutral preserving action\r\n
  => LActGen              -- Action generated by a set\r\n     => LActCyclic       --
  Cyclic action (generated by a single element)\r\n\r\n```\r\n\r\n### Derive most
  of you action instances\r\n\r\nThe acting type is always the second parameter. Use
  this with `DerivingVia` language extension to derive action instances :\r\n\r\n```
  haskell\r\nimport Data.Act\r\nimport Data.Semigroup\r\n\r\nnewtype Seconds = Seconds
  Float\r\nnewtype Duration = Duration Seconds\r\n  deriving (Semigroup, Monoid) via
  (Sum Float)\r\n\r\n  deriving (LAct Seconds, RAct Seconds) via (ActSelf' (Sum Float))\r\n
  \ -- derives LAct Second  Duration\r\n\r\n  deriving (LAct [Seconds], RAct [Seconds])
  via (ActMap (ActSelf' (Sum Float)))\r\n   -- derives LAct [Second] Duration\r\n\r\nnewtype
  Durations = Durations [Duration]\r\n  deriving (LAct Seconds, RAct Seconds) via
  (ActFold [Duration])\r\n  -- derives LAct Second Durations\r\n\r\n```\r\n\r\n```
  haskell\r\nghci> Duration 2 `lact` Seconds 3\r\nSeconds 5.0\r\n\r\nghci> Duration
  2 `lact` [Seconds 3, Seconds 4]\r\n[Seconds 5.0,Seconds 6.0]\r\n\r\nghci> [Duration
  2, Duration 3] `lact` Seconds 4\r\n[Seconds 5.0,Seconds 6.0]\r\n\r\nghci> Durations
  [Duration 2, Duration 3] `lact` Seconds 4\r\nSeconds 9.0\r\n```\r\n\r\n### Semidirect
  products\r\n\r\nThis fine-grained hierarchy allows to check for associativity and
  existence of neutral elements using _semidirect products_.\r\n\r\n``` haskell\r\n>>>
  import Data.Semigroup\r\n>>> LSemidirect (Sum 1) (Product 2) <> LSemidirect (Sum
  (3 :: Int)) (Product (4 :: Int))\r\nLSemidirect {lactee = Sum {getSum = 7}, lactor
  = Product {getProduct = 8}}\r\n```\r\n\r\nGHC will complain when using a semigroup
  action that is not distributive :\r\n\r\n```haskell\r\n>>> LSemidirect (Sum 1) (Sum
  2) <> LSemidirect (Sum (3 :: Int)) (Sum (4 :: Int))\r\nNo instance for `LActDistrib
  (Sum Int) (Sum Int)'\r\n  arising from a use of `<>'\r\n```\r\n\r\n## Comparison
  with other action libraries\r\n\r\nHere is a list of action libraries on hackage
  :\r\n\r\n- [monoid-extra](https://github.com/diagrams/monoid-extras)\r\n- [acts](https://hackage.haskell.org/package/acts)\r\n-
  [semigroup-actions](https://hackage.haskell.org/package/semigroups-actions)\r\n-
  [raaz](https://hackage.haskell.org/package/raaz-0.0.1/docs/Raaz-Core-MonoidalAction.html)\r\n\r\n\r\nIn
  comparison with these libraries, `lr-acts`is the only library that :\r\n- Implements
  right actions\r\n- Implements cyclic actions and generated actions\r\n- Ensures
  the associativity and the neutrality of `mempty` in semidirect products\r\n- Proposes
  several newtypes for deriving instances (note that [acts](https://hackage.haskell.org/package/acts)
  proposes a deriving mechanism, but centered around the actee type, not the actor
  type as in this library)\r\n\r\nThe main drawback of providing right actions and
  checking properties for semidirect products is that the number of instances can
  quickly be overwhelming. It can be a lot of boiler plate to declare them all, especially
  when the acting semigroup is commutative.\r\n"
description-type: markdown
hash: 0b3840943171be658d7a2d1ff75987cd4e07cf91d15e3e77041796ef28b650bd
homepage: https://github.com/AliceRixte/lr-acts#readme
latest: 0.0.1
license-name: BSD-3-Clause
maintainer: alice.rixte@u-bordeaux.fr
synopsis: Left and right actions, semidirect products and torsors
test-bench-deps:
  QuickCheck: '>=2.14.3'
  base: '>=4.18 && <5'
  criterion: '>=1.6'
  data-default: '>=0.7 && <0.9'
  groups: '>=0.5 && <0.6'
  hspec: '>=2.11'
  lr-acts: '>=0'
