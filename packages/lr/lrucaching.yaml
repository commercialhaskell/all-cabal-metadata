all-versions:
- 0.1.0
- 0.2.0
- 0.2.1
- 0.3.0
- 0.3.1
- 0.3.2
- 0.3.3
author: Moritz Kiefer
basic-deps:
  base: '>=4.8 && <5'
  base-compat: '>=0.9 && <0.13'
  deepseq: '>=1.4 && <1.5'
  hashable: '>=1.2 && <1.5'
  psqueues: '>=0.2 && <0.3'
  vector: '>=0.11 && <0.13'
changelog: |
  0.3.3
  ----
  * Drop support for GHC 7.8
  * Bump QuickCheck upper bound

  0.3.2
  ----
  * Bump QuickCheck upper bound

  0.3.1
  -----
  * Allow vector == 0.12.*
  * Do not use hspec-discover. This allows building the tests using
    `cabal new-build`.

  0.3.0
  -----
  * Add `Data.LruCache.IO.Finalizer` for automatically running finalizer
    when evicting cache entrvies.
  * Rename `newStripedHandle` to `newStripedLruHandle`

  0.2.1
  -----
  * Fix build with GHC 7.8

  0.2.0
  ----
  * Donâ€™t clear cache on clock overflow. This means that elements are
    never evicted without notifying the user via insertView.

  0.1.0
  -----
  Initial release.
changelog-type: markdown
description: |
  # lrucaching

  [![Build Status](https://travis-ci.org/cocreature/lrucaching.svg?branch=master)](https://travis-ci.org/cocreature/lrucaching)
  [![Hackage](https://img.shields.io/hackage/v/lrucaching.svg)](https://hackage.haskell.org/package/lrucaching)

  An implementation of lrucaches based on a
  [blogpost](https://jaspervdj.be/posts/2015-02-24-lru-cache.html) by
  Jasper Van der Jeugt.

  This package has no relation to
  [lrucache](https://hackage.haskell.org/package/lrucache). I created it
  because there were bugs in `lrucache` and the maintainer was not
  responding to issues.


  ## Usage

  The easiest way to use this library is to use `Data.LruCache.IO`. This wraps the
  cache in a `Data.IORef`, a mutable varible in the `IO` monad.

  e.g. To create a `1000`-item cache, keyed by `Integer`, storing `String`:

  ```haskell
  import qualified Data.LruCache.IO as LRU

  newCache :: IO (LRU.LruHandle Integer String)
  newCache = LRU.newLruHandle 1000

  cachedLookup cache key = LRU.cached cache key $
      -- insert some something expensive
      return $ show key

  main :: IO ()
  main = do
      cache <- newCache
      cachedLookup cache 123 >>= putStrLn
  ```
description-type: markdown
hash: ca831e94c8bad99c6a56ec515b86b5e6835975c20721706bf609602a12318449
homepage: https://github.com/cocreature/lrucaching#readme
latest: 0.3.3
license-name: BSD-3-Clause
maintainer: moritz.kiefer@purelyfunctional.org
synopsis: LRU cache
test-bench-deps:
  QuickCheck: '>=2.8 && <2.15'
  base: '>=0'
  containers: '>=0.5 && <0.7'
  deepseq: '>=0'
  hashable: '>=0'
  hspec: '>=2.2 && <2.8'
  lrucaching: '>=0'
  transformers: '>=0.4 && <0.6'
