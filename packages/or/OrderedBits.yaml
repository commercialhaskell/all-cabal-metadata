all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.1.0
- 0.0.1.1
- 0.0.1.2
- 0.0.2.0
author: Christian Hoener zu Siederdissen
basic-deps:
  base: '>=4.7 && <5.0'
  bits: '>=0.4'
  primitive: '>=0.5'
  vector: '>=0.11'
  vector-algorithms: '>=0.6'
changelog: |
  0.0.2.0
  -------

  - subsequences of a given mask

  0.0.1.4
  -------

  - added bitmasks

  0.0.1.3
  -------

  - tests with ghc 8.2.x

  0.0.1.2
  -------

  - removed upper bounds

  0.0.1.1
  -------

  - move to tasty framework for property tests

  0.0.1.0
  -------

  - moved all properties directly into tests/properties.hs

  0.0.0.3
  -------

  - vector <= 0.11 supported (with conditional compilation)

  0.0.0.2
  -------

  - vector-algorithms version bump
  - removed explicit llvm flag (use --ghc-options)

  0.0.0.1
  -------

  - initial checkin of the (naive) sorted implementation
  - memoization of Int-sets up to 31 bit
  - non-memo versions (somewhat efficient)
  - travis-ci integration
changelog-type: markdown
description: "[![Build Status](https://travis-ci.org/choener/OrderedBits.svg?branch=master)](https://travis-ci.org/choener/OrderedBits)\n\n#
  OrderedBits\n\nThe OrderedBits library provides methods to generate unboxed vectors
  of Ints\n(and others) ordered by their population count or Hamming distance to the
  0\nset. In other words, we enumerate the power set of a given input set.\n\nSuch
  an order is important for dynamic programming algorithms for Hamiltonian\npath problems
  and the travelling salesman problem.\n\n\n\n#### Contact\n\nChristian Hoener zu
  Siederdissen  \nLeipzig University, Leipzig, Germany  \nchoener@bioinf.uni-leipzig.de
  \ \nhttp://www.bioinf.uni-leipzig.de/~choener/  \n\n"
description-type: markdown
hash: cdfad9211ece1c6be245f8d7068600c5524756adf2981c6f1f679bd55d697486
homepage: https://github.com/choener/OrderedBits
latest: 0.0.2.0
license-name: BSD-3-Clause
maintainer: choener@bioinf.uni-leipzig.de
synopsis: Efficient ordered (by popcount) enumeration of bits
test-bench-deps:
  OrderedBits: '>=0'
  QuickCheck: '>=2.7'
  base: '>=0'
  criterion: '>=1.0.2'
  tasty: '>=0.11'
  tasty-quickcheck: '>=0.8'
  tasty-th: '>=0.1'
  vector: '>=0'
