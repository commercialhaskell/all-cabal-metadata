all-versions:
- '0.2'
- 0.2.2
- 0.2.4
- '0.3'
- 0.3.1
- 0.3.2
author: Pasqualino `Titto` Assini
basic-deps:
  base: '>=4.8 && <5'
  bytestring: '>=0.10.6.0 && <0.11'
  containers: '>=0.5 && <0.6'
  convertible: '>=1.1 && <1.2'
  cryptonite: '>=0.22 && <1'
  deepseq: '>=1.4 && <1.5'
  either: '>4.3.2 && <6'
  flat: '>=0.3 && <0.4'
  memory: '>=0'
  model: '>=0.4.4 && <0.5'
  pretty: '>=1.1.2 && <1.2'
  text: '>=0'
  transformers: '>=0.4.2.0 && <0.6'
changelog: ''
changelog-type: ''
description: "\n[![Build Status](https://travis-ci.org/Quid2/zm.svg?branch=master)](https://travis-ci.org/Quid2/zm)
  [![Hackage version](https://img.shields.io/hackage/v/zm.svg)](http://hackage.haskell.org/package/zm)\n[![Stackage
  Nightly](http://stackage.org/package/zm/badge/nightly)](http://stackage.org/nightly/package/zm)\n[![Stackage
  LTS](http://stackage.org/package/zm/badge/lts)](http://stackage.org/lts/package/zm)\n\nHaskell
  implementation of 正名 (read as: [Zhèng Míng](https://translate.google.com/#auto/en/%E6%AD%A3%E5%90%8D))
  a minimalistic, expressive and language independent data modelling language ([specs](http://quid2.org/docs/ZhengMing.pdf)).\n\n###
  How To Use It For Fun and Profit\n\nWith `zm` you can derive and manipulate canonical
  and language-independent definitions and unique identifiers of (a subset) of Haskell
  data types.\n\nThis can be used, for example:\n\n* in combination with a serialisation
  library to provide type-safe deserialisation\n* for data exchange across different
  programming languages and software systems\n* for long term data preservation\n\n####
  Canonical Models of Haskell Data Types\n\nFor a data type to have a canonical representation,
  it has to implement the `Model` type class.\n\nInstances for a few common data types
  (Bool, Maybe, Tuples, Lists, Ints, Words, String, Text ..) are already defined and
  there is `Generics` based support to automatically derive additional instances.\n\nLet's
  see some code, we need a couple of GHC extensions:\n\n```haskell\n{-# LANGUAGE DeriveGeneric,
  DeriveAnyClass, NoMonomorphismRestriction #-}\n```\n\nImport the library:\n\n```haskell\nimport
  ZM\n```\n\nWe use `absTypeModel` to get the canonical type of `Maybe Bool` and `pPrint`
  to print it nicely:\n\n```haskell\npPrint $ absTypeModel (Proxy :: Proxy (Maybe
  Bool))\n-> Type:\n-> \n-> Kda6836778fd4 K306f1981b41c:\n-> Maybe Bool\n-> \n-> Environment:\n->
  \n-> K306f1981b41c:\n->  Bool ≡   False\n->         | True\n-> \n-> Kda6836778fd4:\n->
  \ Maybe a ≡   Nothing\n->            | Just a\n```\n\n\nWe can see how the data
  types `Maybe` and `Bool` have been assigned unique canonical identifiers and how
  the type `Maybe Bool` is accordingly represented.\n\nContrary to Haskell, `ZhengMing`
  has no 'magic' built-in types so even something as basic as a `Char` or a `Word`
  have to be defined explicitly.\n\nFor example, a `Word7` (an unsigned integer of
  7 bits length) is defined as an explicit enumeration of all the 128 different values
  that can fit in 7 bits:\n\n```haskell\npPrint $ absTypeModel (Proxy :: Proxy Word7)\n->
  Type:\n-> \n-> Kf4c946334a7e:\n-> Word7\n-> \n-> Environment:\n-> \n-> Kf4c946334a7e:\n->
  \ Word7 ≡   V0\n->          | V1\n->          | V2\n->          | V3\n->          |
  V4\n-> ...\n->          | V123\n->          | V124\n->          | V125\n->          |
  V126\n->          | V127\n```\n\n\nA `Word32` can be defined as a `NonEmptyList`
  list of `Word7`s (a definition equivalent to the [Base 128 Varints encoding](https://developers.google.com/protocol-buffers/docs/encoding#varints)).\n\n```haskell\npPrint
  $ absTypeModel (Proxy :: Proxy Word32)\n-> Type:\n-> \n-> K2412799c99f1:\n-> Word32\n->
  \n-> Environment:\n-> \n-> K20ffacc8f8c9:\n->  LeastSignificantFirst a ≡ LeastSignificantFirst
  a\n-> \n-> K74e2b3b89941:\n->  MostSignificantFirst a ≡ MostSignificantFirst a\n->
  \n-> Kbf2d1c86eb20:\n->  NonEmptyList a ≡   Elem a\n->                   | Cons
  a (NonEmptyList a)\n-> \n-> Kf92e8339908a:\n->  Word ≡ Word (LeastSignificantFirst
  (NonEmptyList (MostSignificantFirst Word7)))\n-> \n-> K2412799c99f1:\n->  Word32
  ≡ Word32 Word\n-> \n-> Kf4c946334a7e:\n->  Word7 ≡   V0\n->          | V1\n->          |
  V2\n->          | V3\n->          | V4\n-> ...\n->          | V123\n->          |
  V124\n->          | V125\n->          | V126\n->          | V127\n```\n\n\nAnd finally
  a `Char` can be defined as a tagged `Word32`:\n\n```haskell\npPrint $ absTypeModel
  (Proxy :: Proxy Char)\n-> Type:\n-> \n-> K066db52af145:\n-> Char\n-> \n-> Environment:\n->
  \n-> K066db52af145:\n->  Char ≡ Char Word32\n-> \n-> K20ffacc8f8c9:\n->  LeastSignificantFirst
  a ≡ LeastSignificantFirst a\n-> \n-> K74e2b3b89941:\n->  MostSignificantFirst a
  ≡ MostSignificantFirst a\n-> \n-> Kbf2d1c86eb20:\n->  NonEmptyList a ≡   Elem a\n->
  \                  | Cons a (NonEmptyList a)\n-> \n-> Kf92e8339908a:\n->  Word ≡
  Word (LeastSignificantFirst (NonEmptyList (MostSignificantFirst Word7)))\n-> \n->
  K2412799c99f1:\n->  Word32 ≡ Word32 Word\n-> \n-> Kf4c946334a7e:\n->  Word7 ≡   V0\n->
  \         | V1\n->          | V2\n->          | V3\n->          | V4\n-> ...\n->
  \         | V123\n->          | V124\n->          | V125\n->          | V126\n->
  \         | V127\n```\n\n\nMost common haskell data types can be automatically mapped
  to the equivalent canonical data type.\n\nThere are however a couple of restrictions:
  data types definitions cannot be mutually recursive and type variables must be of
  kind *.\n\nSo for example, these won't work:\n\n```haskell\n-- BAD: f has higher
  kind\ndata Free f a = Impure (f (Free f a)) | Pure a\n\n-- BAD: mutually recursive\ndata
  Forest a = Nil | Cons (Tree a) (Forest a)\ndata Tree a = Empty | Node a (Forest
  a)\n```\n\nSo now that we have canonical types, what about some practical applications?\n\n####
  Safe Deserialisation\n\nTo illustrate the problem, consider the two following data
  types:\n\nThe [Cinque Terre](https://en.wikipedia.org/wiki/Cinque_Terre) villages:\n\n```haskell\ndata
  CinqueTerre = Monterosso | Vernazza | Corniglia | Manarola | RioMaggiore deriving
  (Show,Generic,Flat,Model)\n```\n\nThe traditional Chinese directions:\n\n```haskell\ndata
  Direction = North | South | Center | East | West deriving (Show,Generic,Flat,Model)\n```\n\nThough
  their meaning is obviously different they share the same syntactical structure (simple
  enumerations of 5 values) and most binary serialisation libraries won't be able
  to distinguish between the two.\n\nTo demonstrate this, let's serialise `Center`
  and `Corniglia`, the third value of each enumeration using the `flat` library.\n\n```haskell\npPrint
  $ flat Center\n-> [ 129 ]\n```\n\n\n```haskell\npPrint $ flat Corniglia\n-> [ 129
  ]\n```\n\n\nAs you can see they have the same binary representation.\n\nWe have
  used the `flat` binary serialisation as it is already a dependency of `zm` (and
  automatically imported by `ZM`) but the same principle apply to other serialisation
  libraries (`binary`, `cereal` ..).\n\nLet's go full circle, using `unflat` to decode
  the value :\n\n```haskell\ndecoded = unflat . flat\n```\n\n```haskell\ndecoded Center
  :: Decoded Direction\n-> Right Center\n```\n\n\nOne more time:\n\n```haskell\ndecoded
  Center :: Decoded CinqueTerre\n-> Right Corniglia\n```\n\n\nOops, that's not quite
  right.\n\nWe got our types crossed, `Center` was read back as `Corniglia`, a `Direction`
  was interpreted as one of the `CinqueTerre`.\n\nTo fix this, we convert the value
  to a `TypedValue`, a value combined with its canonical type:\n\n```haskell\npPrint
  $ typedValue Center\n-> Center :: K170d0e47bef6\n```\n\n\nTypedValues can be serialised
  as any other value:\n\n```haskell\npPrint <$> (decoded $ typedValue Center :: Decoded
  (TypedValue Direction))\n-> Right Center :: K170d0e47bef6\n```\n\n\nAnd just as
  before, we can get things wrong:\n\n```haskell\npPrint <$> (decoded $ typedValue
  Center :: Decoded (TypedValue CinqueTerre))\n-> Right Corniglia :: K170d0e47bef6\n```\n\n\nHowever
  this time is obvious that the value is inconsistent with its type, as the `CinqueTerre`
  data type has a different unique code:\n\n```haskell\npPrint $ absTypeModel (Proxy
  :: Proxy CinqueTerre)\n-> Type:\n-> \n-> K747ebaa65778:\n-> CinqueTerre\n-> \n->
  Environment:\n-> \n-> K747ebaa65778:\n->  CinqueTerre ≡   Monterosso\n->                |
  Vernazza\n->                | Corniglia\n->                | Manarola\n->                |
  RioMaggiore\n```\n\n\nWe can automate this check, with `untypedValue`:\n\nThis is
  ok:\n\n```haskell\nuntypedValue . decoded . typedValue $ Center :: TypedDecoded
  Direction\n-> Right Center\n```\n\n\nAnd this is wrong:\n\n```haskell\nuntypedValue
  . decoded . typedValue $ Center :: TypedDecoded CinqueTerre\n-> Left\n->   WrongType\n->
  \    { expectedType =\n->         TypeCon (AbsRef (SHAKE128_48 116 126 186 166 87
  120))\n->     , actualType = TypeCon (AbsRef (SHAKE128_48 23 13 14 71 190 246))\n->
  \    }\n```\n\n\n### Data Exchange\n\nFor an example of using canonical data types
  as a data exchange mechanism see [top](https://github.com/Quid2/top), the Type Oriented
  Protocol.\n\n\n### Haskell Compatibility\n\nTested with:\n  * [ghc](https://www.haskell.org/ghc/)
  7.10.3, 8.0.2 and 8.2.2 (x64)\n  * [ghcjs](https://github.com/ghcjs/ghcjs)\n\n###
  Installation\n\n Get the latest stable version from [hackage](https://hackage.haskell.org/package/zm).\n\n###
  Acknowledgements\n Contains the following JavaScript library:\n\n js-sha3 v0.5.1
  https://github.com/emn178/js-sha3\n\n Copyright 2015, emn178@gmail.com\n\n Licensed
  under the MIT license:http://www.opensource.org/licenses/MIT\n\n### Known Bugs and
  Infelicities\n\n* The unique codes generated for the data types are not yet final
  and might change in the final version.\n* Instances for parametric data types have
  to be declared separately (won't work in `deriving`)\n"
description-type: markdown
hash: 2a83db145c9d7a185e21e9a0112d004e39db607e08ec7a62a24f3ba8355b1bfb
homepage: http://github.com/tittoassini/zm
latest: 0.3.2
license-name: BSD-3-Clause
maintainer: tittoassini@gmail.com
synopsis: Language independent, reproducible, absolute types
test-bench-deps:
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  doctest: '>=0.11.1 && <0.14'
  filemanip: '>=0.3.6.3 && <0.3.7'
  flat: '>=0'
  model: '>=0'
  pretty: '>=0'
  tasty: '>=0.11 && <0.13'
  tasty-hunit: '>=0.8 && <0.11'
  tasty-quickcheck: '>=0.8.1 && <0.9.2'
  text: '>=0'
  timeit: '>=1 && <1.1'
  zm: '>=0'
