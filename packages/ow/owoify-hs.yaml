all-versions:
- 1.0.0.0
- 1.0.0.1
- 1.1.0.0
author: Chehui Chou
basic-deps:
  base: '>=4.7 && <5'
  random: '>=1.2.0 && <1.3'
  regex: ==1.1.0.2
  regex-with-pcre: ==1.1.0.2
  text: '>=2.0.2 && <2.1'
changelog: |
  # Changelog for owoify-hs

  ## 1.0.0.1
  - Remove executable and move HUnit to test-only dependency.

  ## 1.0.0.0
  - Initial release.
changelog-type: markdown
description: "# owoify-hs\n\nTurning your worst nightmare into a Haskell package.\n\n[![Haskell
  CI](https://github.com/deadshot465/owoify-hs/actions/workflows/haskell.yml/badge.svg)](https://github.com/deadshot465/owoify-hs/actions/workflows/haskell.yml)\n\nThis
  is a Haskell port of [mohan-cao's owoify-js](https://github.com/mohan-cao/owoify-js),
  which will help you turn any string into nonsensical babyspeak similar to LeafySweet's
  infamous Chrome extension.\n\nJust like my other Owoify ports, three levels of owoness
  are available. Each level has been implemented using a discriminated union, so it
  should work like enums people are used to seeing in other imperative languages.\n\n1.
  **owo (default)**: The most vanilla one.\n2. **uwu**: The moderate one.\n3. **uvu**:
  Litewawwy unweadabwal.\nPlease refer to the original [owoify-js repository](https://github.com/mohan-cao/owoify-js)
  for more information.\n\nFunctional programming is fun, so of course I'll port it
  to FP languages. \U0001F61C\n\nAlso I love Haskell. ❤️\n\n## Reason for development\n\nBecause
  I love Haskell and currently Hackage doesn't have any owoify package yet. Also PureScript
  is influenced by Haskell and they have nearly the same syntax, so it doesn't make
  sense to have a PureScript port while not having a Haskell port.\n\nThe difference
  is that owoify-hs makes use of Haskell's lazy evaluation. `Data.Text.Lazy` is used
  instead of `Data.Text`. This *possibly* solved stack overflow problem with purescript-owoify
  when owoifying very long texts (i.e. chapter 1-20 of Tolstoy's *War and Peace*).
  The reason for using `Data.Text.Lazy.Text` instead of the good old `String` is because
  `Data.Text.Lazy.Text` and the eager version `Data.Text.Text` are meant for handling
  Unicode texts.\n\nHaving said that, you would need to do `Data.Text.Lazy.pack <text>`
  before passing the text to the `owoify` function.\n\n## Install instructions\n\nAdd
  `owoify-hs` to your `package.yaml` in your Stack project:\n\n```yaml\ndependencies:\n-
  owoify-hs == 1.1.0.0\n```\n\nIf you are using Cabal, add the package the usual way.\n\n```bash\ncabal
  install owoify-hs\n```\n\n## Usage\n\nowoify-hs is implemented as a single function.
  You will need to provide a source string and a owoify level. Due to random number
  generator and regular expressions, the result will be inside `IO` monad, so you
  will also need to handle that.\n\n```haskell\nmodule MyAwesomeModule where\n\nimport
  Prelude\n\nimport Data.Owoify.Owoify (OwoifyLevel(..), owoify)\nimport Data.Text.Lazy
  (pack, unpack)\n\nmain :: IO ()\nmain = do\n  owoResult <- owoify (pack \"This is
  the string to owo! Kinda cute, isn't it?\") Owo\n  uvuResult <- owoify (pack \"This
  is the string to owo! Kinda cute, isn't it?\") Uvu\n  -- `print` won't print out
  Unicode emojis correctly.\n  putStrLn $ unpack owoResult\n  putStrLn $ unpack uvuResult\n\n--
  Possible outputs:\n-- This is teh stwing two owo! Kinda cute, isn't it?\n-- fwis
  is teh stwing two owowouvu Kinda cuteowo isn't it?\n```\n\n## Disclaimer\n\nAs usual,
  I'm writing this package for both practicing and bots' needs. Performance is **NOT**
  guaranteed.\n\nThat being said, `Data.Text.Lazy` is used, so it should be able to
  handle both short texts and long texts without any problem.\n\n## See also\n\n-
  [owoify-js](https://github.com/mohan-cao/owoify-js) - The original owoify-js repository.\n-
  [Owoify.Net](https://www.nuget.org/packages/Owoify.Net/1.0.1) - The C# port of Owoify
  written by me.\n- [Owoify++](https://github.com/deadshot465/OwoifyCpp) - The C++
  header-only port of Owoify written by me.\n- [owoify_rs](https://crates.io/crates/owoify_rs)
  - The Rust port of Owoify written by me.\n- [owoify-py](https://pypi.org/project/owoify-py/)
  - The Python port of Owoify written by me.\n- [owoify_dart](https://pub.dev/packages/owoify_dart)
  - The Dart port of Owoify written by me.\n- [owoify_rb](https://rubygems.org/gems/owoify_rb)
  - The Ruby port of Owoify written by me.\n- [owoify-go](https://github.com/deadshot465/owoify-go)
  - The Go port of Owoify written by me.\n- [owoifySwift](https://github.com/deadshot465/OwoifySwift)
  - The Swift port of Owoify written by me.\n- [owoifyKt](https://github.com/deadshot465/owoifyKt)
  - The Kotlin port of Owoify written by me.\n- [owoify_ex](https://github.com/deadshot465/owoify_ex)
  - The Elixir port of Owoify written by me.\n- [owoify_cr](https://github.com/deadshot465/owoify_cr)
  - The Crystal port of Owoify written by me.\n- [owoifynim](https://github.com/deadshot465/owoifynim)
  - The Nim port of Owoify written by me.\n- [owoify-clj](https://clojars.org/net.clojars.deadshot465/owoify-clj)
  - The Clojure port of Owoify written by me.\n- [purescript-owoify](https://github.com/deadshot465/purescript-owoify)
  - The PureScript port of Owoify written by me.\n\n## License\n\nMIT License\n\nCopyright
  (c) 2023 Chehui Chou\n\nPermission is hereby granted, free of charge, to any person
  obtaining a copy\nof this software and associated documentation files (the \"Software\"),
  to deal\nin the Software without restriction, including without limitation the rights\nto
  use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of
  the Software, and to permit persons to whom the Software is\nfurnished to do so,
  subject to the following conditions:\n\nThe above copyright notice and this permission
  notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE
  SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR
  PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS
  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT,
  TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
  USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
description-type: markdown
hash: 736def37c41f7ea279f598018414194c15d316769b2db159f520fd1c1af03845
homepage: https://github.com/deadshot465/owoify-hs#readme
latest: 1.1.0.0
license-name: MIT
maintainer: tetsuki.syu1315@gmail.com
synopsis: Turn any English text into nonsensical babyspeaks.
test-bench-deps:
  HUnit: '>=1.6.2.0 && <1.7'
  base: '>=4.7 && <5'
  owoify-hs: '>=0'
  random: '>=1.2.0 && <1.3'
  regex: ==1.1.0.2
  regex-with-pcre: ==1.1.0.2
  text: '>=2.0.2 && <2.1'
