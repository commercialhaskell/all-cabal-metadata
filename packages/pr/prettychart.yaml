all-versions:
- 0.1.0
- 0.1.1.0
- 0.1.2.0
- 0.2.0.0
- 0.2.2.0
author: Tony Day
basic-deps:
  async: '>=2.2.4 && <2.3'
  base: '>=4.7 && <5'
  box: '>=0.9 && <0.10'
  bytestring: '>=0.11.3 && <0.13'
  chart-svg: '>=0.6 && <0.8'
  containers: '>=0.6 && <0.8'
  markup-parse: '>=0.1 && <0.2'
  numhask-space: '>=0.10 && <0.12'
  optics-core: '>=0.4 && <0.5'
  text: '>=1.2 && <2.2'
  time: '>=1.9 && <1.15'
  web-rep: '>=0.12.1 && <0.13'
changelog: |
  0.2.2
  ===
  - chart-svg bump to v0.7


  0.2
  ===
  - removed gpalette (transferred to chart-svg)
  - color-scheme bug fixed
  - chart-svg-0.6 refactors

  0.1.2
  ===

  - removed example data and related charts
  - refactored to markup-parse

  0.1.1
  ===

  - bump for numhask-0.11 changes
  - pragma cleanup
changelog-type: markdown
description: "\n# Table of Contents\n\n1.  [prettychart](#org52eda08)\n2.  [Usage](#orgf05409a)\n
  \   1.  [live coding](#org062de09)\n    2.  [ghci integration](#orgfcd7bd6)\n3.
  \ [Development](#orgf489981)\n    1.  [live](#org2deed6a)\n4.  [Prettychart.Any
  Examples](#orgca9d9d6)\n    1.  [single list](#org9b83b20)\n        1.  [10 or less
  elements => bar chart](#orgc860033)\n        2.  [>1000 elements => histogram](#org7abe64c)\n
  \       3.  [< 1000 && > 10 => line chart](#orga634aff)\n    2.  [double list](#org493d2b1)\n
  \       1.  [< 4 lists && < 10 values per list => bar chart](#org6e7fcb7)\n        2.
  \ [square => surface chart](#org5e9ba1b)\n    3.  [tuple list [(Double, Double)]
  => scatter](#orgfc9b845)\n    4.  [double tuple list [(Double, Double)] => scatter](#orgcd245d1)\n
  \   5.  [(Text, Double) tuple list](#org5cb6f57)\n\n\n<a id=\"org52eda08\"></a>\n\n#
  prettychart\n\n[![img](https://img.shields.io/hackage/v/prettychart.svg)](https://hackage.haskell.org/package/prettychart)
  [![img](https://github.com/tonyday567/prettychart/workflows/haskell-ci/badge.svg)](https://github.com/tonyday567/chart-svg/actions?query=workflow%3Ahaskell-ci)\n\nThis
  library contains:\n\n-   A chart server, for use in conjunction with ghci, or other
  live coding situations. (See Chartpretty.Server)\n-   anyChart, which attempts to
  convert text (of numbers) to a chart. (See Chartpretty.Any)\n-   Some useful chart
  patterns that didn&rsquo;t make the cut in chart-svg (See Chartpretty.Charts)\n\n\n<a
  id=\"orgf05409a\"></a>\n\n# Usage\n\n\n<a id=\"org062de09\"></a>\n\n## live coding\n\nThe
  server can be used to view and develop chart-svg charts.\n\n    > (display, quit)
  <- startChartServer (Just \"prettychart\")\n    Setting phaser>s  to stun... (port
  9160) (ctrl-c to quit)\n    \n    -- open localhost:9160\n    -- developing and
  sending a chart to the server\n    \n    > import Chart.Examples\n    > display
  lineExample\n    \n    > quit\n\n\n<a id=\"orgfcd7bd6\"></a>\n\n## ghci integration\n\nAdd
  this to your .ghci.conf file to automatically go into :prettychart mode.\n\n    --
  :set -package prettychart\n    :{\n    :def! prettychart \\_ -> pure $ unlines [\n
  \     \"import Prettychart\",\n      \"(sendChart, quitChartServer) <- startChartServer
  Nothing\",\n      \"printc=printChart False sendChart\",\n      \":set -interactive-print
  printc\"\n      ]\n    :}\n    \n    :{\n    :def! noprettychart \\_ -> pure $ unlines
  [\n      \"quitChartServer\",\n      \":set -interactive-print print\"\n      ]\n
  \   :}\n    \n    :prettychart\n\n    ghci| ghci| ghci| ghci| ghci| ghci| ghci|\n
  \   > ghci| ghci| ghci| ghci| ghci|\n    > Setting phasers to stun... (port 9160)
  (ctrl-c to quit)\n\n    [1..200]\n\n    :noprettychart\n\n\n<a id=\"orgf489981\"></a>\n\n#
  Development\n\n    :r\n    :set prompt \"> \"\n    :set -Wno-type-defaults\n    :set
  -Wno-name-shadowing\n    :set -XOverloadedStrings\n    :set -XTupleSections\n    :set
  -XOverloadedLabels\n    import Chart hiding (quantiles)\n    import Chart.Examples\n
  \   import Optics.Core\n    import Prettychart.Charts\n    import Prettychart.Any\n
  \   import Prettychart.ExampleData\n    import Prettychart.Server\n    import Data.Time.Calendar\n
  \   import qualified Data.Map as Map\n    import Data.Text (Text,pack)\n    import
  qualified Data.Text as Text\n    import qualified Data.Text.IO as Text\n    import
  Data.Time\n    import qualified Data.List as List\n    import Control.Category ((>>>))\n
  \   print \"ok\"\n\n    [3 of 5] Compiling Prettychart.ExampleData ( src/Prettychart/ExampleData.hs,
  interpreted ) [Flags changed]\n    [5 of 5] Compiling Prettychart      ( src/Prettychart.hs,
  interpreted ) [Flags changed]\n    Ok, five modules loaded.\n    >\n    ok\n\n\n<a
  id=\"org2deed6a\"></a>\n\n## live\n\n    (display, quit) <- startChartServer Nothing\n\n
  \   display $ debugExample quadExample\n\n    True\n\n\n<a id=\"orgca9d9d6\"></a>\n\n#
  Prettychart.Any Examples\n\n\n<a id=\"org9b83b20\"></a>\n\n## single list\n\n\n<a
  id=\"orgc860033\"></a>\n\n### 10 or less elements => bar chart\n\n    xs = [0..9]\n\n
  \   either Text.putStrLn (writeChartOptions \"other/list1a.svg\") $ anyChart (pack
  . show $ xs)\n\n![img](other/list1a.svg)\n\n    either Text.putStrLn (writeChartOptions
  \"other/list1a.svg\") $ anyChart (pack . show $ xs)\n\n\n<a id=\"org7abe64c\"></a>\n\n###
  >1000 elements => histogram\n\n    xs = sin <$> [0..2000]\n\n    either Text.putStrLn
  (writeChartOptions \"other/list1b.svg\") $ anyChart (pack . show $ xs)\n\n![img](other/list1b.svg)\n\n\n<a
  id=\"orga634aff\"></a>\n\n### < 1000 && > 10 => line chart\n\nIn between goes for
  a line chartIn between goes for a line chart.\n\n    xs = sin . (/100) <$> [0..500]\n\n
  \   either Text.putStrLn (writeChartOptions \"other/list1c.svg\") $ anyChart (pack
  . show $ xs)\n\n![img](other/list1c.svg)\n\n\n<a id=\"org493d2b1\"></a>\n\n## double
  list\n\n\n<a id=\"org6e7fcb7\"></a>\n\n### < 4 lists && < 10 values per list =>
  bar chart\n\n    xs = [(1+) . sin <$> [0..8], (1+) . cos <$> [0..8]]\n    xs\n\n
  \   [[1.0,1.8414709848078965,1.9092974268256817,1.1411200080598671,0.2431975046920718,4.1075725336861546e-2,0.7205845018010741,1.656986598718789,1.989358246623382],[2.0,1.5403023058681398,0.5838531634528576,1.0007503399554585e-2,0.34635637913638806,1.2836621854632262,1.960170286650366,1.7539022543433047,0.8544999661913865]]\n\n
  \   either Text.putStrLn (writeChartOptions \"other/dlista.svg\") $ anyChart (pack
  . show $ xs)\n\n![img](other/dlista.svg)\n\n\n<a id=\"org5e9ba1b\"></a>\n\n### square
  => surface chart\n\n    iter2 f xs ys = f <$> xs <&> flip fmap ys -- or (\\a ->
  f a <$> ys) <$> xs\n    xs = iter2 (*) (fmap sin [1..20]) (fmap cos [1..20]) ::
  [[Double]]\n    :t xs\n    length xs\n    fmap length xs\n\n    xs :: [[Double]]\n
  \   20\n    [20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20,20]\n\n    either
  Text.putStrLn (writeChartOptions \"other/dlistb.svg\") $ anyChart (pack . show $
  xs)\n\n![img](other/dlistb.svg)\n\n\n<a id=\"orgfc9b845\"></a>\n\n## tuple list
  [(Double, Double)] => scatter\n\n    xs = zip (fmap (sin . (0.06*)) [1..100]) (fmap
  (cos . (0.06*)) [1..100])\n    :t xs\n\n    xs\n      :: (TrigField b1, TrigField
  b2, Fractional b1, Fractional b2,\n          Enum b1, Enum b2) =>\n         [(b1,
  b2)]\n\n    either Text.putStrLn (writeChartOptions \"other/dtuple.svg\") $ anyChart
  (pack . show $ xs)\n\n![img](other/dtuple.svg)\n\n\n<a id=\"orgcd245d1\"></a>\n\n##
  double tuple list [(Double, Double)] => scatter\n\n    iter2 f xs ys = f <$> xs
  <&> flip fmap ys -- or (\\a -> f a <$> ys) <$> xs\n    \n    \n    xs = iter2 (\\s
  (x,y) -> (s*x, s*y)) ((0.1*) <$> [1..10]) (zip (fmap (sin . (0.06*)) [1..100]) (fmap
  (cos . (0.06*)) [1..100]))\n    :t xs\n\n    > >\n    xs :: (Fractional b, Enum
  b, TrigField b) => [[(b, b)]]\n\n    either Text.putStrLn (writeChartOptions \"other/dtupleb.svg\")
  $ anyChart (pack . show $ xs)\n\n![img](other/dtupleb.svg)\n\n\n<a id=\"org5cb6f57\"></a>\n\n##
  (Text, Double) tuple list\n\n    xs = (\\x -> (show x, x)) <$> [0..9]\n\n    either
  Text.putStrLn (writeChartOptions \"other/tdtuple.svg\") $ anyChart (pack . show
  $ xs)\n\n![img](other/tdtuple.svg)\n\n"
description-type: markdown
hash: c30ba7d90de9c029ca79042cb89a2f444ca1752df39abca9cb00feeef1bd5a3a
homepage: https://github.com/tonyday567/prettychart#readme
latest: 0.2.2.0
license-name: BSD-3-Clause
maintainer: tonyday567@gmail.com
synopsis: Pretty print charts from ghci.
test-bench-deps:
  base: '>=4.14 && <5'
  doctest-parallel: '>=0.3 && <0.4'
