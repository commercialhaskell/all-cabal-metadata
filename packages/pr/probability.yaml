all-versions:
- '0.1'
- '0.2'
- 0.2.1
- 0.2.2
- 0.2.2.1
- 0.2.3
- 0.2.3.1
- 0.2.4
- 0.2.4.1
- 0.2.5
- 0.2.5.1
- 0.2.5.2
- 0.2.6
- 0.2.7
- 0.2.8
author: Martin Erwig <erwig@eecs.oregonstate.edu>, Steve Kollmansberger
basic-deps:
  base: '>=2 && <5'
  containers: '>=0.1 && <0.8'
  random: '>=1.0 && <1.3'
  transformers: '>=0.4 && <0.7'
  utility-ht: '>=0.0.12 && <0.1'
changelog: |
  # Change log for the `probability` package

  ## 0.2.8

   * `Numeric.Probability.Either` -> `Control.Monad.Trans.Except`
     Few functions exposed `EitherT` in their signatures,
     but `Numeric.Probability.Either` was private.
     Thus its removal should not be noticed by library users.


  ## 0.2.7

   * support `random-1.2`


  ## 0.2.6

   * `instance Monad Distribution.T`:
     Remove definition of `fail`.
     This turns calls to `fail` into `error`s
     for GHCs prior to the "Monad Fail Proposal".
     Formerly it was an empty list,
     but this was bad since the probabilities in an empty list
     sum up to zero not one, thus breaking the invariant.
     Beginning with GHC-8.8 and the "Monad Fail Proposal"
     you can no longer accidentally call `fail`,
     since `Distribution.T` is not an instance of `MonadFail`.

   * `instance Monad Probability.EitherT`:
     Define `MonadFail` instance for GHC>=8.8.1.
changelog-type: markdown
description: "Probabilistic Functional Programming in Haskell\n\nContact:\nMartin
  Erwig, Oregon State University, erwig@eecs.oregonstate.edu\n\n\nThese files have
  been tested with GHC 6.4\n\nCore Library files:\n\nShow.hs\t\tPretty Printing\nListUtils.hs\t\nPrintList.hs\t\nProbability.hs\tCore
  probabilistic module\nVisualize.hs\tVisualization system for use with R\n\nExamples:\n\nBarber.hs\t\tAn
  example of the queueing system\nBayesianNetwork.hs\tImplementing Bayesian networks\nBoys.hs\t\t\tA
  statistical examples\nNBoys.hs\t\tA generalized version of the previous\nCollection.hs\t\tCollections
  and two examples:\n\t\t\tMarbles and cards\nDice.hs\t\t\tRolling dice\nMontyHall.hs\t\tThe
  \"Monty Hall\" Game (statistical)\nPredator.hs\t\tNon-probabilistic, demonstrates
  visualization\nTreeGrowth.hs\t\tA simple tree growth example\n\n\n\nVisualize output
  is placed in the file FuSE.R which can be loaded into the \nR statistical program
  to see visualizations.\n\nRandomized values can be displayed to the console using
  the printR \nfunction, which shows the value from a IO monad function.\n\n"
description-type: text
hash: 650acf8475d827355a9970f2c17b62bfaf3d9cf233351dfeaeb507e68b475295
homepage: http://www.haskell.org/haskellwiki/Probabilistic_Functional_Programming
latest: 0.2.8
license-name: BSD-3-Clause
maintainer: Henning Thielemann <haskell@henning-thielemann.de>
synopsis: Probabilistic Functional Programming
test-bench-deps: {}
