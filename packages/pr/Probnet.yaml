homepage: https://github.com/pedroelbanquero/geometric-extrapolation
changelog-type: markdown
hash: 5ded8823636903ae9fbc16dc05d475a38cd3e0b8db51176f901a4f7ab2be9a84
test-bench-deps: {}
maintainer: vnos@cobalt.tech,vnos@blackhole.consulting
synopsis: Geometric Extrapolation of Integer Sequences with error prediction
changelog: |
  # Revision history for Probnet

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
basic-deps:
  base: '>=4.11 && <=4.15'
all-versions:
- 0.1.0.0
- 0.1.0.1
author: Vicent Nos
latest: 0.1.0.1
description-type: markdown
description: "# Probnet \n\n## Usage \n\n````haskell\n\nghci Probnet.hs\n\n````\n\n````haskell\n\n>
  probnet 1 [1,2,3,5,8]\n\n[1,2,3,5,8,13]\n\n````\n\n## Geometric Extrapolation of
  Integer Sequences with error prediction\n\n\n## The problem\n\n\nIn many situations,
  we have finite sequences of integer values, and we would like to predict which would
  be the next one, or the next several ones, without the knowledge of the mathematical
  definition of the sequence. \n\nA solution based just on the available data has
  applications on the following areas, among others:\n\n- time series forecasting\n-
  uncertain prediction\n- data modeling\n- risk modeling\n\n\n## A geometric way of
  prediction \n\n\n### Simple base solution\n\nWe start with a simple geometric solution,
  that is to calculate the ratio (quotient) of the last value relative to the previous
  one, and apply it to the last value to calculate the next one. \n\nFor example,
  if we have some values of the Fibonacci sequence: \n\n    fibo = [1,2,3,5,8,13]\n\nwe
  get the ratios of each element relative to its previous one: \n\n    percents fibo\n
  \   [2.0,1.5,1.6666666666666667,1.6,1.625]\n\nThen, we predict the next element
  as the product of the last element by the last ratio: \n\n    13 * 1.625 = 21.125\n\n\n###
  Improving the result with the prediction of the error\n\nWe can get the predicted
  value for each subsequence of initial values of the original sequence. \n\n    drop
  2 (inits fibo)\n    [[1,2],[1,2,3],[1,2,3,5],[1,2,3,5,8],[1,2,3,5,8,13]]\n\n    fmap
  predict1 it\n    [4.0,4.5,8.333333333333334,12.8,21.125]\n\nThen, we can calculate
  the difference between the predicted value and the real value. This way, we get
  a sequence of the errors, and we can calculate the predicted value of the next error,
  wich we will add to the simple prediction, notably improving the result. \n\n    err
  = zipWith subtract it (drop 2 fibo)\n    [-1.0,0.5,-0.3333333333333339,0.1999999999999993]\n\n
  \   predict1 it\n    -0.1333333333333331\n\n    21.125 - 0.1333333333333331 = 20.991666666666667\n\nWe
  round the result to get the integer predicted value. \n\n\n### Sequences with quasi-cyclic
  pattern\n\nWhen a sequence is not monothonic, we assume that it has a repetitive
  pattern, so that the ratio used for prediction will be the one of the element whose
  value is closest to the last element. \n\nFor example, in the next sequence, the
  value closest to the last one is the first `3`, and the ratio of that position is
  `4/3`, so the predicted value will be `3*(4/3)`:\n\n    percents [1,2,3,4,5,1,2,3,4,1,2,3]\n
  \   [2.0,1.5,1.3333333333333333,1.25,0.2,2.0,1.5,1.3333333333333333,0.25,2.0,1.5]\n\n
  \   predict1 [1,2,3,4,5,1,2,3,4,1,2,3]\n    4.0\n\n\n### Recursive layers of predictions\n\nOnce
  we have predicted the next value of a sequence, we can append it to the original
  sequence and predict another element. We can do this as many times as we want. We
  call \"layers\" to the number of recursions. Then, if we apply 3 layers to our fibonacci
  secuence `fib = [1,2,3,5,8,13]`, we get 3 more values: \n\n    probnet 3 fibo\n
  \   [1,2,3,5,8,13,21,34,55]\n\n\n## Problems and limitations\n\nThe geometric way,
  that is, a way based on ratios of values, can only be valid for non-zero values,
  and is not suitable for sequences with negative and positive values. In that case
  it should be more appropiate the use of a usual diferential method, which can be
  very simmilar to the one presented here, but using diferences of elements instead
  of quotients of elements. \n\nThe case of zero values is not solved here. The function
  will just return an error if any element is 0. \n\n\n## Tecnical details\n\n###
  Data types\n\nThe type signature of the function is such that any `RealFrac` data
  type can be used for the values of the elements in the input sequence. The internal
  calculations will be done in that data type, preserving the precicion of it. \n\nFor
  example, if the type is a 32 bit `Float`, the calculus would be made with about
  21 decimal digits of precision, but if the input elements are `Rational`, the intermediate
  calculus would preserve infinite precision, until the rounding for the ÃŒnteger`
  output. That is the reason for importing `Data.Ratio`. \n\n    fibo = [1,2,3,5,8,13
  :: Float]\n    predic1 fibo\n    21.125\n\n    fibo = [1,2,3,5,8,13 :: Rational]\n
  \   predict1 fibo\n    169 % 8\n\nIt also implies that the input sequence can not
  be of any `Integral` type, it must be previously converted to a `RealFrac` type
  by using, for example, `fromInteger` conversion function. It is done this way on
  the testing file `test-probnet.hs`. \n\n### Arithmetic equivalent method\n\nIt can
  be noticed that an arithmetic, instead of geometric, method for the extrapolation
  can be coded by just changing the `quotient` `sub-function in the `percents` function
  by the standard `subtract`, and the product (*) in the `predict1` function by addition
  (+).\n\nSuch method would not require that every element in the sequence be different
  than 0, and the method would be suitable for sequences with negative and positive
  values. \n\n\n## Testing\n\nThe file `test-probnet.hs` contains a function `testoeis`
  to bulk testing the function `probnet` against a range of OEIS sequences, giving
  the numbers after the 'A' on the OEIS sequence ID. \n\n    testoeis 1 20\n    [(\"A3\",[1,1,1,1,2,2,1,2,2,2,3,2,2,4,2,2,4,2,3,4,4,2,3,4,2,6,3,2,6,4,3,4,4,4,6,4,2,6,4,4,8,4,3,6,4,4,5,4,4,6,6,4,6,6,4,8,4,2,9,4,6,8,4,4,8,8,3,8,8,4,7,4,4,10,6,6,8,4,5,8,6,4,9,8,4,10,6,4,12,8,6,6,4,8,8,8,4,8,6,4]),(\"A12\",[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1])]\n\nThe
  testing is made using just the first 10 values for predicting the 11 one, and comparing
  it with the real 11th element, counting it as valid when both, predicted and real,
  are equal. \n\n\n\nAuthor - Vicent Nos Ripolles\n\nDev Pedro S\n\nDev Enrique S\n\nAll
  rights are reserved for commercial purposes of any derivatives of this document
  and source code. \n"
license-name: MIT
