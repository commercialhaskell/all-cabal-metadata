homepage: http://github.com/quchen/prettyprinter
changelog-type: markdown
hash: 9c43c9d8c3cd9f445596e5a2379574bba87f935a4d1fa41b5407ee3cf4edc743
test-bench-deps:
  bytestring: -any
  ansi-wl-pprint: '>=0.6'
  base: '>=4.7 && <5'
  text: -any
  doctest: '>=0.9'
  gauge: '>=0.2'
  containers: -any
  quickcheck-instances: '>=0.3'
  base-compat: '>=0.9.3 && <0.12'
  tasty-quickcheck: '>=0.8'
  mtl: '>=2.1'
  tasty-hunit: '>=0.9'
  prettyprinter: -any
  transformers: '>=0.3'
  random: '>=1.0'
  tasty: '>=0.10'
  deepseq: -any
  QuickCheck: '>=2.7'
  pgp-wordlist: '>=0.1'
maintainer: Simon Jakobi <simon.jakobi@gmail.com>, David Luposchainsky <dluposchainsky
  at google>
synopsis: A modern, easy to use, well-documented, extensible pretty-printer.
changelog: |
  # [1.7.1]

  - [Deprecate the `Data.Text.Prettyprint.*` modules](https://github.com/quchen/prettyprinter/pull/203)
    * Users should migrate to the new `Prettyprinter` module hierarchy.
    * The old modules will be removed no sooner than September 2022.
  - [Make `text` an optional dependency:](https://github.com/quchen/prettyprinter/pull/202)
    * When built with `-f-text`, any `text`-based APIs will operate on `String`s instead.
  - Documentation improvements:
    * [#194](https://github.com/quchen/prettyprinter/pull/194)
    * [`1f0bffe`](https://github.com/quchen/prettyprinter/commit/1f0bffe5eb53874d1ba46b0a80bda67c02365f1b)

  [1.7.1]: https://github.com/quchen/prettyprinter/compare/v1.7.0...v1.7.1

  # [1.7.0]

  ## Breaking changes

  - [Fix `layoutPretty` and `layoutSmart` so they don't produce trailing whitespace as a result of indenting empty lines.](https://github.com/quchen/prettyprinter/pull/139)
    * Users of `removeTrailingWhitespace` should check whether it is still needed.
  - [Use `floor` instead of `round` to compute ribbon width.](https://github.com/quchen/prettyprinter/pull/160)
  - [Remove deprecated `Data.Text.Prettyprint.Doc.Render.ShowS` module.](https://github.com/quchen/prettyprinter/pull/173)
  - [Add optimized implementation of `stimes` for `Doc`.](https://github.com/quchen/prettyprinter/pull/135)
  - [Generalize the type of `layoutCompact` to clarify that it doesn't preserve annotations.](https://github.com/quchen/prettyprinter/pull/183)
  - [Add strictness annotations in `SimpleDocStream` and `PageWidth`.](https://github.com/quchen/prettyprinter/pull/129)

  ## Non-breaking changes

  - [Add shallower `Prettyprinter` module hierarchy exposing the same API.](https://github.com/quchen/prettyprinter/pull/174)
    * The current plan for the existing `Data.Text.Prettyprint.Doc*` modules is:
      * Start deprecation in early 2021.
      * Remove the modules after a deprecation period of at least one year.
  - [Fix build with GHC 7.4.](https://github.com/quchen/prettyprinter/pull/187)
  - Various documentation improvements.

  [1.7.0]: https://github.com/quchen/prettyprinter/compare/v1.6.2...v1.7.0

  # 1.6.2

  - Speed up rendering to lazy and strict `Text`.
  - Documentation improvements for `group` and `flatAlt`.
  - Internal refactoring of the `layoutWadlerLeijen`-based layouters.

  # 1.6.1

  - Slightly reduce the scope of the fitting predicates for some edge cases.
  - Use an export list in `Data.Text.Prettyprint.Doc.Internal`.
  - Improve `group` for `Union` and `FlatAlt`.
  - Speed up `removeTrailingWhitespace`.
  - Improve generating spaces for indentation and `spaces`.
  - Simplify some `Doc` constants by defining them as `Doc` literals.
  - Enable `-O2`.
  - Various documentation fixes and improvements.

  # 1.6.0

  ## Breaking changes

  - Fix `fuse`'s handling of annotated documents:
    - Don't remove annotations on empty documents.
    - Apply fusion within annotations.
  - Fix layouting of hard linebreaks with `Unbounded` page widths.

  ## Non-breaking changes

  - Speed up `group` for documents containing linebreaks and previously
    `group`ed documents.
  - Add debugging helpers in `Data.Text.Prettyprint.Doc.Internal.Debug`
  - Documentation improvements and fixes

  # 1.5.1

  - Removing trailing whitespace sometimes restored necessary whitespace in the
    wrong spot

  # 1.5

  - Fix inconsistent formatting within align and wide sub-docs on narrow layouts

  # 1.4

  - Add fixity declaration to `<+>`, matching `<>`
  - Fix removal of trailing whitespace

  # 1.3.0.1

  - Support Stack 2

  # 1.3.0

  - Add alignment to Pretty [a] instance
  - Fix removal of blank lines in `removeTrailingWhitespace`
  - Widened support for GHC versions 7.4–8.8

  # 1.2.1.1

  - Fix dependency of doctest suite

  # 1.2.1

  - Add function to trim trailing space in layouted `SimpleDocStream`,
    `removeTrailingWhitespace`
  - Add `Pretty` instances for `Identity` and `Const`

  # 1.2.0.1

  - Fix `alterAnnotationsS` (and thus `unAnnotateS`), which removed pushing, but
    not popping, style frames. This led to them throwing errors in pretty much all
    use cases.

  # 1.2

  - `encloseSep` does no longer include an `align` wrapper; in other words,

      ```haskell
      encloseSep_old … = align (encloseSep_new …)
      ```
  - Change the default ribbon fraction to 1 (was 0.4)
  - Expose `viaShow` and `unsafeViaShow` from the public module
  - Fix `layoutSmart` behaving as if there was no space left for unbounded pages

  # 1.1.1

  - Add `panicPeekedEmpty` and `panicPoppedEmpty` to the panic module

  # 1.1.0.1

  - Rendering directly to a handle is now more efficient in the `Text` renderer,
    since no intermediate `Text` is generated anymore.
  - Remove upper version bounds from `.cabal` files

  # 1.1

  - Allow `alterAnnotations` to convert one annotation to multiple ones, to
    support e.g. `Keyword ---> Green+Bold`
  - Remove `Pretty` instance for `Doc`: the implicit un-annotation done by it did
    more harm than good.

  # 1.0.1

  - Add `alterAnnotations`, which allows changing or removing annotations.
    `reAnnotate` and `unAnnotate` are now special cases of this.
  - Fix »group« potentially taking exponential time, by making the (internal)
    `flatten` function detect whether it is going to have any effect inside
    `group`.
  - Add proper version bounds for all dependencies and backport them to version 1
  - Haddock: example for `Pretty Void`

  # 1

  - Add Foldable/Traversable instances for `SimpleDocTree`, `SimpleDocStream`
  - Add Functor instances for `Doc`, `SimpleDocTree`, `SimpleDocStream`
  - Add the simplified renderers `renderSimplyDecorated` and
    `renderSimplyDecoratedA` to the tree and stack renderer modules
  - Lots of typo fixes and doc tweaks
  - Add a changelog :-)

  # 0.1

  Initial release.
basic-deps:
  base: '>=4.7 && <5'
  text: '>=1.2'
  prettyprinter: -any
  template-haskell: '>=2.9'
all-versions:
- '1'
- 1.0.1
- '1.1'
- 1.1.0.1
- 1.1.1
- '1.2'
- 1.2.0.1
- 1.2.1
- 1.2.1.1
- 1.3.0
- 1.4.0
- 1.5.0
- 1.5.1
- 1.6.0
- 1.6.1
- 1.6.2
- 1.7.0
- 1.7.1
author: Phil Wadler, Daan Leijen, Max Bolingbroke, Edward Kmett, David Luposchainsky,
  Simon Jakobi
latest: 1.7.1
description-type: markdown
description: |
  <!-- This file was auto-generated by the 'scripts/generate_readme' program. -->



  A modern Wadler/Leijen Prettyprinter
  ====================================

  [![](https://img.shields.io/hackage/v/prettyprinter.svg?style=flat-square&label=Hackage&colorB=0a7bbb)](https://hackage.haskell.org/package/prettyprinter)

  tl;dr
  -----

  A prettyprinter/text rendering engine. Easy to use, well-documented, ANSI
  terminal backend exists, HTML backend is trivial to implement, no name clashes,
  `Text`-based, extensible.

  ```haskell
  let prettyType = align . sep . zipWith (<+>) ("::" : repeat "->")
      prettySig name ty = pretty name <+> prettyType ty
  in  prettySig "example" ["Int", "Bool", "Char", "IO ()"]
  ```

  ```haskell
  -- Output for wide enough formats:
  example :: Int -> Bool -> Char -> IO ()

  -- Output for narrow formats:
  example :: Int
          -> Bool
          -> Char
          -> IO ()
  ```




  Longer; want to read
  --------------------

  This package defines a prettyprinter to format text in a flexible and convenient
  way. The idea is to combine a document out of many small components, then using
  a layouter to convert it to an easily renderable simple document, which can then
  be rendered to a variety of formats, for example plain `Text`, or Markdown.
  *What you are reading right now was generated by this library (see
  `GenerateReadme.hs`).*



  Why another prettyprinter?
  --------------------------

  Haskell, more specifically Hackage, has a zoo of Wadler/Leijen based
  prettyprinters already. Each of them addresses a different concern with the
  classic `wl-pprint` package. This package solves *all* these issues, and then
  some.



  ### `Text` instead of `String`

  `String` has exactly one use, and that’s showing Hello World in tutorials. For
  all other uses, `Text` is what people should be using. The prettyprinter uses no
  `String` definitions anywhere; using a `String` means an immediate conversion to
  the internal `Text`-based format.



  ### Extensive documentation

  The library is stuffed with runnable examples, showing use cases for the vast
  majority of exported values. Many things reference related definitions,
  *everything* comes with at least a sentence explaining its purpose.



  ### No name clashes

  Many prettyprinters use the legacy API of the first Wadler/Leijen prettyprinter,
  which used e.g. `(<$>)` to separate lines, which clashes with the ubiquitous
  synonym for `fmap` that’s been in Base for ages. These definitions were either
  removed or renamed, so there are no name clashes with standard libraries
  anymore.



  ### Annotation support

  Text is not all letters and newlines. Often, we want to add more information,
  the simplest kind being some form of styling. An ANSI terminal supports
  coloring, a web browser a plethora of different formattings.

  More complex uses of annotations include e.g. adding type annotations for
  mouse-over hovers when printing a syntax tree, adding URLs to documentation, or
  adding source locations to show where a certain piece of output comes from.
  [Idris](https://github.com/idris-lang/Idris-dev) is a project that makes
  extensive use of such a feature.

  Special care has been applied to make annotations unobtrusive, so that if you
  don’t need or care about them there is no overhead, neither in terms of
  usability nor performance.



  ### Extensible backends

  A document can be rendered in many different ways, for many different clients.
  There is plain text, there is the ANSI terminal, there is the browser. Each of
  these speak different languages, and the backend is responsible for the
  translation to those languages. Backends should be readily available, or easy to
  implement if a custom solution is desired.

  As a result, each backend requires only minimal dependencies; if you don’t want
  to print to an ANSI terminal for example, there is no need to have a dependency
  on a terminal library.



  ### Performance

  Rendering large documents should be done efficiently, and the library should
  make it easy to optimize common use cases for the programmer.



  ### Open implementation

  The type of documents is abstract in most of the other Wadler/Leijen
  prettyprinters, making it hard to impossible to write adaptors from one library
  to another. The type should be exposed for such purposes so it is possible to
  write adaptors from library to library, or each of them is doomed to live on its
  own small island of incompatibility. For this reason, the `Doc` type is fully
  exposed in a semi-internal module for this specific use case.



  The prettyprinter family
  ------------------------

  The `prettyprinter` family of packages consists of:

    - `prettyprinter` is the core package. It defines the language to generate
      nicely laid out documents, which can then be given to renderers to display
      them in various ways, e.g. HTML, or plain text.
    - `prettyprinter-ansi-terminal` provides a renderer suitable for ANSI terminal
      output including colors (at the cost of a dependency more).
    - `prettyprinter-compat-wl-pprint` provides a drop-in compatibility layer for
      previous users of the `wl-pprint` package. Use it for easy adaption of the
      new `prettyprinter`, but don't develop anything new with it.
    - `prettyprinter-compat-ansi-wl-pprint` is the same, but for previous users of
      `ansi-wl-pprint`.
    - `prettyprinter-compat-annotated-wl-pprint` is the same, but for previous
      users of `annotated-wl-pprint`.
    - `prettyprinter-convert-ansi-wl-pprint` is a *converter*, not a drop-in
      replacement, for documents generated by `ansi-wl-pprint`. Useful for
      interfacing with other libraries that use the other format, like Trifecta
      and Optparse-Applicative.



  Differences to the old Wadler/Leijen prettyprinters
  ---------------------------------------------------

  The library originally started as a fork of `ansi-wl-pprint` until every line
  had been touched. The result is still in the same spirit as its predecessors,
  but modernized to match the current ecosystem and needs.

  The most significant changes are:

    1. `(<$>)` is removed as an operator, since it clashes with the common alias
       for `fmap`.
    2. All but the essential `<>` and `<+>` operators were removed or replaced by
       ordinary names.
    3. Everything extensively documented, with references to other functions and
       runnable code examples.
    4. Use of `Text` instead of `String`.
    5. A `fuse` function to optimize often-used documents before rendering for
       efficiency.
    6. SimpleDoc was renamed `SimpleDocStream`, to contrast the new
       `SimpleDocTree`.
    7. In the ANSI backend, instead of providing an own colorization function for
       each color/intensity/layer combination, they have been combined in `color`,
       `colorDull`, `bgColor`, and `bgColorDull` functions, which can be found in
       the ANSI terminal specific `prettyprinter-ansi-terminal` package.



  Historical notes
  ----------------

  This module is based on previous work by Daan Leijen and Max Bolingbroke, who
  implemented and significantly extended the prettyprinter given by a [paper by
  Phil Wadler in his 1997 paper »A Prettier
  Printer«](https://homepages.inf.ed.ac.uk/wadler/papers/prettier/prettier.pdf),
  by adding lots of convenience functions, styling, and new functionality. Their
  package, ansi-wl-pprint is widely used in the Haskell ecosystem, and is at the
  time of writing maintained by Edward Kmett.
license-name: BSD-2-Clause
