all-versions:
- '0.1'
author: Andrejs Sisojevs <andrejs.sisojevs@nextmail.ru>
basic-deps:
  base: '>=4 && <5'
  containers: '>=0'
  stm: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Abbreviation for the @PriorityChansConverger@ is PCC.

  Based on @STM.TChan@, extended with capacity control.
  Wrapped into IO version is also available.

  When user reads from the PCC, the choice is made - from which channel
  to read. System selects a nonempty channel, whose (CurrentPriority,
  StartPriority) tuple is max. The side effect of the channel selection
  is it's /CurrentPriority/ decrease by one, if it's value becomes
  less than one, then the /CurrentPriority/ is set to /StartPriority/.

  For the main API interface:

  @import Control.Concurrent.PriorityChansConverger@

  The realization probably isn't
  very fast and isn't good at memory economy, since it uses fresh high
  level primitive - STM. It wasn't intended to be used
  with millions of channels. But it's max throughput comparing to the
  ordinary @Chan@ throughput is to be estimated (will do it in some
  future version).
description-type: haddock
hash: 7c92cfe2444ba1bc7b571295bbccdad1d07144c9ae72f87189db18a558395a3a
homepage: ''
latest: '0.1'
license-name: LicenseRef-LGPL
maintainer: Andrejs Sisojevs <andrejs.sisojevs@nextmail.ru>
synopsis: Read single output from an array of inputs - channels with priorities
test-bench-deps: {}
