all-versions:
- '0.1'
author: Brandon Simmons
basic-deps:
  base: '>=4.6 && <4.7'
  tagged: '>=0'
changelog: ''
changelog-type: ''
description: |-
  It can be useful (especially with @PolyKinds@) to get the
  \"bare\" type (e.g. @Either@) of some parameterized type
  (e.g. @Either Char Int@). This library provides closed
  classes that can strip and reapply type arguments, as well
  as useful utility functions. Here are some examples:

  Force @Left 1@ to be of type @Either Float a@ using a
  partially-applied 'Proxy'.

  >>> let t = (Left 1) `asApplied` (Proxy :: Proxy (Either Float))
  >>> :t t
  t :: Either Float a

  Do the same, but illustrating type application with @ap@

  >>> let t0 = (Left 1) `asApplied` ((Proxy :: Proxy Either) `ap` (Proxy :: Proxy Float))
  >>> :t t0
  t0 :: Either Float a

  Force polymorphic @undefined@ to some polymorphic @Either@
  type, the base type of @t@ defined above.

  >>> let u = undefined `asApplied` (unappliedOf t)
  >>> :t u
  u :: Either a a1
description-type: haddock
hash: 919c9966097bb5aa94e2802276bc69183ad0412861b159d6a038a3dc0cdbce7d
homepage: https://github.com/jberryman/proxy-kindness
latest: '0.1'
license-name: BSD-3-Clause
maintainer: brandon.m.simmons@gmail.com
synopsis: A library for kind-polymorphic manipulation and inspection of Proxy values
test-bench-deps: {}
