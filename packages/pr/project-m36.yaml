all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- 0.5.1
- '0.6'
- '0.7'
- '0.8'
- 0.8.1
- 0.9.0
- 0.9.4
- 0.9.5
- 0.9.6
- 0.9.7
- 0.9.8
- 0.9.9
- 1.0.0
- 1.0.1
- 1.0.2
- 1.1.0
- 1.1.1
author: AgentM
basic-deps:
  Cabal: '>=0'
  Glob: '>=0'
  HUnit: '>=0'
  MonadRandom: '>=0'
  QuickCheck: '>=0'
  aeson: '>=1.1'
  async: '>=0'
  attoparsec: '>=0'
  barbies: '>=0'
  base: '>=4.14 && <5'
  base16-bytestring: '>=1.0.0.0'
  base64-bytestring: '>=0'
  blaze-html: '>=0'
  bytestring: '>=0'
  cassava: '>=0.4.5.1 && <0.6'
  conduit: '>=0'
  containers: '>=0'
  convertible: '>=0'
  cryptohash-sha256: '>=0'
  curryer-rpc: '>=0.4.0'
  data-default: <0.8
  data-interval: '>=0'
  deepseq: '>=0'
  deepseq-generics: '>=0'
  deferred-folds: '>=0'
  directory: '>=0'
  either: '>=0'
  exceptions: '>=0'
  extended-reals: '>=0'
  fast-builder: '>=0'
  filepath: '>=0'
  foldl: '>=0'
  ghc: '>=9.0'
  ghc-boot: '>=0'
  ghc-paths: '>=0'
  ghci: '>=0'
  gnuplot: '>=0'
  hashable: '>=0'
  haskeline: '>=0'
  http-api-data: '>=0'
  http-conduit: '>=0'
  http-types: '>=0'
  list-t: '>=0'
  megaparsec: '>=5.2.0 && <10'
  modern-uri: '>=0'
  monad-parallel: '>=0'
  mtl: '>=0'
  network: '>=0'
  old-locale: '>=0'
  optparse-applicative: '>=0'
  parallel: '>=0'
  parser-combinators: '>=0'
  path-pieces: '>=0'
  prettyprinter: '>=0'
  project-m36: '>=0'
  quickcheck-instances: '>=0'
  random: '>=0'
  random-shuffle: '>=0'
  recursion-schemes: '>=0'
  resourcet: '>=0'
  rset: '>=0'
  scientific: '>=0'
  scotty: '>=0.22'
  semigroups: '>=0'
  stm: '>=0'
  stm-containers: '>=1.0.0'
  streamly: ==0.10.1
  template-haskell: '>=0'
  temporary: '>=0'
  text: '>=0'
  text-manipulate: '>=0.2.0.1 && <0.4'
  time: '>=0'
  transformers: '>=0'
  unix: '>=0'
  unordered-containers: '>=0'
  uuid: '>=1.3.12'
  vector: '>=0'
  vector-instances: '>=0'
  wai: '>=0'
  wai-websockets: '>=0'
  warp: '>=0'
  warp-tls: '>=0'
  websockets: '>=0'
  winery: '>=1.4'
  zlib: '>=0'
changelog: "# 2025-03-30 (v1.1.1)\n\n* upgrade to curryer-rpc 0.4.0 which includes
  support for IPv6 and Unix domain socket communications\n\nThis improvement changes
  the connectProjectM36 API. When connecting to a database over IPv4 or IPv6, use
  `RemoteConnectionInfo <dbname> (RemoteServerHostAddress <String ip_addr> <Int port>)
  <NotificationCallback>`.\n\n# 2024-08-25 (v1.1.0)\n\n* add support for GHC 9.6,
  GHC 9.8, and GHC 9.10\n* clean up compiler warnings\n\n# 2024-07-27 (v1.0.2)\n\n*
  upgrade to streamly 0.10.1\n* refactor websocket API to support request UUIDs (#367)\n*
  refactor websocket API to support `createSessionAtHead` (#367)\n\n# 2024-07-15 (v1.0.1)\n\n*
  add support for aggregate functions using sub-relation attributes\n\n# 2024-06-06
  (v1.0.0)\n\n* add support for relational expression evaluation against sub-relations\n*
  add support for SQL dialect and console called \"SQLegacy\"\n\n# 2024-01-12 (v0.9.9)\n\n*
  revert to using streamly 0.9.0 due to over-the-wire corruption bug in 0.10.0\n*
  fixed toAtom/fromAtom for NonEmpty lists (#363)\n\n# 2023-12-30 (v0.9.8)\n\n* fix
  notification serialization in transaction (#362)\n* require minimum GHC 9.2 (dropping
  GHC 8.10 and GHC 9.0)\n* add support for GHC 9.4\n\n# 2023-07-18 (v0.9.7)\n\n* fix
  critical bug resulting in empty results from cross joins\n\n# 2022-11-05 (v0.9.6)\n\n*
  fix tuple context passed down to extended expressions\n* add ddl hash- useful for
  validating that the client supports the current schema\n* add registered queries-
  useful for constraining what DDL can be applied to the database so as not to break
  client applications\n* reduce memory usage during Merkle hashing by an order of
  magnitude by using strict serialization and hashing\n\n# 2022-08-19 (v0.9.5)\n\n*
  removed necessity for caret \"^\" when using boolean atom expressions in restriction
  predicates\n* `True` and `False` are now value constructors for `Bool` atom values
  (previously `t` and `f); changed for better discoverability by Haskell developers\n*
  add `Scientific` data type for arbitrary-precision values (backed by Data.Scientific)\n*
  add support for GHC 9.0 and GHC 9.2\n* drop support for GHC < 8.10.7\n* fix relational
  equality when the relation includes a nested relation\n\n# 2021-12-05 (v0.9.4)\n\n*
  fix bug which [caused tuple storage to be duplicated unnecessarily](https://github.com/agentm/project-m36/pull/328)\n*
  add support for `case` and `if-then-else` expressions\n* allow relation variable
  names and attribute names to be escaped using backticks\n* add UUID primitive type\n*
  complete implementation of [object and shared object files at runtime](https://github.com/agentm/project-m36/blob/master/docs/atomfunctions.markdown#pre-compiled-atom-functions)
  in order to compete with Haskell scripting alternative\n* fix constraint checking
  after undefining a relation variable\n* optionally allow TLS and client certificate
  authentication in Project:M36 server\n* require GHC >=8.8\n\n# 2021-04-01 (v0.9.3)\n\n*
  add new \":importtutd <URI> <SHA256 hash>\" feature to import TutorialD from a local
  file or a HTTP/HTTPS URI\n\n# 2020-12-27 (v0.9.0)\n\n* replace unmaintained distributed-process-client-server
  RPC package with new curryer RPC package\n* drop support for GHC 8.2 and GHC 8.4
  due to dependency on DerivingVia extension\n\n# 2020-11-21 (v0.8.2)\n\n* support
  multiple extend expressions in TutorialD\n* fix parsing of Bool atoms in TutorialD\n*
  fix database context expressions which include self-references such as `s:=s union
  s`\n* show constraints as TutorialD when using tutd console\n* add `RelationalExprAtom`
  data type useful for storing `RelationalExpr` within the database\n\n# 2020-10-05
  (v0.8.1)\n\n* support GHC 8.10\n\n# 2020-05-25 (v0.8)\n\n* refactor backend to maximize
  laziness: [An Architecture for Data Independence](docs/data_independence.markdown)\n\n#
  2019-09-07 (v0.7)\n\n* fix case sensitivity issue with relation variables in tutd\n*
  fix multibyte escaping in data frames\n* fix broken instances of `Atomable [a]`\n*
  fix `TypeConstructor` validation of argument count\n* add help option to executables\n\n#
  2019-01-08 (v0.6)\n\n* fix atom type parsing to support more complex data types\n*
  add [data frames](docs/dataframes.markdown) to support server-side sort ordering,
  limits, and offsets\n\n# 2018-10-03 (v0.5.1)\n\n* fix atom function type validation\n*
  add support for GHC 8.4 (now we support GHC 8.0, 8.2, and 8.4)\n\n# 2018-08-10 (v0.5)\n\n*
  fix critical type bug which allowed unresolved types to be used\n* add full support
  for GHC 8.2 with stack or cabal (delayed for a long time by dependency version boundaries)\n*
  drop support for GHC 7.10\n* add support for `with (relexpr as name,...)` syntax
  for use as tutd macros\n* add `NonEmptyList` list data type\n\n# 2018-06-04 (v0.4)\n\n*
  add contributed feature to allow users to [create arbitrary relations](https://github.com/agentm/project-m36/blob/master/docs/tutd_tutorial.markdown#arbitrary-relation-variables)\n*
  fix type validation bug allowing concrete type with type variables in relations\n*
  improve usability of `Interval a` data type\n* allow `Integer` to be parsed as negative
  in `tutd` console\n* support precompiled (Haskell) [`AtomFunction`s](https://github.com/agentm/project-m36/blob/master/docs/atomfunctions.markdown#pre-compiled-atom-functions)
  and [`DatabaseContextFunction`s](https://github.com/agentm/project-m36/blob/master/docs/database_context_functions.markdown#loading-precompiled-modules)\n*
  make TutorialD scripts read from the filesystem unconditionally read as UTF-8\n*
  improve support for display of multibyte characters in `tutd` console, especially
  Chinese\n* fix file descriptor leak in file sychronization\n* improve reliability
  by allowing fast-forward commits when using `autoMergeToHead`\n* add [`semijoin`
  and `anitjoin`](https://github.com/agentm/project-m36/blob/master/docs/tutd_tutorial.markdown#join)
  support to `tutd`\n* added various new static optimizations\n\n# 2017-11-14\n\n*
  alter websocket server API to allow for multiple representations (JSON, text, or
  HTML) to be selected and returned simultaneously\n* add jupyter kernel for TutorialD
  interpreter\n* fix warnings suggested by new hlint 2.0.10\n\n# 2017-10-08 (v0.3)\n\n*
  replaced overuse of `undefined` with `Proxy` in `Tupleable` and `Atomable` typeclasses\n*
  allow notifications to return query results from before *and* after the commit which
  triggered the notification\n* alert users in `tutd` console before a transaction
  graph expression is evaluated which would throw out their changes\n* drastically-improved
  CSV import/export now supports all possible types except `RelationAtom`\n* fix serious
  file handle leaks when using on-disk persistence\n* fix case where invalid number
  of arguments to `ConstructedAtom` did not result in an error\n* add support for
  `IntegerAtom` (previously, only `IntAtom` was supported)\n\n# 2017-09-16 (v0.2)\n\n*
  a new [simple client API](https://github.com/agentm/project-m36/blob/master/docs/simple_api.markdown)
  with a monadic transaction manager\n* complete hlint compliance\n* the generics-based
  [Tupleable typeclass](\thttps://github.com/agentm/project-m36/blob/master/docs/tupleable.markdown\n)
  which makes it easy to marshal Haskell data types to-and-from the database\n* timestamps
  attached to transactions to allow specific point-in-time travel\n* autoMergeToHead,
  a variant of commit which attempts to merge and commit to the latest head transaction
  to reduce incidents of TransactionNotAHeadErrors\n* interval data types\n* transaction
  dirtiness detection which allows the client to determine if an update expression
  actually changed the database state\n\n# 2017-08-01\n\n## autoMergeToHead\n\nIn
  preparation for the simpler monad client API, ProjectM36.Client now includes a server-side
  merge for new transactions called \"[automerge](https://github.com/agentm/project-m36/issues/33)\".
  This feature should reduce head contention in cases where new transactions can be
  simply merged to the head without additional processing. The trade-off is reduced
  ```TransactionIsNotAHeadError```s but an increased chance of merge errors. The feature
  operates similarly to a server-side git rebase.\n\n## critical bug in merging\n\nSuccessfully
  merged transactions did not have their constraints validated. Fixed.\n\n# 2017-06-12\n\n##
  add file locking\n\nThis [feature](#102) allows Project:M36 database directories
  to be shared amongst multiple Project:M36 processes. This is similar to how SQLite
  operates except that the remote server mode supports the feature as well. This could
  allow, for example, multi-master, file-based replication across Windows shares or
  NFS.\n\n[Documentation](/docs/replication.markdown)\n\n# 2016-11-30\n\n## add functional
  dependency macro\n\nDate demonstrates two ways to implement functional dependencies
  as constraints on page 21 in \"Database Design and Relational Theory\". A similar
  macros is now implemented in the tutd interpreter.\n\n```funcdep sname_status (sname)
  -> (status) s```\n\n[Documentation](/docs/tutd_tutorial.markdown#functional-dependencies)\n\n#
  2016-09-07\n\n## add TransGraphRelationalExpr\n\nThe TransGraphRelationalExpr allows
  queries against all past states of the database.\n\nThe following example executes
  a query against two different committed transactions using syntax similar to that
  of git for graph traversal:\n```:showtransgraphexpr s@master~ join sp@master```\n\n[Documentation](/docs/transgraphrelationalexpr.markdown)\n"
changelog-type: markdown
description: |
  # Ξ Project:M36 Relational Algebra Engine

  [![Haskell Programming Language](https://img.shields.io/badge/language-Haskell-blue.svg)](https://www.haskell.org)
  [![Public Domain](https://img.shields.io/badge/license-Public%20Domain-brightgreen.svg)](http://unlicense.org)
  [![Hackage](https://img.shields.io/hackage/v/project-m36.svg)](http://hackage.haskell.org/package/project-m36)
  [![Hackage dependency status](https://img.shields.io/hackage-deps/v/project-m36.svg)](http://packdeps.haskellers.com/feed?needle=project-m36)
  [![Windows Build status](https://ci.appveyor.com/api/projects/status/q7jyddd6dy1ibqdo/branch/master?svg=true)](https://ci.appveyor.com/project/agentm/project-m36)
  [![Github Workflow status](https://github.com/agentm/project-m36/workflows/CI/badge.svg)](https://github.com/agentm/project-m36/actions?query=workflow%3ACI)


  *Software can always be made faster, but rarely can it be made more correct.*

  ## Introduction

  Project:M36 implements a relational algebra engine as inspired by the writings of Chris Date. Project:M36 supports both SQL and TutorialD interactive access.

  ## Quick Install

  Project:M36 can be downloaded and run via docker, which supports Windows 10+, macOS, and Linux.

  Run `docker run -it projectm36/project-m36 tutd` to start the [TutorialD](docs/tutd_tutorial.markdown) command line interface.

  Run `docker run -it projectm36/project-m36 sqlegacy` to start the [SQLegacy](docs/sqlegacy.markdown) (SQL dialect) command line interface.

  ## Description

  Unlike most database management systems (DBMS), Project:M36 is opinionated software which adheres strictly to the mathematics of the relational algebra. The purpose of this adherence is to prove that software which implements mathematically-sound design principles reaps benefits in the form of code clarity, consistency, performance, and future-proofing.

  Project:M36 can be used as an in-process or remote DBMS.

  Project:M36 is written entirely in the [Haskell programming language](https://www.haskell.org/).

  ## Sample Session

  [![asciicast](https://asciinema.org/a/3syu35c8cydm403292a74l1n5.png)](https://asciinema.org/a/3syu35c8cydm403292a74l1n5)

  ## Use-Cases

  Project:M36 supports multiple frontends which target different audiences.

  * learn about the relational algebra via TutorialD
  * use SQLegacy to learn how SQL differs from the relational algebra
  * store and manipulate databases
  * use Project:M36 as a native Haskell database backend

  ## Community

  * [TutorialD for SQL Developers](https://www.udemy.com/course/tutoriald-for-sql-developers/)
    * ask in IRC channel for discount code to get free access
  * [Developer's Blog](https://agentm.github.io/project-m36/)
  * [Mailing List/Discussion Group](https://groups.google.com/d/forum/project-m36)
  * IRC Channel: irc.libera.chat #project-m36 -- [Chat via Web Client](http://kiwiirc.com/nextclient/irc.libera.chat:+6697/#project-m36)
  * [Hackage](https://hackage.haskell.org/package/project-m36)
  * [Diogo Biazus' Project:M36 Video Tutorial](https://www.youtube.com/watch?v=_GC_lxlVEnE)

  ## Documentation

  ### Introductory Materials

  1. [Installation and Introduction to Project:M36](docs/introduction_to_projectm36.markdown)
  1. [Introduction to the Relational Algebra](docs/introduction_to_the_relational_algebra.markdown)
  1. [TutorialD Cheatsheet](docs/tutd_cheatsheet.markdown)
  1. [TutorialD via Jupyter Notebook Walkthrough](jupyter/TutorialD%20Notebook%20Walkthrough.ipynb)
  1. [TutorialD Tutorial](docs/tutd_tutorial.markdown)
  1. [15 Minute Tutorial](docs/15_minute_tutorial.markdown)
  1. [Developer's Change Log](Changelog.markdown)
  1. [Simple Client API](docs/simple_api.markdown)
  1. [CSV Import/Export](docs/import_export_csv.markdown)
  1. [Developer Setup](docs/dev_setup.markdown)

  ### Database Comparisons

  1. [ACID Database Properties](docs/acid_assessment.markdown)
  1. [On NULL (in SQL)](docs/on_null.markdown)
  1. [Reaching "Out of the Tarpit" with Project:M36](docs/reaching_out_of_the_tarpit.markdown)
  1. [An Architecture for Data Independence](docs/data_independence.markdown)'


  ### SQL Support

  1. [Why SQLegacy?](docs/why_sqlegacy.markdown)
  1. [SQLegacy Documentation](docs/sqlegacy.markdown)

  ### Advanced Features

  1. [Transaction Graph Operators](docs/transaction_graph_operators.markdown)
  1. [ProjectM36.Client Library](docs/projectm36_client_library.markdown)
  1. [Data Frames for Sorting](docs/dataframes.markdown)
  1. [Adding New Data Types](docs/new_datatypes.markdown)
  1. [Database-Manipulating Functions](docs/database_context_functions.markdown)
  1. [Serving Remote ProjectM36 Databases](docs/server_mode.markdown)
  1. [Using Notifications](docs/using_notifications.markdown)
  1. [Merge Transactions](docs/merge_transactions.markdown)
  1. [Atom (Value) Functions](docs/atomfunctions.markdown)
  1. [Trans-Graph Relational Expressions](docs/transgraphrelationalexpr.markdown)
  1. [Isomorphic Schemas](docs/isomorphic_schemas.markdown)
  1. [Replication](docs/replication.markdown)
  1. [Basic Operator Benchmarks](https://rawgit.com/agentm/project-m36/master/docs/basic_benchmarks.html)
  1. [Merkle Transaction Hashes](docs/merkle_transaction_graph.markdown)
  1. [Handling DDL Changes](docs/Handling_DDL_Changes.markdown)

  ### Integrations

  1. [WebSocket Server](docs/websocket_server.markdown)
  1. [Jupyter Notebook Kernel](docs/jupyter_kernel.markdown)
  1. [Persistent Driver](https://github.com/YuMingLiao/persistent-project-m36)

  ## Development

  Project:M36 is developed in Haskell and compiled with GHC 9.2 or later.

  ## Related Projects

  * [The Third Manifesto](http://thethirdmanifesto.com/): the philosophical basis for relational algebra engines
  * [Rel](http://reldb.org/): a TutorialD implementation against a BerkeleyDB backend
  * [Andl](http://andl.org/): a new database language with SQLite and PostgreSQL backends
  * [Coddie](https://github.com/scvalencia/Coddie): a python-based relational algebra interpreter

  ## Suggested Reading

  * [Out of the Tarpit](https://github.com/papers-we-love/papers-we-love/blob/2eb8d21/design/out-of-the-tar-pit.pdf): a proposed software architecture which minimizes state and complexity. Project:M36 implements the requirements of this paper.
  * [Database Design & Relational Theory: Normal Forms and All That Jazz](http://shop.oreilly.com/product/0636920025276.do): mathematical foundations for the principles of the relational algebra
  * [Database Explorations: Essays on the Third Manifesto and Related Topics](http://bookstore.trafford.com/Products/SKU-000177853/Database-Explorations.aspx): additional essays and debates on practical approaches to relational algebra engine design
description-type: markdown
hash: 133af41c8aa1af55aa7a768da3b34f98cfed813247e5d8ca6a0596d87ac699b3
homepage: https://github.com/agentm/project-m36
latest: 1.1.1
license-name: MIT
maintainer: agentm@themactionfaction.com
synopsis: Relational Algebra Engine
test-bench-deps:
  Cabal: '>=0'
  HUnit: '>=0'
  MonadRandom: '>=0'
  aeson: '>=0'
  attoparsec: '>=0'
  base: '>=0'
  base16-bytestring: '>=0'
  base64-bytestring: '>=0'
  bytestring: '>=0'
  cassava: '>=0'
  containers: '>=0'
  criterion: '>=0'
  cryptohash-sha256: '>=0'
  curryer-rpc: '>=0'
  data-interval: '>=0'
  deepseq: '>=0'
  deepseq-generics: '>=0'
  directory: '>=0'
  filepath: '>=0'
  gnuplot: '>=0'
  hashable: '>=0'
  haskeline: '>=0'
  http-conduit: '>=0'
  http-types: '>=0'
  list-t: '>=0'
  megaparsec: '>=0'
  modern-uri: '>=0'
  mtl: '>=0'
  network: '>=0'
  optparse-applicative: '>=0'
  parallel: '>=0'
  parser-combinators: '>=0'
  prettyprinter: '>=0'
  project-m36: '>=0'
  random: '>=0'
  recursion-schemes: '>=0'
  scientific: '>=0'
  semigroups: '>=0'
  stm: '>=0'
  stm-containers: '>=0'
  temporary: '>=0'
  text: '>=0'
  time: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  uuid: '>=0'
  vector: '>=0'
  wai: '>=0'
  warp: '>=0'
  websockets: '>=0'
  winery: '>=0'
