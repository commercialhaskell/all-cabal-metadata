all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.0.0.4
- 1.0.0.5
- 1.0.0.6
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
- 1.1.0.3
- 2.0.0.0
- 2.0.1.0
- 2.0.2.0
- 2.0.2.1
- 2.1.0.0
- 2.1.0.1
- 2.2.0.0
- 2.2.0.1
- 3.0.0.0
- 3.1.0.0
- 3.1.1.0
- 3.2.0.0
- 3.2.1.0
- 3.2.2.0
- 3.2.3.0
- 3.3.0.0
- 4.0.0.0
- 4.1.0.0
- 4.1.1.0
- 4.1.2.0
author: Dennis Gosnell
basic-deps:
  aeson: '>=0'
  base: '>=4.8 && <5'
  bytestring: '>=0'
  containers: '>=0'
  mtl: '>=2.2'
  optparse-applicative: '>=0'
  pretty-simple: '>=0'
  prettyprinter: '>=1.7.0'
  prettyprinter-ansi-terminal: '>=1.1.2'
  text: '>=1.2'
  transformers: '>=0.4'
changelog: |2

  ## 4.1.2.0

  *   Fix a problem with the `pHPrint` function incorrectly
      outputting a trailing newline to stdout, instead of the
      handle you pass it.
      [#118](https://github.com/cdepillabout/pretty-simple/pull/118)
  *   Add a [web app](https://cdepillabout.github.io/pretty-simple/) where you
      can play around with `pretty-simple` in your browser.
      [#116](https://github.com/cdepillabout/pretty-simple/pull/116).
      This took a lot of hard work by [@georgefst](https://github.com/georgefst)!

  ## 4.1.1.0

  *   Make the pretty-printed output with `outputOptionsCompact` enabled a little
      more compact.
      [#110](https://github.com/cdepillabout/pretty-simple/pull/110).
      Thanks [@juhp](https://github.com/juhp)!
  *   Add a `--compact` / `-C` flag to the `pretty-simple` executable that enables
      `outputOptionsCompact`.
      [#111](https://github.com/cdepillabout/pretty-simple/pull/111).
      Thanks again @juhp!
  *   Add `pTraceWith` and `pTraceShowWith` to `Debug.Pretty.Simple`.
      [#104](https://github.com/cdepillabout/pretty-simple/pull/104).
      Thanks [@LeviButcher](https://github.com/LeviButcher)!

  ## 4.1.0.0

  *   Fix a regression which arose in 4.0, whereby excess spaces would be inserted for unusual strings like dates and IP addresses.
      [#105](https://github.com/cdepillabout/pretty-simple/pull/105)
  *   Attach warnings to debugging functions, so that they're easy to find and remove.
      [#103](https://github.com/cdepillabout/pretty-simple/pull/103)
  *   Some minor improvements to the CLI tool:
      *   Add a `--version`/`-v` flag.
          [#83](https://github.com/cdepillabout/pretty-simple/pull/83)
      *   Add a trailing newline.
          [#87](https://github.com/cdepillabout/pretty-simple/pull/87)
      *   Install by default, without requiring a flag.
          [#94](https://github.com/cdepillabout/pretty-simple/pull/94)

  ## 4.0.0.0

  *   Expand `OutputOptions`:
      *   Compactness, including grouping of parentheses.
          [#72](https://github.com/cdepillabout/pretty-simple/pull/72)
      *   Page width, affecting when lines are grouped if compact output is enabled.
          [#72](https://github.com/cdepillabout/pretty-simple/pull/72)
      *   Indent whole expression. Useful when using `pretty-simple` for one part
          of a larger output.
          [#71](https://github.com/cdepillabout/pretty-simple/pull/71)
      *   Use `Style` type for easier configuration of colour, boldness etc.
          [#73](https://github.com/cdepillabout/pretty-simple/pull/73)
  *   Significant internal rewrite of printing code, to make use of the [prettyprinter](https://hackage.haskell.org/package/prettyprinter)
      library. The internal function `layoutString` can be used to integrate with
      other `prettyprinter` backends, such as [prettyprinter-lucid](https://hackage.haskell.org/package/prettyprinter-lucid)
      for HTML output.
      [#67](https://github.com/cdepillabout/pretty-simple/pull/67)

  ## 3.3.0.0

  *   Add an output option to print escaped and non-printable characters
      literally when outputting strings.
      [#68](https://github.com/cdepillabout/pretty-simple/pull/68) and
      [#69](https://github.com/cdepillabout/pretty-simple/pull/69)
      Thanks Joe Hermaszewski ([@expipiplus1](https://github.com/expipiplus1))!

  ## 3.2.3.0

  *   Fix a bug that messes up printing identifiers with `'` in the name.
      Now identifiers like `data Don't = Don't` show up properly.
      [#65](https://github.com/cdepillabout/pretty-simple/pull/65)
      Thanks George Thomas ([@georgefst](https://github.com/georgefst))!

  ## 3.2.2.0

  *   Remove whitespace from the ends of lines.
      [#62](https://github.com/cdepillabout/pretty-simple/pull/62)
      Thanks Gaith Hallak ([@ghallak](https://github.com/ghallak))!

  ## 3.2.1.0

  *   Added `pTraceOpt` functions to `Debug.Pretty.Simple`.
      [#58](https://github.com/cdepillabout/pretty-simple/pull/58)
      Thanks again [sureyeaah](https://github.com/sureyeaah)!

  ## 3.2.0.0

  *   Add support for pretty-printing Haskell character literals.
      [#57](https://github.com/cdepillabout/pretty-simple/pull/57)
      Thanks again [sjakobi](https://github.com/sjakobi)!

  ## 3.1.1.0

  *   Added a `pPrintString` function for pretty-printing a `String` that is the
      output of `show`.  Implemented in
      [#54](https://github.com/cdepillabout/pretty-simple/pull/54). Thanks
      [sureyeaah](https://github.com/sureyeaah)!
  *   Fix build on GHC-7.10.3.
      [#55](https://github.com/cdepillabout/pretty-simple/pull/55).  Thanks
      [sjakobi](https://github.com/sjakobi).

  ## 3.1.0.0

  *   Numbers are now highlighted in green by default.  Implemented in
      [#51](https://github.com/cdepillabout/pretty-simple/pull/51).
      Thanks [lawrencebell](https://github.com/lawrencebell)!

  ## 3.0.0.0

  *   pretty-simple now escapes non-printable characters by default.  A field
      called `outputOptionsEscapeNonPrintable` has been added to `OutputOptions`
      to control this behavior.  Implemented in
      [#44](https://github.com/cdepillabout/pretty-simple/pull/44). Thanks
      [dminuoso](https://github.com/dminuoso)!
  *   pretty-simple now checks the output `Handle` to determine whether to print
      in color when using functions like `pPrint`.  This makes it so that you
      can redirect output to a file on disk and still be able to read the
      output from `pPrint`!  Implemented in
      [#47](https://github.com/cdepillabout/pretty-simple/pull/47).  Thanks
      [metiulekm](https://github.com/metiulekm)!
  *   Add functions like `pHPrint` for specifying the `Handle` to output to.
      Added in [#47](https://github.com/cdepillabout/pretty-simple/pull/47).

  ## 2.2.0.1
  *   Fixed a [bug](https://github.com/cdepillabout/pretty-simple/pull/41) where
      the parser failed to parse escaped quotation marks in string literals.
      Thanks [Andreas](https://github.com/anka-213)!


  ## 2.2.0.0

  *   Fixed a [bug](https://github.com/cdepillabout/pretty-simple/pull/33) with a
      missing space after strings.  Thanks again
      [Andrew](https://github.com/andrew-lei)!
  *   Add a command line flag `--color` to be able to set whether to use colors for
      a dark background (`--color dark-bg`), a light background (`--color light-bg`),
      or no color (`--color no-color`).  This is from
      [great work](https://github.com/cdepillabout/pretty-simple/pull/35) by
      [Andrew](https://github.com/andrew-lei)!
  *   Made parsing/printing lazy - pretty-printing will now output strings continuously
      as they're read, handling potentially infinite input.

  ## 2.1.0.1

  *   Fix a [bug](https://github.com/cdepillabout/pretty-simple/pull/32) where
      printing deeply nested data structures would take exponential time.  Thanks
      [Andrew](https://github.com/andrew-lei)!

  ## 2.1.0.0

  *   Make strings have indentation by default when pretty-printed.  See
      [#26](https://github.com/cdepillabout/pretty-simple/pull/26).  Thanks
      [Milan](https://github.com/Wizek)!

  ## 2.0.2.1

  *   Add a small command-line program that will pretty print anything from stdin
      called `pretty-print`.  It can be installed to `~/.local/bin` if you enable
      the flag `buildexe` like so:

      ```sh
      $ stack install pretty-simple-2.0.2.1 --flag pretty-simple:buildexe
      ```

      When you run it, you can paste something you want formatted on stdin, then
      press <key>Ctrl</key>-<key>D</key>.  It will print the formatted version on
      stdout:

      ```sh
      $ pretty-simple
      [(Just 3, Just 4)]

      ^D

      [
          ( Just 3
          , Just 4
          )
      ]
      ```

  ## 2.0.2.0

  *   Fix a [problem](https://github.com/cdepillabout/pretty-simple/pull/20) with
      the pTraceShow functions not working correctly.

  ## 2.0.1.0

  *   Added the `Debug.Pretty.Simple` that exports functions that work like
      `Debug.Trace`.
changelog-type: markdown
description: |2

  Text.Pretty.Simple
  ==================

  [![Build Status](https://github.com/cdepillabout/pretty-simple/workflows/CI/badge.svg)](https://github.com/cdepillabout/pretty-simple/actions)
  [![Hackage](https://img.shields.io/hackage/v/pretty-simple.svg)](https://hackage.haskell.org/package/pretty-simple)
  [![Stackage LTS](http://stackage.org/package/pretty-simple/badge/lts)](http://stackage.org/lts/package/pretty-simple)
  [![Stackage Nightly](http://stackage.org/package/pretty-simple/badge/nightly)](http://stackage.org/nightly/package/pretty-simple)
  ![BSD3 license](https://img.shields.io/badge/license-BSD3-blue.svg)

  `pretty-simple` is a pretty printer for Haskell data types that have a `Show`
  instance.

  For example, imagine the following Haskell data types and values:

  ```haskell
  data Foo = Foo { foo1 :: Integer , foo2 :: [String] } deriving Show

  foo :: Foo
  foo = Foo 3 ["hello", "goodbye"]

  data Bar = Bar { bar1 :: Double , bar2 :: [Foo] } deriving Show

  bar :: Bar
  bar = Bar 10.55 [foo, foo]
  ```

  If you run this in `ghci` and type `print bar`, you'll get output like this:

  ```haskell
  > print bar
  Bar {bar1 = 10.55, bar2 = [Foo {foo1 = 3, foo2 = ["hello","goodbye"]},Foo {foo1 = 3, foo2 = ["hello","goodbye"]}]}
  ```

  This is pretty hard to read.  Imagine if there were more fields or it were even
  more deeply nested.  It would be even more difficult to read.

  `pretty-simple` can be used to print `bar` in an easy-to-read format:

  ![example screenshot](https://raw.githubusercontent.com/cdepillabout/pretty-simple/master/img/pretty-simple-example-screenshot.png)

  There's a [web app](https://cdepillabout.github.io/pretty-simple) compiled with
  GHCJS where you can play around with `pretty-simple` running in your browser.

  ## Usage

  `pretty-simple` can be easily used from `ghci` when debugging.

  When using `stack` to run `ghci`, just append the `--package` flag to
  the command line to load `pretty-simple`:

  ```sh
  $ stack ghci --package pretty-simple
  ```

  Or, with cabal:

  ```sh
  $ cabal repl --build-depends pretty-simple
  ```

  Once you get a prompt in `ghci`, you can use `import` to get `pretty-simple`'s
  [`pPrint`](https://hackage.haskell.org/package/pretty-simple/docs/Text-Pretty-Simple.html#v:pPrint)
  function in scope.

  ```haskell
  > import Text.Pretty.Simple (pPrint)
  ```

  You can test out `pPrint` with simple data types like `Maybe` or tuples.

  ```haskell
  > pPrint $ Just ("hello", "goodbye")
  Just
      ( "hello"
      , "goodbye"
      )
  ```

  ## Features

  - Easy-to-read
      - Complex data types are simple to understand.
  - Color
      - Prints in color using ANSI escape codes.
      - It is possible to print without color by using the
        [`pPrintNoColor`](https://hackage.haskell.org/package/pretty-simple/docs/Text-Pretty-Simple.html#v:pPrintNoColor)
        function.
  - Rainbow Parentheses
      - Easy to understand deeply nested data types.
  - Configurable
      - Indentation, compactness, colors and more are configurable with the
        [`pPrintOpt`](https://hackage.haskell.org/package/pretty-simple-1.0.0.6/docs/Text-Pretty-Simple.html#v:pPrintOpt)
        function.
  - Fast
      - No problem pretty-printing data types thousands of lines long.
  - Works with any data type with a `Show` instance
      - Some common Haskell data types have a `Show` instance that produces
        non-valid Haskell code.  `pretty-simple` will pretty-print even these
        data types.

  ## Why not `(some other package)`?

  Other pretty-printing packages have some combination of these defects:

  - No options for printing in color.
  - No options for changing the amount of indentation
  - Requires every data type to be an instance of some special typeclass (instead
    of just `Show`).
  - Requires all `Show` instances to output valid Haskell code.

  ## Other Uses

  ### Pretty-print all GHCi output

  The `pPrint` function can be used as the default output function in GHCi.

  All you need to do is run GHCi with a command like one of these:

  ```sh
  $ stack ghci --ghci-options "-interactive-print=Text.Pretty.Simple.pPrint" --package pretty-simple
  ```
  ```sh
  $ cabal repl --repl-options "-interactive-print=Text.Pretty.Simple.pPrint" --build-depends pretty-simple
  ```

  Now, whenever you make GHCi evaluate an expression, GHCi will pretty-print the
  result using `pPrint`!  See
  [here](https://downloads.haskell.org/%7Eghc/latest/docs/html/users_guide/ghci.html#using-a-custom-interactive-printing-function)
  for more info on this neat feature in GHCi.

  ### Pretty-printing JSON

  `pretty-simple` can be used to pretty-print any `String` that is similar to
  Haskell data types.  The only requirement is that the `String` must correctly
  use brackets, parenthese, and braces to indicate nesting.

  For example, the
  [`pString`](https://hackage.haskell.org/package/pretty-simple/docs/Text-Pretty-Simple.html#v:pString)
  function can be used to pretty-print JSON.

  Recall our example from before.

  ```haskell
  data Foo = Foo { foo1 :: Integer , foo2 :: [String] } deriving Show

  foo :: Foo
  foo = Foo 3 ["hello", "goodbye"]

  data Bar = Bar { bar1 :: Double , bar2 :: [Foo] } deriving Show

  bar :: Bar
  bar = Bar 10.55 [foo, foo]
  ```

  You can use [`aeson`](https://hackage.haskell.org/package/aeson) to turn these
  data types into JSON.  First, you must derive
  [`ToJSON`](https://hackage.haskell.org/package/aeson/docs/Data-Aeson.html#t:ToJSON)
  instances for the data types.  It is easiest to do this with Template Haskell:

  ```haskell
  {-# LANGUAGE TemplateHaskell #-}

  $(deriveJSON defaultOptions ''Foo)
  $(deriveJSON defaultOptions ''Bar)
  ```

  If you run this in `ghci` and type `encode bar`, you'll get output like this:

  ```haskell
  > import Data.Aeson (encode)
  > putLazyByteStringLn $ encode bar
  {"bar1":10.55,"bar2":[{"foo1":3,"foo2":["hello","goodbye"]},{"foo1":3,"foo2":["hello","goodbye"]}]}
  ```

  Just like Haskell's normal `print` output, this is pretty hard to read.

  `pretty-simple` can be used to pretty-print the JSON-encoded `bar` in an
  easy-to-read format:

  ![json example screenshot](https://raw.githubusercontent.com/cdepillabout/pretty-simple/master/img/pretty-simple-json-example-screenshot.png)

  (You can find the `lazyByteStringToString`, `putLazyByteStringLn`,
  and `putLazyTextLn` in the [`ExampleJSON.hs`](example/ExampleJSON.hs)
  file.)

  ### Pretty-printing from the command line

  `pretty-simple` includes a command line executable that can be used to
  pretty-print anything passed in on stdin.

  It can be installed to `~/.local/bin/` with the following command.

  ```sh
  $ stack install pretty-simple
  ```

  When run on the command line, you can paste in the Haskell datatype you want to
  be formatted, then hit <kbd>Ctrl</kbd>-<kbd>D</kbd>:

  ![cli example screenshot](https://raw.githubusercontent.com/cdepillabout/pretty-simple/master/img/pretty-simple-cli-screenshot.png)

  This is very useful if you accidentally print out a Haskell data type with
  `print` instead of `pPrint`.

  ## Contributions

  Feel free to open an
  [issue](https://github.com/cdepillabout/pretty-simple/issues) or
  [PR](https://github.com/cdepillabout/pretty-simple/pulls) for any
  bugs/problems/suggestions/improvements.

  ## Maintainers

  - [@cdepillabout](https://github.com/cdepillabout)
  - [@georgefst](https://github.com/georgefst)
description-type: markdown
hash: 1c0a96e4205010d704c52883c53c98258c588ce7196763b408949d9db712ba14
homepage: https://github.com/cdepillabout/pretty-simple
latest: 4.1.2.0
license-name: BSD-3-Clause
maintainer: cdep.illabout@gmail.com
synopsis: pretty printer for data types with a 'Show' instance.
test-bench-deps:
  Glob: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  criterion: '>=0'
  doctest: '>=0.13'
  pretty-simple: '>=0'
  template-haskell: '>=0'
  text: '>=0'
