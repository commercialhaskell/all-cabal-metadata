homepage: https://github.com/choener/PrimitiveArray
changelog-type: markdown
hash: 0ac720b12a4b67a9f24778a64baad671c70f6bd3851a30739eac2ebf90b035b8
test-bench-deps:
  cereal: '>=0.4'
  bits: '>=0.4'
  tasty-smallcheck: '>=0.8'
  tasty-th: '>=0.1'
  base: '>=4.7 && <5.0'
  unordered-containers: '>=0.2'
  text: '>=1.0'
  PrimitiveArray: -any
  criterion: ^>=1.5
  smallcheck: '>=1.1'
  log-domain: '>=0.10'
  containers: -any
  vector-binary-instances: '>=0.2'
  lens: '>=4.0'
  binary: '>=0.7'
  hashtables: '>=1.2'
  tasty-quickcheck: '>=0.8'
  mtl: '>=2.0'
  hashable: '>=1.2'
  vector-algorithms: '>=0.8'
  cereal-vector: '>=0.2'
  DPutils: ==0.1.1.*
  tasty: '>=0.11'
  OrderedBits: ==0.0.2.*
  deepseq: '>=1.3'
  vector-th-unbox: '>=0.2'
  QuickCheck: '>=2.7'
  aeson: '>=0.8'
  primitive: '>=0.5.4'
  vector: '>=0.11'
maintainer: choener@bioinf.uni-leipzig.de
synopsis: Efficient multidimensional arrays
changelog: |
  0.11.1.1

  - version bump on DPutils

  0.10.1.0
  --------

  - introduction of @Data.PrimitiveArray.Sparse@ which uses different sparsification options. The
    default is @D.P.S.Search@ based on binary search.
  - All array operations, pure or mutable are now based on a single, unified class. Mostly because
    mutable operations go via a data family anyway.

  0.10.0.0
  --------

  - Rewrote Data.PrimitiveArray.Dense to accept all vector types using one
    interface. This is a breaking change, since @Unboxed@ becomes @Dense
    Data.Vector.Unboxed.Vector@, but now @Dense v@ accepts any @v@ as underlying
    storage vector. Breaking occurs only at user sites where the actual vector
    type needs to be specified. This tends to be very localized.

  0.9.1.1
  -------

  - OrderedBits version bump

  0.9.1.0
  -------

  - Arbitrary instance(s), field lenses that are probably not a good idea (don't use them!)

  0.9.0.0
  -------

  - large-scale changes
  - associated data families for bounds

  0.8.1.0
  -------

  - inclusion of Upperlimit data family to simplify declaration of upper limits

  0.8.0.1
  -------

  - PointL delays inlining to phase 0 for table filling. This is part of the
    close-to-C optimization effort for linear languages.
  - disabling smallcheck until I fix how things are generated

  0.8.0.0
  -------

  - renamed Interface (Iter) to Boundary (Boundary)
  - Typeable instances for Dense primitive arrays
  - EdgeBoundary index structure
  - changes and fixes to quickcheck/smallcheck
  - added ScoreMatrix module with simple score and distance matrix structure
    (requires log-domain)

  0.7.2.0
  -------

  - JSONKey (To/From) for index types.

  0.7.1.0
  -------

  - minor updates to dependencies
  - tasty framework
  - Subword/upper triangular indexing provided by DPutils

  0.7.0.1
  -------

  - Data.PrimitiveArray.Checked to capture index out-of-bounds problems

  0.7.0.0
  -------

  - vector <= 0.11 support; including compatibility layer
  - redesigned Index structures (for dealing with Inside/Outside/Complement)

  0.6.1.1
  -------

  - Hashable instances for all index structures
  - Hashable instances for Unboxed and Boxed arrays. *These require Hashable
    instances for vectors, which are not available by default*

  0.6.1.0
  -------

  - OrderedBits < 0.0.1
  - travis.yml update

  0.6.0.0
  -------

  - moved primitive array classes to Data.PrimitiveArray.Class
  - added from / to lenses
  - Field1 .. Field6 lenses for indices (Z:.a:.b...) (with Z being Field0)
    - lens stuff currently commented out; aiming to have an extra package [lens
      is fairly heavy]
  - FillTables should work now (with PointL, Subword)
  - freezing of whole stacks of (Z:.mutarr:.mutarr:. ...) tables
  - explicit 'Shape Subword'; this allows for simpler code in a number of places
    and is especially useful for CYK-style algorithms that have a
    single-dimensional upper-triangular matrix.
  - rangeStream of Extshape is new and used by the FillTables module
  - Binary, Cereal, Aeson instances for indices and immutable tables
  - orphan instances of Binary, Cereal, Aeson for Z, and (:.)
  - topmostIndex returns the final index position for CYK-style (bottom to top)
    parsing
  - removed Data.Array.Repa.Index.Point (we have PointL, PointR in Points.hs)
  - added   Data.Array.Repa.Index.Set (for sets with an interface, used by
    Hamiltonian path problems)
  - Data.Array.Repa.Index.Outside is now just a newtype wrapped around other
    Index types. We want to be able to say "a Subword, but for Outside
    algorithms"
  - travis-ci integration

  0.5.4.0
  -------

  - actually implemented PointR

  - added the rather important strictness annotation for mutable arrays in .Zero

  0.5.3.0
  -------

  - fixed vector-th-unbox problem
basic-deps:
  cereal: '>=0.4'
  bits: '>=0.4'
  base: '>=4.7 && <5.0'
  unordered-containers: '>=0.2'
  text: '>=1.0'
  smallcheck: '>=1.1'
  log-domain: '>=0.10'
  containers: -any
  vector-binary-instances: '>=0.2'
  lens: '>=4.0'
  binary: '>=0.7'
  hashtables: '>=1.2'
  mtl: '>=2.0'
  hashable: '>=1.2'
  vector-algorithms: '>=0.8'
  cereal-vector: '>=0.2'
  DPutils: ==0.1.1.*
  OrderedBits: ==0.0.2.*
  deepseq: '>=1.3'
  vector-th-unbox: '>=0.2'
  QuickCheck: '>=2.7'
  aeson: '>=0.8'
  primitive: '>=0.5.4'
  vector: '>=0.11'
all-versions:
- 0.0.2.1
- 0.0.2.2
- 0.0.3.0
- 0.0.3.1
- 0.0.4.0
- 0.1.1.2
- 0.2.0.0
- 0.2.1.0
- 0.2.1.1
- 0.2.2.0
- 0.3.0.0
- 0.4.0.0
- 0.4.0.1
- 0.5.0.0
- 0.5.2.0
- 0.5.3.0
- 0.5.4.0
- 0.6.0.0
- 0.6.1.0
- 0.7.0.0
- 0.7.0.1
- 0.7.1.0
- 0.8.0.0
- 0.8.0.1
- 0.9.0.0
- 0.9.1.0
- 0.9.1.1
- 0.10.0.0
- 0.10.1.0
- 0.10.1.1
author: Christian Hoener zu Siederdissen, 2011-2021
latest: 0.10.1.1
description-type: markdown
description: "![github action: CI](https://github.com/choener/PrimitiveArray/actions/workflows/ci.yml/badge.svg)\n![github
  action: hackage](https://github.com/choener/PrimitiveArray/actions/workflows/hackage.yml/badge.svg)\n\n#
  PrimitiveArray\n\n[*generalized Algebraic Dynamic Programming Homepage*](http://www.bioinf.uni-leipzig.de/Software/gADP/)\n\nPrimitiveArray
  provides operations on multi-dimensional arrays. Internally, the\nrepresentation
  is based on the vector library, while the multi-dimensional\nindexing follows repa.\n\nPrimitive
  arrays are designed to be used together with ADPfusion.\n\n\n\n#### Contact\n\nChristian
  Hoener zu Siederdissen  \nLeipzig University, Leipzig, Germany  \nchoener@bioinf.uni-leipzig.de
  \ \nhttp://www.bioinf.uni-leipzig.de/~choener/  \n\n"
license-name: BSD-3-Clause
