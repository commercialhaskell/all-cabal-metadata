all-versions:
- '0.1'
- '0.2'
- '0.3'
- 0.4.1
- 0.5.0
- 0.5.3
author: Yoshikuni Jujo <PAF01143@nifty.ne.jp>
basic-deps:
  base: '>3 && <5'
  monads-tf: '>=0'
changelog: ''
changelog-type: ''
description: "prototype-based programming on Haskell\n\nYou can download source codes
  by git.\n\ngit clone git:\\/\\/github.com\\/YoshikuniJujo\\/prototype.git prototype\n\nExample
  code\n\n> module Main where\n>\n> import Control.Prototype\n>\n> main :: IO ()\n>
  main = flip evalProt initProtEnv $ do\n>\t( dog, setName, sit ) <- package \"dog\"
  $ do\n>\t\tdog <- clone object\n>\t\tname\t<- makeMember \"name\"\n>\t\tsetName\t<-
  makeMember \"setName\"\n>\t\tsit\t<- makeMember \"sit\"\n>\t\tsetMethod dog setName
  $ \\this [ n ] -> do\n>\t\t\tsetMember this name n\n>\t\t\treturn [ ]\n>\t\tsetMethod
  dog sit $ \\this _ -> do\n>\t\t\tn <- member this name\n>\t\t\tliftProt $ putStrLn
  $ fromPrimStr n ++ \" sitting.\"\n>\t\t\treturn [ ]\n>\t\treturn ( dog, setName,
  sit )\n>\tmyDog <- clone dog\n>\tmethod myDog setName [ primStr \"John\" ]\n>\tmethod
  myDog sit [ ]\n>\treturn ()\n\nAnother sample\n\n> module Main where\n>\n> import
  MyToolkit\n>\n> main :: IO ()\n> main = runToolKit $ do\n>\t( textView, setText,
  setContentView ) <- importMyToolkit\n>\tmyTV <- clone textView\n>\tmethod myTV setText
  [ primStr \"Hello, world!\" ]\n>\tmethod myTV setContentView [ ]\n>\treturn ()"
description-type: haddock
hash: 1fe6d0a6c8feef57f38c1c431ac0a0ecc2dc4e90dd9b55897c05c686256b9b47
homepage: ''
latest: 0.5.3
license-name: BSD-3-Clause
maintainer: Yoshikuni Jujo <PAF01143@nifty.ne.jp>
synopsis: prototype-based programming on Haskell
test-bench-deps: {}
