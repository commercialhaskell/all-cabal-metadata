homepage: https://github.com/sergv/prettyprinter-combinators
changelog-type: markdown
hash: 5b725a01c109472acabe8623159805db502a3248770848373706d311406feb50
test-bench-deps: {}
maintainer: Sergey Vinokurov <serg.foo@gmail.com>
synopsis: Some useful combinators for the prettyprinter package
changelog: |
  # 0.1.2

  - Fix build with GHC 9.8
  - Add `PPGeneric` newtype to apply `ppGeneric` through `DerivingVia`
  - Add `PPShow` newtype to apply `ppShow` through `DerivingVia`

  # 0.1.1.1
  - `ppVector` and `ppVectorWith` now accept generic vectors
  - Add lower bound `pretty-show >= 1.6`
basic-deps:
  bimap: -any
  bytestring: -any
  base: '>=4.16 && <5'
  unordered-containers: -any
  text: -any
  syb: -any
  dlist: -any
  containers: -any
  pretty-show: '>=1.6'
  prettyprinter: '>=1.7'
  template-haskell: '>=2.18'
  vector: -any
all-versions:
- '0.1'
- 0.1.0.1
- 0.1.1
- 0.1.1.1
- 0.1.2
author: Sergey Vinokurov
latest: 0.1.2
description-type: markdown
description: |
  [![build](https://github.com/sergv/prettyprinter-combinators/actions/workflows/haskell-ci.yaml/badge.svg)](https://github.com/sergv/prettyprinter-combinators/actions/workflows/haskell-ci.yaml)

  This is a set of utilities for the Haskell `prettyrinter` package.
  Most notable is automatic deriving of `Pretty` instance from the
  `Generic` instance, e.g.

  ```haskell
  {-# LANGUAGE DeriveGeneric #-}

  import Prettyprinter.Generics

  data Foo a b = Bar Int | Baz a b
    deriving (Generic)

  instance (Pretty a, Pretty b) => Pretty (Foo a b) where
    pretty = ppGeneric

  printed :: Doc ann
  printed = pretty $ Baz (Bar 10 :: Foo () ()) [1..22]
  ```

  which would put following into `printed`:

  ```
  Baz
    Bar 10
    [ 1
    , 2
    , 3
    , 4
    , 5
    , 6
    , 7
    , 8
    , 9
    , 10
    , 11
    , 12
    , 13
    , 14
    , 15
    , 16
    , 17
    , 18
    , 19
    , 20
    , 21
    , 22 ]
  ```
license-name: Apache-2.0
