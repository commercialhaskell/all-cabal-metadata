all-versions:
- 0.1.0.1
- 0.2.0
- 0.2.0.1
author: George Thomas
basic-deps:
  base: ^>=4.12 || ^>=4.13 || ^>=4.14 || ^>=4.15 || ^>=4.16 || ^>=4.17 || ^>=4.18
    || ^>=4.19 || ^>=4.20
  lucid: ^>=2.9.12 || ^>=2.10 || ^>=2.11
  prettyprinter: ^>=1.7.0
  text: ^>=1.2.3 || ^>=2.0 || ^>=2.1
changelog: |
  # 0.2.0

  - Remove margins in generated HTML.
changelog-type: markdown
description: |
  # Pretty HTML

  This is just a tiny library enabling [lucid](https://hackage.haskell.org/package/lucid) to be used as a backend for [prettyprinter](https://hackage.haskell.org/package/prettyprinter). This makes it easy to programmatically generate HTML documents with complex nested styling.

  # Example

  This code, adapted from `prettyprinter`'s main example, produces the following:

  ![png](./doc/example.png)

  ```hs
  {- cabal:
  build-depends: base, text, lucid, prettyprinter, prettyprinter-lucid
  -}
  {-# LANGUAGE GHC2021 #-}
  {-# LANGUAGE OverloadedStrings #-}
  {-# OPTIONS_GHC -Wall #-}

  module Main (main) where

  import Data.Text (Text)
  import Lucid
  import Lucid.Base
  import Prettyprinter
  import Prettyprinter.Lucid
  import Prettyprinter.Render.Util.SimpleDocTree (treeForm)

  main :: IO ()
  main = renderToFile "example.html" $ render 20 doc

  render :: Int -> Doc (Html () -> Html ()) -> Html ()
  render width' =
      div_ [style "background-color: #1F1F1F; padding: 0.2rem; padding-left: 0.4rem"]
          . renderHtml
          . treeForm
          . layoutPretty
              defaultLayoutOptions{layoutPageWidth = AvailablePerLine width' 1}

  doc :: Doc (Html () -> Html ())
  doc =
      annotate (span_ [style "font-weight: bold"]) $
          prettyprintDeclaration
              "example"
              ["Int", "Bool", "Char", "IO ()"]
    where
      prettyprintDeclaration n tys =
          colour "#DCDCAA" (pretty @Text n) <+> prettyprintType tys
      prettyprintType =
          align
              . sep
              . zipWith (<+>) (map (colour "#CC524B") $ "::" : repeat "->")
              . map (colour "569CD6")
      colour c =
          annotate (span_ [style $ "color: " <> c])

  style :: Text -> Attribute
  style = makeAttribute "style"
  ```
description-type: markdown
hash: e0ef87f9239649a492dc8e6aac013d35ebab7287261f1a2f96914195e3dce83e
homepage: https://github.com/georgefst/prettyprinter-lucid
latest: 0.2.0.1
license-name: BSD-3-Clause
maintainer: georgefsthomas@gmail.com
synopsis: A prettyprinter backend for lucid
test-bench-deps: {}
