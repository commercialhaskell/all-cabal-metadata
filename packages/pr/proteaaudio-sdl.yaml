homepage: ''
changelog-type: markdown
hash: c932e4e88feece81a3e821a2257ece68e73101dc26606580f40cbb42a37cd99d
test-bench-deps: {}
maintainer: csaba.hruska@gmail.com
synopsis: Simple audio library for SDL.
changelog: |
  # 0.9.1
  - fix Cabal C/C++ compiler flag handling bug, now should compile with GHC 8.10 and above also.

  # 0.9.0
  - initial release; keeping on par API-wise with package proteaaudio
basic-deps:
  bytestring: ==0.10.*
  base: ==4.*
  proteaaudio-sdl: -any
  filepath: '>=1.4 && <2'
all-versions:
- 0.9.0
- 0.9.1
author: Csaba Hruska, Michael Karg
latest: 0.9.1
description-type: markdown
description: |
  # Overview

  ProteaAudio-SDL is a stereo audio mixer/playback library for SDL *(platform independent)*.

  Supported audio formats:
  - Wav
  - Ogg
  - Raw linear PCM

  Samples can be loaded from file or memory.

  # Setup

  On Linux you need to install the SDL2 library:
  ```
  sudo apt install libsdl2-dev
  ```

  # Build

  ### Stack

  ```bash
  stack setup
  stack build
  ```

  ### Nix:

  ``` bash
  stack --nix build
  ```

  # Example

  ```haskell
  import Control.Monad
  import System.Environment
  import System.FilePath
  import qualified Data.ByteString as SB
  import Control.Concurrent

  import Sound.ProteaAudio.SDL

  waitPlayback = do
    n <- soundActiveAll
    when  (n > 0) $ do
      threadDelay oneSec
      waitPlayback

  oneSec :: Int
  oneSec = 1000000 -- micro seconds

  main = do
    args <- getArgs
    filename <- case args of
      a : _ -> pure a
      _ -> fail "usage: proteaaudio-play SAMPLE_FILE_NAME"

    result <- initAudio 64 44100 1024 -- max channels, mixing frequency, mixing buffer size
    unless result $ fail "failed to initialize the audio system"

    -- (A) load sample from file
    sampleA <- sampleFromFile filename 1.0 -- volume

    -- start two sound tracks with shared sample data
    sndTrkA <- soundPlay sampleA 1 1 0 1 -- left volume, right volume, time difference between left and right, pitch factor for playback
    threadDelay oneSec -- wait 1 sec
    sndTrkB <- soundPlay sampleA 1 1 0 1 -- left volume, right volume, time difference between left and right, pitch factor for playback
    soundActive sndTrkB >>= print
    -- play 3 sec
    threadDelay $ 3 * oneSec
    soundStop sndTrkB
    soundActive sndTrkB >>= print
    -- wait sndTrkA to finish
    waitPlayback

    -- (B) load from memory buffer
    buffer <- SB.readFile filename
    sampleB <- case takeExtension filename of
      ".ogg" -> sampleFromMemoryOgg buffer 1.0
      ".wav" -> sampleFromMemoryWav buffer 1.0

    soundPlay sampleB 1 1 0 1 -- left volume, right volume, time difference between left and right, pitch factor for playback
    waitPlayback

    sampleDestroy sampleB
    soundPlay sampleB 1 1 0 1 -- we have invalidated the handle; nothing should happen now
    waitPlayback

    finishAudio
  ```
license-name: BSD-3-Clause
