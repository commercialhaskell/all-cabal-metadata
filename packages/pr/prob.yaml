homepage: https://github.com/cdsmith/prob
changelog-type: markdown
hash: 5a632273ea5dbb7feac03788f2ad52588cca7a1b18e33bfc89a63354ab297dc4
test-bench-deps:
  prob: -any
  base: '>=4.12 && <5'
  hspec: -any
maintainer: Chris Smith <cdsmith@gmail.com>
synopsis: Discrete probability monad
changelog: |
  # Revision history for dice-simulator

  ## 0.1.1 -- 2022-12-18

  * Added `finitizeMaybe`.

  ## 0.1.0.0 -- 2022-03-22

  * First version. Released on an unsuspecting world.
basic-deps:
  base: '>=4.12 && <5'
  containers: -any
  random: -any
all-versions:
- 0.1.0.0
- 0.1.1
author: Chris Smith and Shae Erisson
latest: 0.1.1
description-type: markdown
description: "# prob\n\n[![CI](https://github.com/cdsmith/prob/actions/workflows/ci.yml/badge.svg)](https://github.com/cdsmith/prob/actions/workflows/ci.yml)\n\nA
  monad for discrete probability distributions in Haskell.  The type\n`Distribution
  prob a` represents a probability distribution over values of `a`,\nwith probability
  represented by the type `prob`.  The meaning is very similar to\nhttps://hackage.haskell.org/package/probability.
  However, this implementation is\ncarefully designed to work with potentially infinite
  distributions and recursive\ndo blocks, which do not always work correctly there.\n\nFor
  example, the following definition:\n\n``` haskell\nrerollOnes = do\n  x <- uniform
  [1 .. 6]\n  if x == 1\n    then rerollOnes\n    else return x\n```\n\nis a perfectly
  good description of a stochastic process that rolls a die, but\nrerolls the die
  indefinitely if it lands on a 1.  The distribution monad from\nthe `probability`
  package hangs when asked to describe this distribution:\n\n```\nghci> rerollOnes\nfromFreqs
  ^CInterrupted.\nghci> \n```\n\nThis library, by contrast, gives a productive answer.
  \ Note, however, that it is\nan infinite answer:\n\n```\nghci> possibilities rerollOnes\n[(0.16666666666666666,2),
  (2.7777777777777776e-2,2), (0.16666666666666666,3),\n(4.629629629629629e-3,2), (2.7777777777777776e-2,3),
  (0.16666666666666663,4),\n(7.716049382716048e-4,2), (4.6296296296296285e-3,3), (2.7777777777777776e-2,4),\n(0.1666666666666666,5),
  (0.16666666666666677,6), (1.2860082304526747e-4,2),\n(7.716049382716048e-4,3), (4.6296296296296285e-3,4)
  ,(2.777777777777777e-2,5),\n(2.7777777777777797e-2,6), (2.143347050754458e-5,2),
  (1.2860082304526747e-4,3),\n(7.716049382716047e-4,4), (4.6296296296296285e-3,5),
  (4.629629629629632e-3,6),\n(3.572245084590763e-6,2), (2.143347050754458e-5,3), (1.2860082304526747e-4,4),\n^CInterrupted.\nghci>
  \n```\n\nLeft to run long enough, the program will continue to emit possibilities,
  with\nthe sums converging toward the expected result of a 0.2 probability of rolling\neach
  number from 2 through 6.  You can also use `finitize` to approximate the\nresult:\n\n```\nghci>
  possibilities $ simplify (finitize 0.00001 d)\n[(0.19999998015419398,2), (0.19999988092516383,3),
  (0.19999928555098298,4),\n(0.19999571330589844,5),(0.20000514006376077,6)]\nghci>
  \n```\n\nInternally, a value of type `Distribution prob a` is represented not as
  a list\nof possibilities but as a binary decision tree.  This is a rich enough structure\nto
  allow productive enumeration of all possibilities using a breadth-first\ntraversal,
  even if the process described is infinite and left recursive.\n"
license-name: BSD-3-Clause
