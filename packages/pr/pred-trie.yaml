all-versions:
- 0.5.0
- 0.5.1
- 0.5.1.1
- 0.5.1.2
- 0.6.0
- 0.6.0.1
- 0.6.1
author: Athan Clark
basic-deps:
  QuickCheck: '>=2.9.2'
  base: '>=4.11 && <5.0'
  containers: '>=0'
  deepseq: '>=0'
  hashable: '>=0'
  hashtables: '>=0'
  mtl: '>=0'
  poly-arity: '>=0.0.7'
  pred-set: '>=0'
  semigroups: '>=0'
  strict: '>=0'
  tries: '>=0.0.6'
  unordered-containers: '>=0'
changelog: ''
changelog-type: ''
description: |
  pred-trie
  =========

  A predicative trie library - use predicates instead of literal match to capture
  classes of results, instead of enumerating distinguished ones.

  ## Usage

  The predicates are existentially quantified such that a predicate _creates_ an
  unknown type, while it's result must have the _necessary arity_, matching the
  quantified type, to fulfill the lookup:

  ```haskell
  PredTrie s a
    = PNil
    | forall t. PCons
        { predicate :: s -> Maybe t
        , result    :: t -> a
        }
  ```

  ...basically.

  I broke the lookup phases into "steps", like the [tries](https://github.com/athanclark/tries)
  package, and used the fastest-lookup `HashMapStep` trie implementation for the
  literal lookups. For more info, read the code :D

  ## How to run tests

  ```bash
  stack test
  ```

  ## Benchmarking

  ```bash
  stack bench --benchmark-arguments="--output profile.html"
  ```
description-type: markdown
hash: 0676410199bcd5f9a55ee95ca325510254ac962e4c5a80682a7ff6a6f62a7647
homepage: https://github.com/athanclark/pred-trie#readme
latest: 0.6.1
license-name: BSD-3-Clause
maintainer: athan.clark@localcooking.com
synopsis: Predicative tries
test-bench-deps:
  QuickCheck: '>=2.9.2'
  attoparsec: '>=0'
  base: '>=0'
  containers: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  errors: '>=0'
  hashable: '>=0'
  hashtables: '>=0'
  mtl: '>=0'
  poly-arity: '>=0.0.7'
  pred-set: '>=0'
  pred-trie: '>=0'
  semigroups: '>=0'
  sets: '>=0'
  strict: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  text: '>=0'
  tries: '>=0.0.6'
  unordered-containers: '>=0'
