homepage: https://hackage.haskell.org/package/provenience
changelog-type: ''
hash: ff7628df10de250b2f63bf547bfc118ce3b4997d2dfdee93ab349331c5a14e53
test-bench-deps: {}
maintainer: olaf.klinke@phymetric.de
synopsis: Computations that automatically track data dependencies
changelog: ''
basic-deps:
  base: '>=4.7 && <5'
  time: '>=1.5.0.1 && <2.0'
  blaze-markup: '>=0.7.1.1 && <0.8.3'
  text: '>=1.2.2.2 && <1.3'
  doctemplates: -any
  data-default: '>=0.5.3 && <0.8'
  containers: '>=0.5.6.2 && <0.7'
  provenience: -any
  pandoc: '>=1.16 && <3.0'
  fgl: '>=5.5.3.1 && <5.8'
  mtl: '>=2.2.1 && <=2.2.2'
  aeson: '>=0.11.3.0 && <1.6'
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
author: Olaf Klinke olf@aatal-apotheke.de
latest: 0.1.2.3
description-type: markdown
description: "Motivation\n==========\n\nHaskell is a great language for data processing.
  \nYou load some data in the IO monad, parse it, \nfunnel the data through various
  functions and \nwrite the result back to disk or display it \nvia a web server.
  \n\nThe programmer has the `let` and `where` patterns at hand \nwhich can be used
  to sub-structure a single function, e.g.\n\n    workflow x y = let\n       a = f
  x\n       b = g a y\n       in h a b\n\nTo the environment program, however, \nthe
  values of the intermediate steps `a` and `b` \nare invisible and the reader does
  not know you used \nthe auxiliary functions `f`, `g` and `h`, \nalthough they might
  be important \nwhen an outsider tries to check the correctness of \nthe result of
  the `workflow` function. \nThis is where the Provenience monad comes in. \n\nHow
  it works\n============\n\nThe Provenience monad is an ordinary state monad transformer.
  \nThe state is a data flow \n[graph](https://hackage.haskell.org/package/fgl \"fgl\"),
  \nwhich we call the *variable store*. Nodes are \n[Pandoc](https://hackage.haskell.org/package/pandoc
  \"pandoc\") renderings \nof so-called *variables*. A variable is simply a pair of
  an ordinary \nHaskell value together with its node in the graph. \nA computation
  in the Provenience monad performs any number \nof the following five actions. \n\n*
  Register a new variable in the variable store \n* Provide a description of a registered
  variable \n(in form of a Pandoc [Block](http://hackage.haskell.org/package/pandoc-types/docs/Text-Pandoc-Definition.html#t:Block
  \"Block\"))\n* Provide a short name for a registered variable (used in hyperlinks)\n*
  Render the value of a registered variable into \nits node in the variable store
  (as a Pandoc `Block`). \nThere is a class for default rendering methods akin to
  the `Show` class. \n* Apply a variable holding a function to a variable holding
  a value, \nsimilar to the `<*>` operator of `Applicative` functors. \nIn the Provenience
  monad, we write `<%>` instead. \n\nThe fifth action is the only action that adds
  edges to the \ndata dependency graph. Suppose we have registered a variable `f`
  \nholding a value of type `a -> b` and a variable `x` holding a \nvalue of type
  `a`. The description of `f` should explain to the reader \nwhat the function that
  is the value of `f` does. \nThe monadic action \n\n    y <- pure f <%> x\n\ndoes
  not register `y` as a new variable; instead `y` points to the same \nnode in the
  variable store as `f`. However, the value of `y` is the \napplication of the value
  of `f` to the value of `x` and there is now \nan edge from `x` to `y` in the data
  flow graph labelled with the \ndescription of `f`. If `y` is not itself a function
  \nbut the desired result, you should overwrite the node's description \n(which is
  still the description of `f`) with a new description of \nthe value of `y`. \n\nWhy
  this design choice? Because otherwise partial \napplication is impossible. If <%>
  always registered new variables, \nthen \n\n    f <%> a <%> b\n\nwould register
  both `f(a)` and `f(a)(b)` as variables, which might not be \nwhat the user intended.
  But overwriting `f` also means that we can not \nre-use the same function variable
  in several applications. When that is \ndesired, use a Provenience action producing
  a variable instead of the \nvariable itself. Consider the following.\n\n    let
  f = var succ\n    x <- input 4\n    y <- f <%> x\n    z <- f <%> y\n\nSince the
  Haskell identifier `f` is bound to a Provenience action \nthat registers a new variable
  holding the `succ` function, all \nthree of `x`, `y` and `z` are distinct variables.
  \nThe take-home message is that \n\n    f <- var succ\n    x <- input 4\n    y <-
  pure f <%> x\n\nis a dangerous style because the value of `f` is not what the corresponding
  \nnode in the graph is being used for anymore. \n\nalternative Representation\n--------------------------\n\nThe
  variable store also permits to save an alternative representation \nof each variable
  in addition to the Pandoc rendering, \nsince you might want to provide a machine-readable
  data flow graph \nin addition to a Pandoc document. \nSimilarly to the `IHaskellDisplay`
  class, \neach type used in a variable must have a type class instance \nthat allows
  automatic conversion into the alternative representation. \nIf you don't need this
  feature, simply choose () as the alternative \nrepresentation type. \nThe graph
  of alternative representations can be extracted from \nthe variable store. We provide
  code to assemble the store into a \nspreadsheet (of static cells). Foldable structures
  \nof basic values become columns while doubly-nested structures \nbecome tables.
  \n\n\nExample\n=======\n\nContinuing the example above, in the Provenience monad
  you would \nwrite something like the following. Of course it is up to the programmer
  \nto decide how fine-grained the decomposition into Provenience actions \nshould
  be. \n \n    workflow x' y' = do\n      ---------- register and render the input
  variables ------------------\n      x <- input x' --                               register
  and render x'\n      y <- input y'\n      x `named` \"x\" --                          links
  to x show \"x\" as text\n      y `named` \"y\"\n      x <? renderDefault \"first
  item of input data\" --           describe x\n      y <? renderDefault \"second
  item of input data\"\n      linkx <- linkto x --                   create a hyperlink,
  used below\n      let what_f_does = Para [Str \"auxiliary function f applied to
  \",linkx]\n      ---------------------------------------------------------------------\n
  \     ------ the actual computation is three lines as in the pure code ----\n      a
  <- func f what_f_does <%> x\n      b <- func g (renderDefault \"auxiliary function
  g\") <%> a <%> y\n      c <- func h (renderDefault \"auxiliary function h\") <%>
  a <%> b\n      ------ only book-keeping below --------------------------------------\n
  \     ---------------------------------------------------------------------\n      a
  `named` \"a\" >> b `named` \"b\" >> c `named` \"result\"\n      a <? renderDefault
  \"first intermediate result\"\n      b <? renderDefault \"second intermediate result\"\n
  \     c <? renderDefault \"the workflow result\"\n      render a >> render b >>
  render c\n      return c\n\nAbove, the action `func` registers a new variable and
  immediately \nsupplies a description, which is then used as edge label by the \n`<%>`
  operator on the same line.   \nYou see that instead of one line of pure Haskell
  you are burdened \nwith writing four kinds of Provenience actions: \n*register*,
  *describe*, *alias* and *render*. But of the four actions, \nthree are only concerned
  with providing descriptions that the pure code \ndid not contain. \n\nRemarks\n=======\n\nThis
  package was inspired by the \n[Javelin](https://en.wikipedia.org/wiki/Javelin_Software
  \"wikipedia\") \nSoftware. Thanks to John R Levine, one of the authors of Javelin,
  \nfor explaining the concepts underlying Javelin.  \n\nBy using [Pandoc](https://hackage.haskell.org/package/pandoc
  \"pandoc\") \nthe user has a number of output format choices. \nWith a little CSS,
  the above example may be rendered like follows. \nUnfortunately, hackage does not
  allow raw html in markdown, so \nyou have to convert the markdown yourself. \n\n(For
  the sake of example, \nwe used `f = abs`, `g = replicate` and `h = fmap concat .
  replicate`). \n\n<div id=\"variables\">\n<div id=\"provenienceVar1\" class=\"variable\"
  style=\"border: 2px solid;padding: 10px 40px;width: 400px;border-radius: 25px;\">\n<div
  class=\"shortname\" style=\"font-weight:bold;color:OliveDrab;\">\n<p>y</p>\n</div>\n<div
  class=\"provenienceKeyword\" style=\"font-weight:bold;\">\n<p>Used in:</p>\n</div>\n<ul>\n<li><a
  href=\"#provenienceVar3\" class=\"outgoing\" style=\"color:DodgerBlue;\" title=\"b\">b</a></li>\n</ul>\n<hr
  />\n<div class=\"description\">\n<p>second item of input data</p>\n</div>\n<div
  class=\"valueRendering\" style=\"background-color:#ebebe0;\">\n<p>t</p>\n</div>\n</div>\n<div
  id=\"provenienceVar0\" class=\"variable\" style=\"border: 2px solid;padding: 10px
  40px;width: 400px;border-radius: 25px;\">\n<div class=\"shortname\" style=\"font-weight:bold;color:OliveDrab;\">\n<p>x</p>\n</div>\n<div
  class=\"provenienceKeyword\" style=\"font-weight:bold;\">\n<p>Used in:</p>\n</div>\n<ul>\n<li><a
  href=\"#provenienceVar2\" class=\"outgoing\" style=\"color:DodgerBlue;\" title=\"a\">a</a></li>\n</ul>\n<hr
  />\n<div class=\"description\">\n<p>first item of input data</p>\n</div>\n<div class=\"valueRendering\"
  style=\"background-color:#ebebe0;\">\n<p>-4</p>\n</div>\n</div>\n<div id=\"provenienceVar2\"
  class=\"variable\" style=\"border: 2px solid;padding: 10px 40px;width: 400px;border-radius:
  25px;\">\n<div class=\"shortname\" style=\"font-weight:bold;color:OliveDrab;\">\n<p>a</p>\n</div>\n<div
  class=\"provenienceKeyword\" style=\"font-weight:bold;\">\n<p>Sources:</p>\n</div>\n<ul>\n<li><a
  href=\"#provenienceVar0\" class=\"incoming\" style=\"color:Tomato;\" title=\"x\">x</a></li>\n</ul>\n<div
  class=\"edges\">\n<div class=\"provenienceKeyword\" style=\"font-weight:bold;\">\n<p>Construction:</p>\n</div>\n<p>auxiliary
  function f applied to <a href=\"#provenienceVar0\" title=\"x\">x</a></p>\n</div>\n<div
  class=\"provenienceKeyword\" style=\"font-weight:bold;\">\n<p>Used in:</p>\n</div>\n<ul>\n<li><a
  href=\"#provenienceVar3\" class=\"outgoing\" style=\"color:DodgerBlue;\" title=\"b\">b</a></li>\n<li><a
  href=\"#provenienceVar4\" class=\"outgoing\" style=\"color:DodgerBlue;\" title=\"result\">result</a></li>\n</ul>\n<hr
  />\n<div class=\"description\">\n<p>first intermediate result</p>\n</div>\n<div
  class=\"valueRendering\" style=\"background-color:#ebebe0;\">\n<p>4</p>\n</div>\n</div>\n<div
  id=\"provenienceVar3\" class=\"variable\" style=\"border: 2px solid;padding: 10px
  40px;width: 400px;border-radius: 25px;\">\n<div class=\"shortname\" style=\"font-weight:bold;color:OliveDrab;\">\n<p>b</p>\n</div>\n<div
  class=\"provenienceKeyword\" style=\"font-weight:bold;\">\n<p>Sources:</p>\n</div>\n<ul>\n<li><a
  href=\"#provenienceVar1\" class=\"incoming\" style=\"color:Tomato;\" title=\"y\">y</a></li>\n<li><a
  href=\"#provenienceVar2\" class=\"incoming\" style=\"color:Tomato;\" title=\"a\">a</a></li>\n</ul>\n<div
  class=\"edges\">\n<div class=\"provenienceKeyword\" style=\"font-weight:bold;\">\n<p>Construction:</p>\n</div>\n<p>auxiliary
  function g</p>\n</div>\n<div class=\"provenienceKeyword\" style=\"font-weight:bold;\">\n<p>Used
  in:</p>\n</div>\n<ul>\n<li><a href=\"#provenienceVar4\" class=\"outgoing\" style=\"color:DodgerBlue;\"
  title=\"result\">result</a></li>\n</ul>\n<hr />\n<div class=\"description\">\n<p>second
  intermediate result</p>\n</div>\n<div class=\"valueRendering\" style=\"background-color:#ebebe0;\">\n<p>tttt</p>\n</div>\n</div>\n<div
  id=\"provenienceVar4\" class=\"variable\" style=\"border: 2px solid;padding: 10px
  40px;width: 400px;border-radius: 25px;\">\n<div class=\"shortname\" style=\"font-weight:bold;color:OliveDrab;\">\n<p>result</p>\n</div>\n<div
  class=\"provenienceKeyword\" style=\"font-weight:bold;\">\n<p>Sources:</p>\n</div>\n<ul>\n<li><a
  href=\"#provenienceVar2\" class=\"incoming\" style=\"color:Tomato;\" title=\"a\">a</a></li>\n<li><a
  href=\"#provenienceVar3\" class=\"incoming\" style=\"color:Tomato;\" title=\"b\">b</a></li>\n</ul>\n<div
  class=\"edges\">\n<div class=\"provenienceKeyword\" style=\"font-weight:bold;\">\n<p>Construction:</p>\n</div>\n<p>auxiliary
  function h</p>\n</div>\n<hr />\n<div class=\"description\">\n<p>the workflow result</p>\n</div>\n<div
  class=\"valueRendering\" style=\"background-color:#ebebe0;\">\n<p>tttttttttttttttt</p>\n</div>\n</div>\n</div>\n\nAlternatives
  and shortcomings\n=============================\n\nSpreadsheets excel at displaying
  intermediate values, \nalthough comprehending the meaning and intention of \nspreadsheet
  formulas requires experience. Needless to say, \nHaskell is way more expressive
  than the formula language \nof contemporary spreadsheets.\n\nLimiting yourself to
  one of Pandoc's output formats, \nyou might write a \n[haskintex](http://hackage.haskell.org/package/haskintex
  \"haskintex\") \ndocument instead of a Provenience expression. \nHaskintex may be
  regarded as a form of literate programming, \nand you can use any of the numerous
  string interpolation packages \nor a library for type-safe construction of the target
  document format \n(e.g. \n[HaTeX](http://hackage.haskell.org/package/HaTeX \"HaTeX\"),
  \n[blaze](http://hackage.haskell.org/package/blaze-html \"blaze\") or \n[Pandoc](https://hackage.haskell.org/package/pandoc
  \"pandoc\"))\nto achieve the same outcome. \nHowever, you will not get the complete
  data flow graph for free. \n\nSome programming languages provide interactive *notebooks*,
  e.g. the \n[IPython](https://github.com/ipython \"IPython\") interactive notebooks
  \nor the [IHaskell](http://hackage.haskell.org/package/ihaskell \"ihaskell\") \nvariant.
  \n[Hyper-Haskell](https://github.com/HeinrichApfelmus/hyper-haskell \"hyper-haskell\")
  \nis another approach to Haskell workbooks and shares some ideas with this package.
  \n[Typed Spreadsheets](http://hackage.haskell.org/package/typed-spreadsheet \"typed-spreadsheet\")
  \nsort of do what this package does in an interactive way, although it does not
  show \nintermediate results.  \nWorking with large quantities of input data might
  become unwieldy, however. \nRendering a notebook or interactive spreadsheet, though,
  requires the underlying language \nto be installed on the system. \nIn contrast
  the philosophy of Provenience \nis that computation and display take place on different
  machines, \nand that a Provenience computation is only a small part \nof an actual
  application.  \n\nPerhaps the biggest shortcoming at present is \nthe behaviour
  of `mapM`.  \nWhen you `mapM` a Provenience function over a \ntraversable structure
  like a list, \neach element registers the same number of variables, \nwhereas your
  intention probably was to register the \nentire traversable structure as input and
  obtain \na single output variable. \nAt present you have to do this transformation
  yourself. \n\nTODOs\n=====\n\nAdd support for an actual graph layout of the variable
  store \nby means of a library such as [graphViz](http://hackage.haskell.org/package/graphviz
  \"graphViz\"). \n\nPerhaps it is wise to make usage of variables which meanwhile
  have been overwritten illegal to use. \n\nHow could one retain the functions in
  the data flow graph, \nmaking the data flow interactive? \nWe'd have to map a subset
  of Haskell onto some serializable type, \ne.g. spreadsheet formulas or JavaScript.
  \n"
license-name: GPL-3.0-only
