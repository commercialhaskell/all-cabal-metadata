all-versions:
- 0.1.0.1
author: Takenobu Tani
basic-deps:
  array: '>=0'
  attoparsec: '>=0.10'
  base: '>=4 && <5'
  bytestring: '>=0.10'
  containers: '>=0'
  deepseq: '>=1.3'
  mtl: '>=0'
changelog: "# Changelog \n\n## 0.1.0.0  *Jan 2015*\n\n   * initial release\n\n"
changelog-type: markdown
description: "Processor-creative-kit\n======================\n\nThis is a [haskell
  package][1] for playing processors.\n\nYou can create your processors with your
  own instruction set and cpu simulators and development tools.\n\nenjoy! :smiley:\n\n\nSummary\n-------\n\nFeature\n
  \ - easy try, easy modify\n  - a purely functional CPU core (without IO)  (you can
  embed it anywhere)\n  - including a very simple prototype assembler\n  - including
  a very simple prototype debugger\n  - including a very simple prototype profiler\n\nAcknowledgements\n
  \ - I was inspired from these packages:\n    [HARM][2],\n    [powerpc][3],\n    [ministg][4],\n
  \   [hython][5].\n  - and many processors, many tools. Thank you.\n\n\n\nQuick tour\n----------\n\n###
  (i) install\n\n  To expand the source code in your working directory:\n\n    $ cd
  YOUR_WORK_DIRECTORY\n    $ cabal unpack processor-creative-kit\n\n  or\n\n    $
  tar xvzf processor-creative-kit.tar.gz\n\n  Then, install the dependent packages:\n\n
  \   $ cabal install --only-dependencies\n\n\n\n### (ii) run examples\n\n**run**\n\n
  \   $ runhaskell examples/run.hs examples/test0.asm\n\n  result:\n\n    pc : 3\n
  \   gr : [0,100,200,300,0,0,0,0]\n    fl : [False,False]\n    dm : [(0,[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0])]\n\n\n**tracing
  run**\n\n    $ runhaskell examples/trace.hs examples/test0.asm\n\n  result:\n\n
  \   TrcInst:        pc : 0x0        MOVI R1 100\n    \n    TrcInst:        pc :
  0x1        MOVI R2 200\n    \n    TrcInst:        pc : 0x2        ADD R3 R1 R2\n
  \   \n    TrcInst:        pc : 0x3        HALT\n\n\n**profiling run**\n\n    $ runhaskell
  examples/prof.hs examples/test0.asm\n\n  result:\n\n    instruction profile:\n    \n
  \     MOVI  2\n      ADD   1\n      HALT  1\n    \n      total 4\n    \n    \n    Call
  target profile:\n    \n      address       count\n    (snip)\n\n\n**interactive
  debugger**\n\n    $ runhaskell examples/idb.hs examples/test0.asm\n\n  result:\n\n
  \   For help, type \"help\".\n    \n    (idb) run\n    TrcInst:        pc : 0x0
  \       MOVI R1 100\n    \n    TrcInst:        pc : 0x1        MOVI R2 200\n    \n
  \   TrcInst:        pc : 0x2        ADD R3 R1 R2\n    \n    TrcInst:        pc :
  0x3        HALT\n    \n    (idb) info reg\n    pc : 3\n    gr : [0,100,200,300,0,0,0,0]\n
  \   fl : [False,False]\n    \n    (idb) x/8 0\n    0x00000000: 0x00000000 0x00000000
  0x00000000 0x00000000\n    0x00000004: 0x00000000 0x00000000 0x00000000 0x00000000\n
  \   \n    (idb) b 1\n    Num  Enb What\n    1    y   PC == 1  (PC == 0x1)\n    \n
  \   (idb) run\n    TrcInst:        pc : 0x0        MOVI R1 100\n    \n    (idb)
  s\n    TrcInst:        pc : 0x1        MOVI R2 200\n    \n    (idb) s\n    TrcInst:
  \       pc : 0x2        ADD R3 R1 R2\n    \n    (idb) help\n    List of commands:\n
  \   \n    q       -- Exit debugger\n    help    -- Print list of commands\n    run
  \    -- Start debugged program\n    s       -- Step program\n    c       -- Continue
  program being debugged\n    x       -- Examin memory: x(/COUNT) ADDRESS\n    info
  reg        -- List of registers\n    disas   -- Disassemble: disassemble (ADDRESS)\n
  \   info b  -- Status of breakpoints\n    disable -- Disable breakpoint: disable
  NUMBER\n    enable  -- Enable breakpoint: enable NUMBER\n    delete  -- Delete breakpoint:
  delete NUMBER\n    b       -- Set breakpoint: b ADDRESS\n    watch   -- Set a watchpoint.
  example:\n                 data memory -- watch *0x80 != 10\n                 pc
  \         -- watch pc > 3\n                 register    -- watch r7 == 3\n    p
  \      -- Print memory value: p *ADDRESS\n    p       -- Set memory value: p *ADDRESS
  = VALUE\n    \n    (idb) q\n\n\n\n### (iii) add instructions\n\n**add an negative
  instruction (`neg r0,r1`)**\n\n  insert following lines:\n\n  [Language/Pck/Cpu/Instruction.hs]
  ... internal representation on the cpu\n  ~~~haskell\n            | NEG   GReg GReg\n
  \ ~~~\n\n  [Language/Pck/Cpu/Execution.hs] ... internal behavior on the cpu\n  ~~~haskell\n
  \ evalStep (NEG   ra rb)    = uniopInst (*(-1)) ra rb\n  ~~~\n\n  [Language/Pck/Tool/Assembler.hs]
  ... assembler format\n  ~~~haskell\n           <|> inst2 NEG  \"neg\" greg greg\n
  \ ~~~\n\n\n\nMore documents\n--------------\n  - [How to use the API (docs/1_HowToUseAPI.md)]
  [6]\n  - [How to create your processors (docs/2_HowToCreate.md)] [7]\n  - [hackage
  processor-creative-kit] [1]\n\n\n\nNote\n----\n\nDefault processor architecture\n
  \ - Harvard architecture. (instruction and data memories are splitted)\n  - fixed
  length instruction (word length)\n  - word addressing (not byte addressing)\n  -
  ideal immediate length (an immediate can be set by one instruction)\n  - no FPU,
  MMU, cache, privilege level, interruption, I/O, and any\n\n\nLimitation\n  - using
  the slow container(Data.Array) for simple implementation.\n\n\n[1]: https://hackage.haskell.org/package/processor-creative-kit\n[2]:
  https://hackage.haskell.org/package/HARM\n[3]: https://hackage.haskell.org/package/powerpc\n[4]:
  https://hackage.haskell.org/package/ministg\n[5]: https://github.com/mattgreen/hython\n[6]:
  https://github.com/takenobu-hs/processor-creative-kit/blob/master/docs/1_HowToUseAPI.md\n[7]:
  https://github.com/takenobu-hs/processor-creative-kit/blob/master/docs/2_HowToCreate.md\n\n\n"
description-type: markdown
hash: f3b5bba2d4726054dd9d63327972043aa6fb3e45c8673f555ce4b513675b00ca
homepage: https://github.com/takenobu-hs/processor-creative-kit
latest: 0.1.0.1
license-name: BSD-3-Clause
maintainer: takenobu.hs@gmail.com
synopsis: a creation kit for instruction sets and cpu simulators and development tools
test-bench-deps: {}
