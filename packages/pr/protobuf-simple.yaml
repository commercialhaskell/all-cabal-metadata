all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.3
- 0.1.0.4
- 0.1.0.5
- 0.1.1.0
- 0.1.1.1
author: Martijn Rijkeboer <mrr@sru-systems.com>
basic-deps:
  base: '>=4 && <5'
  binary: '>=0.7'
  bytestring: '>=0.9'
  containers: '>=0.4'
  data-binary-ieee754: '>=0.4'
  directory: '>=0'
  filepath: '>=0'
  mtl: '>=2.0'
  parsec: '>=0'
  split: '>=0'
  text: '>=0.11'
changelog: ''
changelog-type: ''
description: "# Protobuf-simple\r\n\r\nAn Haskell implementation of Google's Protocol
  Buffers version 2 with an\r\nemphasis on simplicity. The implementation consists
  of a library for encoding\r\nand decoding of data and the `protobuf-simple-protoc`
  executable for generating\r\nHaskell types from proto files. In fact, the types
  that are used in the tests\r\nare generated with the following command:\r\n\r\n```\r\n$
  protobuf-simple-protoc data/Types.proto\r\n```\r\n\r\nIn the example below, the
  `CustomType` is a Haskell type that was generated\r\nwith the `protobuf-simple-protoc`
  executable. The `encCustomType` function\r\nencodes a CustomType into a ByteString.
  The `decCustomType` function decodes a\r\nByteString into either a CustomType or
  an error.\r\n\r\n```\r\nmodule Codec where\r\n\r\nimport Data.ByteString.Lazy (ByteString)\r\nimport
  Data.ProtoBuf (decode, encode)\r\nimport Types.CustomType (CustomType(..))\r\n\r\nencCustomType
  :: CustomType -> ByteString\r\nencCustomType = encode\r\n\r\ndecCustomType :: ByteString
  -> Either String CustomType\r\ndecCustomType = decode\r\n```\r\n\r\nThe library
  exposes two modules, Data.ProtoBuf, which is used for encoding and\r\ndecoding and
  Data.ProtoBufInt, which is an internal module that is used by the\r\ngenerated types.\r\n\r\n\r\n##
  Supported Data Types\r\n\r\nThe following Protocol Buffer types, with their Haskell
  counterparts, are\r\nsupported:\r\n\r\n- bool: Bool\r\n- bytes: ByteString (lazy)\r\n-
  double: Double\r\n- enum: Sum-type\r\n- fixed32: Word32\r\n- fixed64: Word64\r\n-
  float: Float\r\n- int32: Int32\r\n- int64: Int64\r\n- message: Product-type or newtype\r\n-
  sfixed32: Int32\r\n- sfixed64: Int64\r\n- sint32: Int32\r\n- sint64: Int64\r\n-
  string: Text (lazy)\r\n- uint32: Word32\r\n- uint64: Word64\r\n\r\n\r\n## Compatibility\r\n\r\nBesides
  testing that decoding inverses encoding, the compatibility with other\r\nimplementations
  is tested by decoding binary files that were created with\r\nprotobuf-net (C#).\r\n\r\n\r\n##
  Other Implementations\r\n\r\nThere are currently multiple Protocol Buffers implementations
  available. This\r\nlibrary was created for the following reasons. Firstly, I wanted
  to use\r\nData.Text for the string type instead of Data.ByteString as the\r\nprotocol-buffers
  library does. Secondly, I wanted to use newtypes for messages\r\nwith only one field.
  Finally, I wanted to use simpler data types than the\r\nprotobuf library does.\r\n\r\nFor
  example, the protobuf library uses the following (example from the manual):\r\n\r\n```\r\ndata
  Foo = Foo\r\n  { field1 :: Required 1 (Value Int64)\r\n  , field2 :: Optional 2
  (Value Text)\r\n  , field3 :: Repeated 3 (Value Bool)\r\n  } deriving (Generic,
  Show)\r\n```\r\n\r\nWhereas protobuf-simple would use the following:\r\n\r\n```\r\ndata
  Foo = Foo\r\n  { field1 :: Int64\r\n  , field2 :: Maybe Text\r\n  , field3 :: Seq
  Bool\r\n  } deriving (Show, Eq, Ord)\r\n```\r\n\r\n\r\n## Not Implemented\r\n\r\nThe
  following Protocol Buffers features are currently not implemented:\r\n\r\n- Importing
  definitions\r\n- Groups\r\n- Declaring extensions in messages\r\n- Declaring nested
  extensions in messages\r\n- Oneof feature\r\n- Associative maps\r\n- Defining services\r\n-
  Custom options\r\n\r\n\r\n## License\r\n\r\nProtobuf-simple is released under the
  MIT License.\r\n\r\n"
description-type: markdown
hash: dddba864f44bea0b959f940911edd4c6e77caf61c5220e4f0f55b2036f1d751a
homepage: https://github.com/sru-systems/protobuf-simple
latest: 0.1.1.1
license-name: MIT
maintainer: Martijn Rijkeboer <mrr@sru-systems.com>
synopsis: Simple Protocol Buffers library (proto2)
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=0'
  binary: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  data-binary-ieee754: '>=0'
  filepath: '>=0'
  hspec: '>=0'
  parsec: '>=0'
  protobuf-simple: '>=0'
  quickcheck-instances: '>=0'
  split: '>=0'
  text: '>=0'
