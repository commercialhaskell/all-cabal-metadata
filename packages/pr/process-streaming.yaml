all-versions:
- 0.0.1
- 0.0.1.1
- 0.3.0.0
- 0.5.0.0
- 0.5.0.1
- 0.5.0.2
- 0.6.0.0
- 0.6.1.0
- 0.6.2.0
- 0.6.2.1
- 0.6.2.2
- 0.6.5.0
- 0.6.6.0
- 0.6.7.0
- 0.6.8.0
- 0.6.9.0
- 0.7.0.0
- 0.7.0.1
- 0.7.0.2
- 0.7.1.0
- 0.7.2.0
- 0.7.2.1
- 0.7.2.2
- 0.9.0.0
- 0.9.0.1
- 0.9.1.0
- 0.9.1.1
- 0.9.1.2
- 0.9.2
- 0.9.2.1
- 0.9.3.0
author: Daniel Diaz Carrete
basic-deps:
  base: '>=4.4 && <5'
  bifunctors: '>=4.1'
  bytestring: '>=0'
  conceit: '>=0.3.2.0'
  free: '>=4.2'
  kan-extensions: '>4.2'
  pipes: '>=4.1.3'
  pipes-bytestring: '>=2.1.0'
  pipes-concurrency: '>=2.0.2'
  pipes-parse: '>=3.0.1'
  pipes-safe: '>=2.2.0'
  pipes-text: '>=0.0.0.10'
  pipes-transduce: '>=0.4.1'
  process: '>=1.2.3.0'
  profunctors: '>=5'
  text: '>=0.11.2'
  transformers: '>=0.2'
  transformers-compat: '>=0.3'
  void: '>=0.6'
changelog: "0.9.3.0\n-------\n- Semigroup instances.\n\n0.9.2.0\n-------\n- Bumped
  pipes-transduce dependency to 0.4.1.\n- New functions like next and throwE reexported
  from Pipes.Transduce.\n\n0.9.1.0\n-------\n- Added executeInteractive and executeInteractiveFallibly\n-
  Added envAt lens for tweaking the environment.\n\n0.9.0.0\n-------\n- All Siphon
  functionality has been moved to new package pipes-transduce.\n- Siphons correspond
  to the \"Fold1\" datatype in pipes-transduce.\n- \"Piping\" is now the \"Streams\"
  Applicative.\n- Exit code handling has been merged into the \"Streams\" Applicative.
  \n- Removed pipeline functions.\n- Removed some lenses, added others.\n\n0.7.2.1\n-------\n-
  Asynchronous cancellation now works on Windows (issue #8)\n\n0.7.2.0\n-------\n-
  contraproduce, contraencoded, Splitter, splitIntoLines, nest    \n\n0.7.1.0\n-------\n-
  contramapFoldable, contramapEnumerable.\n\n0.7.0.2\n-------\n- Bumped conceit dependency
  to make it work with GHC 7.10.\n\n0.7.0.0\n-------\n- Changed signature of toLines
  to make it more consistent with that of encoded\n  (breaking change).\n- Stricter
  signatures of some fromConsumer... functions (breaking change).\n- Pump constructor
  now hidden (breaking change).\n- Added new fromConsumer... functions for Consumers
  that don't stop.\n- Functions to throw exceptions for encoding errors (unwantedX,
  leftoverX,\n  _leftoverX). Also a new LeftoverException.\n- Re-exported more decoding
  functions from pipes-text.\n- New module System.Process.Streaming.Extended with
  some experimental\n  functions.\n- New module System.Process.Streaming.Internal.
  \n\n0.6.9.0\n-------\n- fromLazyBytes, intoLazyBytes, intoLazyText.\n- re-export
  decodeUtf8 from pipes-text. \n\n0.6.8.0\n-------\n- IsString instance for Pump.\n-
  Some changes in the haddocks.\n\n0.6.7.0\n-------\n- Bumped some dependencies.\n\n0.6.6.0\n-------\n\n-
  Added fromFoldable, fromEnumerable, prefixLines\n\n0.6.5.0\n-------\n\n- Brought
  back the tutorial.\n- Added newtype SiphonOp with Contravariant, Divisible and Decidable
  instances.\n- PipingPolicy now deprecated, use Piping instead.\n- LinePolicy now
  deprecated, use Lines instead.\n- linePolicy now deprecated, use toLines instead.\n-
  Siphon constructors for folds from the \"foldl\" package.\n\n0.6.2.2\n-------\n\n-
  Allow text-1.2.\n\n0.6.2.0\n-------\n\n- Removed ugly (Show e,Typeable) constraints
  on the error type from many\n  functions. \n\n0.6.1.0\n-------\n\n- No changes to
  the external API, but some internal code has moved to a\n  separate package, \"conceit\".\n\n0.6.0.0\n-------\n\n-
  Now compatible with earlier versions of transformers.\n- Simplified LinePolicy.\n-
  Simplified pipeline functions and datatypes.\n\n0.5.0.2\n-------\n\n- A bug slipped
  by :(\n\n0.5.0.1\n-------\n\n- Changes in the internals to reduce the number of
  spawned threads.\n\n0.5.0.0\n-------\n\n- Now the constructors for \"PipingPolicy\"
  take \"Siphons\" directly, instead of\n  continuation functions.\n- Removed \"separated\"
  and \"combined\" functions, added new \"PipingPolicy\"\n  constructors in their
  place.\n- Removed \"LeftoverPolicy\", its function is now performed by Siphons.\n-
  Removed \"surely\", \"safely\", \"monoidally\" functions with confusing signatures.\n-
  Removed all occurrences of unbounded buffers in the code.\n- Implemented support
  for branching pipelines of processes.\n\n0.3.0.0\n-------\n\n- Renamed many functions
  (the number-based naming schema is gone).\n- Decisions about how to consume the
  standard streams were moved to the new\n\"PipingPolicy\" type.\n- \"ForkProd\" is
  now \"Siphon\". \n- \"execute\" can now throw IOExceptions (but see \"safeExecute\").\n-
  Some complicated types were hidden behind data declarations.\n- Functor, Bifunctor
  and Profunctor instances for some types.\n\n0.0.1.1\n-------\n\n- Added some examples.\n-
  Re-exported System.Process from System.Process.Streaming.\n"
changelog-type: text
description: "process-streaming\n=================\n\nA library for interacting with
  system processes in a streaming fashion.\n\nThe basic goals:\n\n- Concurrent, streaming
  access to stdin, stdout and stderr...\n\n- ...all the while preventing deadlocks
  caused by mishandling of the streams. \n\n- Easy integration with consumers from\n
  \ [pipes](http://hackage.haskell.org/package/pipes), parsers from\n  [pipes-parse](http://hackage.haskell.org/package/pipes-parse)
  and folds from\n  [foldl](http://hackage.haskell.org/package/foldl).\n\n- Facilitate
  the use of sum types to signal failures, when desired.\n\n- No fussing around with
  process handles: wait for the process by waiting for\n  the IO action, terminate
  the process by killing the thread executing the IO\n  action.\n\nA [relevant thread](https://groups.google.com/forum/#!searchin/haskell-pipes/pipes$20process/haskell-pipes/JFfyquj5HAg/Lxz7p50JOh4J)
  in the Haskell Pipes Google Group.\n\n\n## Possible alternatives in Hackage\n\n*
  turtle (pipes-based, shell programming)\n\nhttp://hackage.haskell.org/package/turtle\n\n*
  pipes-cliff (pipes-based)\n\nhttp://hackage.haskell.org/package/pipes-cliff\n\n*
  pipes-shell (pipes-based)\n\nhttp://hackage.haskell.org/package/pipes-shell\n\n*
  shelly (shell programming)\n\nhttp://hackage.haskell.org/package/shelly\n\n* shell-conduit
  (coundit-based, shell programming)\n\nhttp://hackage.haskell.org/package/shell-conduit\n\n*
  Data.Conduit.Process from conduit-extra (conduit-based)\n\nhttp://hackage.haskell.org/package/conduit-extra\n\n*
  System.IO.Streams.Process from io-streams (iostreams-based)\n\nhttp://hackage.haskell.org/package/io-streams\n\n*
  process-extras\n\nhttp://hackage.haskell.org/package/process-extras\n"
description-type: markdown
hash: 5db7965bc2f6fe5b58598141411bc6c1787907b883bfae9d22027e9f4040a460
homepage: ''
latest: 0.9.3.0
license-name: BSD-3-Clause
maintainer: diaz_carrete@yahoo.com
synopsis: 'Streaming interface to system processes. '
test-bench-deps:
  attoparsec: '>=0.11'
  base: '>=4.4 && <5'
  bifunctors: '>=4.1'
  bytestring: '>=0'
  containers: '>=0.4'
  directory: '>=1.2'
  doctest: '>=0.9.1'
  exceptions: '>=0.6.0 && <1.0'
  filepath: '>=0'
  foldl: '>=1.1'
  free: '>=4.2 && <5'
  lens-family-core: '>=1.1'
  pipes: '>=4.1.3'
  pipes-attoparsec: '>=0.5'
  pipes-bytestring: '>=2.1.0'
  pipes-concurrency: '>=2.0.2'
  pipes-group: '>=1.0.1'
  pipes-parse: '>=3.0.1'
  pipes-safe: '>=2.2.0'
  pipes-text: '>=0.0.0.10'
  pipes-transduce: '>=0.4.1'
  process: '>=1.2.3.0'
  process-streaming: '>=0'
  semigroups: '>=0.15 && <0.20'
  tasty: '>=0.9'
  tasty-hunit: '>=0.9'
  text: '>=0.11.2'
  transformers: '>=0.2'
  transformers-compat: '>=0.3'
  void: '>=0.6'
