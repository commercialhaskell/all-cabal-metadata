all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
author: Junaid Rasheed
basic-deps:
  PropaFP: '>=0'
  QuickCheck: '>=2.14.2 && <2.15'
  aern2-mfun: '>=0.2.9 && <0.3'
  aern2-mp: '>=0.2.9.1 && <0.3'
  base: '>=4.7 && <5'
  binary: '>=0.8.8.0 && <0.9'
  bytestring: '>=0.10.12.1 && <0.11'
  collect-errors: '>=0.1.5 && <0.2'
  containers: '>=0.6.4.1 && <0.7'
  directory: '>=1.3.6.2 && <1.4'
  extra: '>=1.7.10 && <1.8'
  ghc: '>=9.0.2 && <9.1'
  mixed-types-num: '>=0.5.10 && <0.6'
  optparse-applicative: '>=0.16.1.0 && <0.17'
  process: '>=1.6.13.2 && <1.7'
  regex-tdfa: '>=1.3.1.2 && <1.4'
  scientific: '>=0.3.7.0 && <0.4'
  temporary: '>=1.3 && <1.4'
changelog: |
  # Changelog for PropaFP

  ## Unreleased changes

  - Polish documentation
  - Update tests for FPTaylor v0.9.4
    - v0.9.4 is much faster in some cases and produces slightly different (often slightly better) bounds.

  ## [v0.1.1.0](https://github.com/rasheedja/PropaFP/compare/v0.1.0.0...v0.1.1.0)

  - Remove quotes from FPTaylor variables, allowing support for FPTaylor >=0.9.3
  - Re-enable `PropaFP.Expression.normalizeBoolean` in `PropaFP.DeriveBounds`
    - Aggressive simplification rules applied in `normalizeBoolean` are sometimes required to successfully derive bounds for variables
  - Add `eliminate_if` transformation to the PropaFP Why3 driver
    - This transformation performs simplifications that PropaFP cannot currently do, making some problems easier for provers
  - Regenerate Why3 SMT files using new driver
  - Add test suite
    - Tests dReal(/LPPaver) and MetiTarski translators
    - Checks that PropaFP generated files are the same as the processed files stored under the examples folder

  ## [v0.1.0.0](https://github.com/rasheedja/PropaFP/tree/v0.1.0.0)

  - Initial release
changelog-type: markdown
description: |
  # PropaFP

  PropaFP is a tool used for auto-active verification of Floating-Point programs.
  PropaFP can be used for the verification of [SPARK][1]/[Ada][2] floating-point programs and is integrated with [GNAT Studio 2022](https://www.adacore.com/gnatpro/toolsuite/gnatstudio).

  PropaFP can take some Verification Condition (VC), and if PropaFP understands the VC, simplify it, derive bounds for variables, and safely eliminate floating-point operations using over-approximations on rounding errors.
  A more detailed description of PropaFP can be found in [this paper](https://link.springer.com/chapter/10.1007/978-3-031-17108-6_2) ([arXiv version](https://arxiv.org/abs/2207.00921)).

  Below is a diagram summarising the integration with PropaFP and SPARK.

  ![SPARK + PropaFP](images/SPARK_Toolchain_PropaFP.png)

  [1]: https://en.wikipedia.org/wiki/SPARK_(programming_language)
  [2]: https://en.wikipedia.org/wiki/Ada_(programming_language)

  ## Requirements

  All PropaFP executables require the [FPTaylor v0.9.4](https://github.com/soarlab/FPTaylor/tree/efbbc83970fe3c9f4cb33fafbbe1050dd18749cd) executable in $PATH.

  The 'propafp-run-$prover' executables require the $prover to be installed (but not necessarily in $PATH).

  To build PropaFP, we recommend [Stack](https://docs.haskellstack.org/en/stable/README/). We have built PropaFP with Stack version 2.7.5.

  ## Installation

  - Download/Clone this repository
  - cd into the repo
  - Run `stack build`

  Stack will then build the project and state where the PropaFP executables have been placed.

  ### Supported Provers

  Currently, PropaFP supports:

  - [dReal4](https://github.com/dreal/dreal4) (Tested on v4.21.06.2)
  - [LPPaver](https://github.com/rasheedja/LPPaver) (Tested on v0.1.0.0)
  - [MetiTarski](https://www.cl.cam.ac.uk/~lp15/papers/Arith/) (Tested on v2.4)

  ## Usage

  PropaFP can work as a standalone program or with GNAT Studio 2022.

  ### PropaFP as a Standalone Program

  To produce some input for PropaFP, see the [Reference](REFERENCE.md).

  #### Translator Executables

  PropaFP contains 'translator' executables, which takes some input file, transforms the VC as described above, and produces another input file for the target prover.
  The current 'translator' executables are:

  - propafp-translate-dreal      -f [smtFileContainingVC.smt2] -t [fileToWrite.smt2]
  - propafp-translate-metitarski -f [smtFileContainingVC.smt2] -t [fileToWrite.smt2]

  The propafp-translate-dreal executable can also be used for LPPaver.
  If PropaFP does not understand the VC, it writes an empty file.

  #### Runner Executables

  'Runner' executables take some input file, transform the VC as described above, and calls the prover on the transformed VC.
  'Runner' executables require the prover for each executable to be in $PATH.
  The current 'runner' executables are:

  - propafp-run-dreal      -f [smtFileContainingVC.smt2] -p [pathToDReal]
  - propafp-run-lppaver    -f [smtFileContainingVC.smt2] -p [pathToLPPaver]
  - propafp-run-metitarski -f [smtFileContainingVC.smt2] -p [pathToMetiTarski]

  To run LPPaver in a mode specialised to find counter-examples, pass the -c option.

  ### PropaFP with GNAT Studio

  For instructions to use with GNAT Studio 2022, see [sparkFiles/INSTRUCTIONS.md](sparkFiles/INSTRUCTIONS.md)

  ## Guided Example

  [A guided example of using PropaFP with GNAT Studio.](sparkFiles/EXAMPLE.md)
description-type: markdown
hash: a2f56414916164a6a48e8f2f13949ea9edf6d28c91c90224a8a3fead0addbdaa
homepage: https://github.com/rasheedja/PropaFP#readme
latest: 0.1.2.0
license-name: MPL-2.0
maintainer: jrasheed178@gmail.com
synopsis: Auto-active verification of floating-point programs
test-bench-deps:
  PropaFP: '>=0'
  QuickCheck: '>=2.14.2 && <2.15'
  aern2-mfun: '>=0.2.9 && <0.3'
  aern2-mp: '>=0.2.9.1 && <0.3'
  base: '>=4.7 && <5'
  binary: '>=0.8.8.0 && <0.9'
  bytestring: '>=0.10.12.1 && <0.11'
  collect-errors: '>=0.1.5 && <0.2'
  containers: '>=0.6.4.1 && <0.7'
  directory: '>=1.3.6.2 && <1.4'
  extra: '>=1.7.10 && <1.8'
  ghc: '>=9.0.2 && <9.1'
  mixed-types-num: '>=0.5.10 && <0.6'
  optparse-applicative: '>=0.16.1.0 && <0.17'
  process: '>=1.6.13.2 && <1.7'
  regex-tdfa: '>=1.3.1.2 && <1.4'
  scientific: '>=0.3.7.0 && <0.4'
  temporary: '>=1.3 && <1.4'
