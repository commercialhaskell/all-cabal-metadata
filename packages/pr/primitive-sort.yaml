all-versions:
- 0.1.0.0
- 0.1.1.0
- 0.1.2.0
- 0.1.2.1
- 0.1.2.2
- 0.1.2.3
- 0.1.2.4
author: Andrew Martin
basic-deps:
  base: '>=0.4.16 && <5'
  contiguous: '>=0.6 && <0.7'
  primitive: '>=0.6.4 && <0.10'
changelog: |
  # Revision history for primitive-sort

  ## 0.1.2.4 -- 2024-02-07

  * Restore import for `liftA2` that caused tests to fail for GHC 9.4.

  ## 0.1.2.3 -- 2024-02-06

  * Restore support for GHC 9.2 and GHC 9.4, which had been broken by
    a assuming that `liftA2` was available from the prelude.

  ## 0.1.2.2 -- 2024-02-02

  * Replace imports of `GHC.Prim` with `GHC.Exts` so that the dependency
    on ghc-prim can be dropped.

  ## 0.1.2.1 -- 2024-02-01

  * Updated package metadata.
changelog-type: markdown
description: "# primitive-sort\n\nSorting of contiguous data structures. Implementation
  uses mergesort\nand switches to insertion sort once the arrays are small. Some of
  the\nbenchmark results on a Intel Xeon CPU E3-1505M v5 2.80GHz (GHC 8.10.4):\n\n
  \   contiguous/Int8/unsorted/mini      time  91.59 ns  \n    contiguous/Int8/unsorted/tiny
  \     time  1.236 μs  \n    contiguous/Int8/unsorted/small     time  40.68 μs  \n
  \   contiguous/Int8/unsorted/medium    time  614.1 μs  \n    contiguous/Int8/unsorted/large
  \    time  6.580 ms  \n    contiguous/Int8/unsorted/gigantic  time  68.16 ms  \n\nResults
  may vary across processors, but you observe results that are 10x\nslower, it's probably
  an issue with the compiler, and please open an issue.\n\n## GHC Specialization Problems\n\nSadly,
  the most permissive signature for `sort` causes GHC's specialization\nto break.
  This permissive signature is:\n\n    sort :: (Contiguous arr, Element arr a, Ord
  a) => arr a -> arr a\n\nAnd the less permissive variant used by this library is:\n\n
  \   sort :: (Prim a, Ord a) => PrimArray a -> PrimArray a\n\nThe latter works nicely
  with `SPECIALIZE` and `INLINEABLE`, but the former\ndoes not work at all with these.
  The issue is believed to be related to the\nuse of an associated constraint type
  `Element`, which introduced coercions\nthat might confuse the specializer. However,
  this has not been confirmed.\n"
description-type: markdown
hash: a15e9489ad9e28839c9fa37477927060afa6f801925f567d8ccb0b8c058d250a
homepage: https://github.com/byteverse/primitive-sort
latest: 0.1.2.4
license-name: BSD-3-Clause
maintainer: amartin@layer3com.com
synopsis: Sort primitive arrays
test-bench-deps:
  HUnit: '>=0'
  QuickCheck: '>=0'
  base: '>=0'
  containers: '>=0'
  gauge: '>=0.2.5'
  primitive: '>=0'
  primitive-sort: '>=0'
  random: '>=0'
  smallcheck: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  tasty-smallcheck: '>=0'
