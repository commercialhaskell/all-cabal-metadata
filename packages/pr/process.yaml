all-versions:
- 1.0.0.0
- 1.0.1.1
- 1.0.1.2
- 1.0.1.3
- 1.0.1.4
- 1.0.1.5
- 1.1.0.0
- 1.1.0.1
- 1.1.0.2
- 1.2.0.0
- 1.2.1.0
- 1.2.2.0
- 1.2.3.0
- 1.3.0.0
- 1.4.0.0
- 1.4.1.0
- 1.4.2.0
- 1.4.3.0
- 1.5.0.0
- 1.6.0.0
- 1.6.1.0
- 1.6.2.0
- 1.6.3.0
- 1.6.4.0
- 1.6.5.0
- 1.6.5.1
- 1.6.6.0
- 1.6.7.0
- 1.6.8.0
- 1.6.8.1
- 1.6.8.2
- 1.6.9.0
- 1.6.10.0
- 1.6.11.0
- 1.6.12.0
- 1.6.13.1
- 1.6.13.2
- 1.6.14.0
- 1.6.15.0
- 1.6.16.0
- 1.6.17.0
- 1.6.18.0
- 1.6.19.0
- 1.6.20.0
- 1.6.21.0
- 1.6.22.0
- 1.6.23.0
author: ''
basic-deps:
  base: '>=4.10 && <4.21'
  deepseq: '>=1.1 && <1.6'
  directory: '>=1.1 && <1.4'
  filepath: '>=1.2 && <1.6'
  unix: '>=2.5 && <2.9'
changelog: "# Changelog for [`process` package](http://hackage.haskell.org/package/process)\n\n##
  1.6.23.0 *September 2024*\n\n* Fix command-line escaping logic on Windows when the
  command file ends with\n  a space or a dot. This is a follow-up for\n  [HSEC-2024-0003](https://github.com/haskell/security-advisories/tree/main/advisories/hackage/process/HSEC-2024-0003.md).\n*
  Migitate another manifestation of the BatBadBut vulnerability via\n  unescaped `%`
  expansions. This is another follow-up for \n  [HSEC-2024-0003](https://github.com/haskell/security-advisories/tree/main/advisories/hackage/process/HSEC-2024-0003.md).\n
  \ ([#313](https://github.com/haskell/process/issues/313))\n\n## 1.6.22.0 *August
  2024*\n\n* Allow NUL to appear in arguments under POSIX. See\n  https://github.com/haskell/process/pull/320.
  \ Thanks to @mmhat.\n\n## 1.6.21.0 *July 2024*\n\n* No longer attach finalizers
  to `Handle`s created by the\n  `System.Process.CommunicationHandle` API. Instead,
  all file descriptors are\n  manually closed by the API.\n\n  This fixes a bug in
  which a file descriptor could be closed multiple times.\n\n## 1.6.20.0 *April 2024*\n\n*
  Introduce `System.Process.CommunicationHandle`, allowing for platform-independent\n
  \ inter-process communication using `Handle`s.\n* Expose `withForkWait` and `ignoreSigPipe`
  from `System.Process.Internals`.\n* Define new internal functions `rawFdToHandle`
  and (Windows only) `rawHANDLEToHandle`,\n  exported from `System.Process.Common`.\n\n##
  1.6.19.0 *April 2024*\n\n* Adjust command-line escaping logic on Windows to ensure
  that occurrences of\n  characters with special significance to the Windows batch
  interpreter are\n  properly escaped in arguments passed to `.bat` and `.cmd` processes.\n
  \ This addresses\n  [HSEC-2024-0003](https://github.com/haskell/security-advisories/tree/main/advisories/hackage/process/HSEC-2024-0003.md).\n*
  Fix double-closing of stdin/stdout/stderr fds with POSIX `fork/exec` backend.\n
  \ [#306](https://github.com/haskell/process/issues/306)\n* Add support for `posix_spawn_file_actions_addchdir_np`\n\n##
  1.6.18.0 *September 2023*\n\n* Fix deadlock when waiting for process completion
  and process jobs [#273](https://github.com/haskell/process/issues/273)\n* Support
  `delegate_ctlc` on Windows. [#278](https://github.com/haskell/process/pull/278)\n*
  Drop support for `vfork` [#261](https://github.com/haskell/process/pull/261)\n*
  Javascript backend support\n* Fix potential segmentation fault on macOS [#295](https://github.com/haskell/process/pull/295)\n\n##
  1.6.17.0 *February 2023*\n\n* Improved documentation for the `OpenExtHandle` constructor.\n\n##
  1.6.16.0 *October 2022*\n\n* `posix_spawn`: Don't rely on addclose not failing for
  closed fds [#251](https://github.com/haskell/process/issues/251)\n* Support unix
  2.8 [#258](https://github.com/haskell/process/issues/258)\n\n## 1.6.15.0 *August
  2022*\n\n* Correct permissions on createPipe on Windows [234](https://github.com/haskell/process/pull/234)\n*
  Ensure that both ends of pipes on Windows are created in the same mode  [234](https://github.com/haskell/process/pull/234)\n*
  Fixed an issue with WINIO where giving an application an inherited pipe can cause
  it to misbehave [245](https://github.com/haskell/process/pull/245)\n* Set the encoding
  on WINIO created pipes to the local encoding as with MIO [248](https://github.com/haskell/process/pull/248)\n*
  cbits/fork-exec: Don't dup2 identical fds [#250](https://github.com/haskell/process/pull/250)\n\n##
  1.6.14.0 *February 2022*\n\n* posix: Ensure that `errno` is set after `posix_spawnp`
  fails [#228](https://github.com/haskell/process/pull/228)\n* Fix `waitForProcess`
  not closing process handles with `delegate_ctlc` [#231](https://github.com/haskell/process/pull/231)\n*
  Don't use `posix_spawn` on platforms where it does not report `ENOENT` in caes where
  the\n  requested executable does not exist [#224](https://github.com/haskell/process/issues/224)\n*
  Ensure that `find_executable` correctly-locates executables when a change in\n  working
  directory is requested [#219](https://github.com/haskell/process/issues/219)\n*
  Fix capitalization error allowing `execvpe` to be used when available.\n\n## 1.6.13.2
  *July 2021*\n\n* `posix_spawn`: Don't attempt to `dup2` identical fds [#214](https://github.com/haskell/process/pull/214)\n\n##
  1.6.13.1 *July 2021*\n\n* Patches for the previous release\n\n## 1.6.13.0 *July
  2021*\n\n* Refactoring of POSIX process logic [#208](https://github.com/haskell/process/pull/208)\n\n##
  1.6.12.0 *June 2021*\n\n* Add function `getCurrentPid` to get the currently executing
  process' ID [#205](https://github.com/haskell/process/pull/205)\n\n## 1.6.11.0 *January
  2021*\n\n* Windows: Add support for new I/O manager in GHC 8.12[#177](https://github.com/haskell/process/pull/177)\n*
  Deprecate use of `createPipeFd` in favor of `createPipe`\n* Fix MVar re-entrant
  problem on Windows with `terminateProcess` and process jobs. See [#199](https://github.com/haskell/process/pull/199)\n\n##
  1.6.10.0 *June 2020*\n\n* Give a usable buffer to `_pipe` on Windows [#182](https://github.com/haskell/process/pull/182)\n\n##
  1.6.9 *May 2020*\n\n* Windows: Fix buffer size of `QueryInformationJobObject` request
  [#176](https://github.com/haskell/process/pull/176/files)\n\n## 1.6.8.2 *March 2020*\n\n*
  Fix another process wait bug on Windows.\n\n## 1.6.8.1 *March 2020*\n\n* Fix a few
  warnings on Windows.\n\n## 1.6.8.0 *February 2020*\n\n* Fix several bugs on Windows
  where use of process jobs would result\n  in the process being prematurely terminated.
  See\n  [#168](https://github.com/haskell/process/168).\n\n## 1.6.7.0 *November 2019*\n\n*
  Fix a race condition on Windows that happens when you use process jobs and one of\n
  \ the child processes terminates but doesn't release its resources immediately.\n
  \ Control returns to the caller too soon in this scenario. See [#159](https://github.com/haskell/process/pull/159)\n\n##
  1.6.6.0 *October 2019*\n\n* Fix a potential privilege escalation issue (or, more
  precisely, privileges\n  not being dropped when this was the user's intent) where
  the groups of the\n  spawning process's user would be incorrectly retained due to
  a missing call to\n  `initgroups` [#149].\n* Bug fix: Prevent stripping undecodable
  bytes from environment variables\n  when in a non-unicode locale.\n  [#152](https://github.com/haskell/process/issues/152)\n*
  Expose `runInteractiveProcess_lock` in `System.Process.Internals`\n  [#154](https://github.com/haskell/process/pull/154)\n\n##
  1.6.5.1 *June 2019*\n\n* Version bound bumps\n* Slightly nicer error messages for
  internal errors\n\n## 1.6.5.0 *December 2018*\n\n* Bug fix: On Windows ignore ERROR_ACCESS_DENIED
  for TerminateProcess() if the process did terminate\n  [#110](https://github.com/haskell/process/issues/110)\n*
  Improve documentation of the `NoStream` data constructor\n\n## 1.6.4.0 *July 2018*\n\n*
  Bug fix: Don't leak pipes on failure\n  [#122](https://github.com/haskell/process/issues/122)\n*
  Expose `cleanupProcess` from `System.Process`\n  [#130](https://github.com/haskell/process/pull/130)\n*
  Drop support for GHC before 7.10.3\n\n## 1.6.3.0 *January 2018*\n\n* Added `getPid`
  and export of platform specific `Pid` type\n  [#109](https://github.com/haskell/process/pull/109)\n\n##
  1.6.2.0 *October 2017*\n\n* Allow async exceptions to be delivered to masked thread
  calling `waitForProcess`\n  [#101](https://github.com/haskell/process/pull/101)\n*
  Update Win32 package version to 2.6.x\n\n## 1.6.1.0 *July 2017*\n\n* Expose `CGid`,
  `GroupID`, and `UserID` from `System.Process.Internals`\n  [#90](https://github.com/haskell/process/issues/90)\n
  \ [#91](https://github.com/haskell/process/pull/91)\n\n## 1.6.0.0 *February 2017*\n\n*
  Fix: waitForProcess race condition\n  [#46](https://github.com/haskell/process/issues/46)\n
  \ [#58](https://github.com/haskell/process/pull/58)\n\n## 1.5.0.0 *February 2017*\n\n*
  Bug fix: Don't close already closed pipes\n  [#81](https://github.com/haskell/process/pull/81)\n*
  Relax version bounds of Win32 to allow 2.5.\n* Add support for monitoring process
  tree for termination with the parameter `use_process_jobs`\n  in `CreateProcess`
  on Windows. Also added a function `terminateJob` to kill entire process tree.\n\n##
  1.4.3.0 *December 2016*\n\n* New exposed `withCreateProcess`\n* Derive `Show` and
  `Eq` for `CreateProcess`, `CmdSpec`, and `StdStream`\n\n## 1.4.2.0 *January 2016*\n\n*
  Added `createPipeFD` [#52](https://github.com/haskell/process/pull/52)\n    * New
  function `createPipeFD` added which returns a POSIX File Descriptor (CInt)\n      instead
  of a GHC Handle to a pipe\n\n## 1.4.1.0 *November 2015*\n\n* Use less CPP [#47](https://github.com/haskell/process/pull/47)\n
  \   * Refactor to have separate Windows and POSIX modules internally\n    * Remove
  the broken non-GHC code paths\n\n## 1.4.0.0 *November 2015*\n\n* Added `child_user`
  and `child_group` to `CreateProcess` for unix. [#45](https://github.com/haskell/process/pull/45)\n\n##
  1.3.0.0 *August 2015*\n\n* Add `StdStream(NoStream)` to have standard handles closed.
  [#13](https://github.com/haskell/process/pull/13)\n* Support for Windows `DETACHED_PROCESS`
  and `setsid` [#32](https://github.com/haskell/process/issues/32)\n* Support for
  Windows `CREATE_NEW_CONSOLE` [#38](https://github.com/haskell/process/issues/38)\n\n##
  1.2.3.0 *March 2015*\n\n  * [Meaningful error message when exe not found on close\\_fds
  is\n  True](https://ghc.haskell.org/trac/ghc/ticket/3649#comment:10)\n\n  * New
  functions `readCreateProcess` and `readCreateProcessWithExitCode`\n\n## 1.2.2.0
  \ *Jan 2015*\n\n  * Fix delegated CTRL-C handling in `createProcess` in case of
  failed\n    process creation. See [issue #15](https://github.com/haskell/process/issues/15)\n
  \   for more details.\n\n  * `waitpid` on child PID after pre-exec failure in child
  to prevent zombies.\n    See also [issue #14](https://github.com/haskell/process/issues/14).\n\n##
  1.2.1.0  *Dec 2014*\n\n  * Add support for `base-4.8.0.0`\n\n  * Remove Hugs98 specific
  code\n\n  * New `IsString CmdSpec` instance\n\n  * Expose documentation for `System.Process.Internals`\n\n
  \ * With GHC 7.10, `System.Cmd` and `System.Process` are now `Safe`\n    (when compiled
  with older GHC versions they are just `Trustworthy`)\n\n  * Expose `createProcess_`
  function, and document behavior of `UseHandle` for\n    `createProcess`. See [issue
  #2](https://github.com/haskell/process/issues/2).\n\n  * New `System.Process.createPipe`
  operation.\n    See also [GHC #8943](https://ghc.haskell.org/trac/ghc/ticket/8943)\n\n##
  1.2.0.0  *Dec 2013*\n\n  * Update to Cabal 1.10 format\n  * Remove NHC specific
  code\n  * Add support for `base-4.7.0.0`\n  * Improve `showCommandForUser` to reduce
  redundant quoting\n  * New functions `callProcess`, `callCommand`, `spawnProcess`
  and `spawnCommand`\n  * Implement WCE handling according to http://www.cons.org/cracauer/sigint.html\n
  \ * New `delegate_ctlc` field in `CreateProcess` for WCE handling\n  * Use `ExitFailure
  (-signum)` on Unix when a proc is terminated due to\n    a signal.\n  * Deprecate
  `module System.Cmd`\n  * On non-Windows, the child thread now comunicates any errors
  back\n    to the parent thread via pipes.\n  * Fix deadlocks in `readProcess` and
  `readProcessWithExitCode`\n"
changelog-type: markdown
description: |-
  This package contains libraries for dealing with system processes.

  The typed-process package is a more recent take on a process API,
  which uses this package internally. It features better binary
  support, easier concurrency, and a more composable API. You can
  read more about it at
  <https://github.com/fpco/typed-process/#readme>.
description-type: haddock
hash: 684028fb5ac3d1c7657fe516f2a442d95a53ae2fcf6f6151544f3ed5289f6320
homepage: ''
latest: 1.6.23.0
license-name: BSD-3-Clause
maintainer: libraries@haskell.org
synopsis: Process libraries
test-bench-deps: {}
