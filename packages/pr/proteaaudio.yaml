homepage: ''
changelog-type: markdown
hash: 981d0982f212695c5a0db82b8cedc5d44eb47ad2e6a615b9fe270dbe54d5402e
test-bench-deps: {}
maintainer: csaba.hruska@gmail.com
synopsis: Simple audio library for Windows, Linux, OSX.
changelog: |
  # 0.9.3
  - apply migration to GHC 9.4.* for Windows (see https://gitlab.haskell.org/ghc/ghc/-/issues/22738)

  # 0.9.2
  - fix a sample format conversion bug that caused pitch problems in `sampleFromMemoryPcm`

  # 0.9.1
  - fix a Cabal C/C++ compiler flag handling bug, now should compile with GHC 8.10 and above also.

  # 0.9.0
  - rename `soundActive` to `soundActiveAll`
  - `soundActive` now queries a specific sound

  # 0.8.1
  - update RtAudio to 5.1.0
  - update stb_vorbis to v1.19
  - add sampleDestroy
  - add soundPlayOn and soundLoopOn
  - fix: generate unique handles for Sample and Sound types

  # 0.8.0
  - fix: distinct data and playback handles
  - introduce Sound handle type, an abstraction for playback audio track
  - soundLoop, soundPlay return a Sound handle
  - soundUpdate, soundStop take a Sound handle parameter

  # 0.7.1.0
  - add sampleFromMemoryPcm
  - update stb_vorbis to v1.14

  # 0.7.0.1
  - better haddock

  # 0.7.0
  - use ByteString for in-memory sample loading
  - fix: c++ mixer init caused segfaults sometimes
  - use PulseAudio backend on Linux
basic-deps:
  bytestring: '>=0.10 && <0.12'
  base: ==4.*
  filepath: '>=1.4 && <2'
  proteaaudio: -any
all-versions:
- 0.6.2
- 0.6.3
- 0.6.4
- 0.6.5
- 0.7.0
- 0.7.0.1
- 0.7.1.0
- 0.8.0
- 0.9.0
- 0.9.1
- 0.9.2
- 0.9.3
author: Csaba Hruska
latest: 0.9.3
description-type: markdown
description: |
  # Overview

  ProteaAudio is a stereo audio mixer/playback library for

  - Linux *(PulseAudio)*
  - MacOS *(CoreAudio)*
  - Windows *(DirectSound)*

  Supported audio formats:
  - Wav
  - Ogg
  - Raw linear PCM

  Samples can be loaded from file or memory.

  # Setup

  On Linux you need to install the pulse audio library:
  ```
  sudo apt install libpulse-dev
  ```

  # Build

  ### Stack

  ```bash
  stack setup
  stack build
  ```

  ### Nix:

  ``` bash
  stack --nix build
  ```

  # Example

  ```haskell
  import Control.Monad
  import System.Environment
  import System.FilePath
  import qualified Data.ByteString as SB
  import Control.Concurrent

  import Sound.ProteaAudio

  waitPlayback = do
    n <- soundActiveAll
    when  (n > 0) $ do
      threadDelay oneSec
      waitPlayback

  oneSec :: Int
  oneSec = 1000000 -- micro seconds

  main = do
    args <- getArgs
    filename <- case args of
      a : _ -> pure a
      _ -> fail "usage: proteaaudio-play SAMPLE_FILE_NAME"

    result <- initAudio 64 44100 1024 -- max channels, mixing frequency, mixing buffer size
    unless result $ fail "failed to initialize the audio system"

    -- (A) load sample from file
    sampleA <- sampleFromFile filename 1.0 -- volume

    -- start two sound tracks with shared sample data
    sndTrkA <- soundPlay sampleA 1 1 0 1 -- left volume, right volume, time difference between left and right, pitch factor for playback
    threadDelay oneSec -- wait 1 sec
    sndTrkB <- soundPlay sampleA 1 1 0 1 -- left volume, right volume, time difference between left and right, pitch factor for playback
    soundActive sndTrkB >>= print
    -- play 3 sec
    threadDelay $ 3 * oneSec
    soundStop sndTrkB
    soundActive sndTrkB >>= print
    -- wait sndTrkA to finish
    waitPlayback

    -- (B) load from memory buffer
    buffer <- SB.readFile filename
    sampleB <- case takeExtension filename of
      ".ogg" -> sampleFromMemoryOgg buffer 1.0
      ".wav" -> sampleFromMemoryWav buffer 1.0

    soundPlay sampleB 1 1 0 1 -- left volume, right volume, time difference between left and right, pitch factor for playback
    waitPlayback

    sampleDestroy sampleB
    soundPlay sampleB 1 1 0 1 -- we have invalidated the handle; nothing should happen now
    waitPlayback

    finishAudio
  ```
license-name: BSD-3-Clause
