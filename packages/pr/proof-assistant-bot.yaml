all-versions:
- 0.2.0
- 0.2.1
- 0.2.2
author: Andrey Prokopenko
basic-deps:
  Agda: '>=2.6.4'
  async: '>=0'
  base: <4.18
  bytestring: '>=0'
  dhall: '>=0'
  directory: '>=0'
  filepath: '>=0'
  mtl: '>=2.3.1'
  process: '>=0'
  proof-assistant-bot: '>=0'
  rzk: '>=0'
  stm: '>=0'
  telegram-bot-api: '>=0'
  telegram-bot-simple: ==0.13
  text: '>=0'
  unix: '>=0'
  unordered-containers: '>=0'
changelog: "# Revision history for proof-assistant-bot\n\n## 0.2.2 -- 2024-02-07\n\n-
  Support GHC 9.4 (see [#43](https://github.com/swamp-agr/proof-assistant-bot/pull/43)).\n-
  Also various dependencies versions bumps:\n  - base-4.17\n  - Agda-2.6.4\n  - mtl-2.3.1\n
  \ - rzk-0.7\n  - telegram-bot-simple-0.13\n\n## 0.2.1 -- 2023-02-07\n\n- Agda bumped
  to 2.6.3, telegram-bot-simple bumped to 0.9 (see [#29](https://github.com/swamp-agr/proof-assistant-bot/pull/29)).\n\n##
  0.2.0 -- 2022-12-10 \n\n- Import Agda primitives for every `/(re)load` (see [#21](https://github.com/swamp-agr/proof-assistant-bot/pull/21));\n-
  Increase timeout for Agda to `60s` (see [#20](https://github.com/swamp-agr/proof-assistant-bot/pull/20));\n-
  Fix replies in topics (see [#17](https://github.com/swamp-agr/proof-assistant-bot/pull/17),
  [#18](https://github.com/swamp-agr/proof-assistant-bot/pull/18), [#19](https://github.com/swamp-agr/proof-assistant-bot/pull/19));\n-
  Rzk support (see [#15](https://github.com/swamp-agr/proof-assistant-bot/pull/15));\n-
  Arend support (see [#13](https://github.com/swamp-agr/proof-assistant-bot/pull/13),
  [#14](https://github.com/swamp-agr/proof-assistant-bot/pull/14));\n- Lean 3 support
  (see [#10](https://github.com/swamp-agr/proof-assistant-bot/pull/10), [#11](https://github.com/swamp-agr/proof-assistant-bot/pull/11),
  [#12](https://github.com/swamp-agr/proof-assistant-bot/pull/12));\n- Set default
  timeout for CLI to `5s` (see [#9](https://github.com/swamp-agr/proof-assistant-bot/pull/9));\n-
  Idris 2 support (see [#7](https://github.com/swamp-agr/proof-assistant-bot/pull/7),
  [#8]([#7](https://github.com/swamp-agr/proof-assistant-bot/pull/7)));\n- Increase
  allocation limit for Agda (see [#3](https://github.com/swamp-agr/proof-assistant-bot/pull/3));\n-
  Add maintenance scripts for `proof-assistant-bot` executable (see [#1](https://github.com/swamp-agr/proof-assistant-bot/pull/1));\n\n##
  0.1.0 -- 2022-12-03 (not yet released on Hackage)\n\n- First version. Released on
  an unsuspecting world.\n"
changelog-type: markdown
description: "# Proof Assistant Bot\n\n1. [Description](#descriprion)\n2. [Installation](#installation)\n
  \   1. [Coq](#coq)\n    2. [Agda](#agda)\n    3. [Idris 2](#idris-2)\n    4. [Lean](#lean)\n
  \   5. [Arend](#arend)\n    6. [Rzk](#rzk)\n    7. [Alloy](#alloy)\n3. [Usage](#usage)\n4.
  [Available instances](#available-instances)\n5. [Acknowledgements](#acknowledgements)\n\n##
  Description\n\nThis bot provides limited Telegram interfaces to following proof
  assistant programs (in order of implementation):\n\n- Coq\n- Agda\n- Idris 2\n-
  Lean\n- Arend\n- Rzk\n\n## Installation\n\n1. Bot could be built via following commands:\n\n```bash\ncabal
  update\ncabal build\ncabal install --overwrite-policy=always\n```\n\n2. To launch
  bot you need to set environmental variables, see `./config/settings.dhall` for more
  details.\n\nOne of them is `PROOF_ASSISTANT_BOT_TOKEN`. Obtain it via `@BotFather`
  and set it:\n\n```\nexport PROOF_ASSISTANT_BOT_TOKEN=\"...\"\n```\n\n3. Another
  environmental variable that unfortunately needed is `NIX_PROFILE`. Please add it
  as \n\n```\nexport NIX_PROFILE=\"$HOME/.nix-profile\"\n```\n\n### Coq\n\n1. Install
  `opam >= 2.1.0`, e.g. [from here](https://ocaml.org/docs/up-and-running#installation-for-unix).\n\n```bash\ncd
  $HOME\nopam --version\n2.1.3\n```\n\n2. Install `Coq`.\n\n```bash\ncd $HOME\nopam
  init\neval $(opam env)\nopam pin add coq 8.16.1\n```\n\n3. Locate `coqtop` and set
  enviromental variable. Should be similar to:\n\n```\nexport COQ_BIN_PATH=\"$HOME/.opam/default/bin/coqtop\"\n```\n\n###
  Agda\n\nWe do not need to worry about `Agda` since it is included in package dependencies.
  It will be installed automatically. Meantime, Agda standard library should be installed
  manually.\n\n1. Get `agda-stdlib` from [Github](https://github.com/agda/agda-stdlib/releases/tag/v1.7.1).\n\n2.
  Unpack archive.\n\n```\nmkdir -p $PROOF_ASSISTANT_BOT_DIR/agda\ncp agda-stdlib-1.7.1.tar.gz
  $PROOF_ASSISTANT_BOT_DIR/agda\ncd $PROOF_ASSISTANT_BOT_DIR/agda\ntar -xzvf agda-stdlib-1.7.1.tar.gz\nexport
  AGDA_STDLIB_PATH=$PROOF_ASSISTANT_BOT_DIR/agda/agda-stdlib-1.7.1\n```\n\n3. Create
  file `$HOME/.agda/defaults` with following content:\n\n```\nstandard-library\n```\n\n4.
  Create file `$HOME/.agda/libraries` with following content:\n\n```\n$AGDA_STDLIB_PATH/standard-library.agda-lib\n```\n\n###
  Idris 2\n\n1. Get `nix` from [nixos.org](https://nixos.org/download.html#download-nix).\n\n2.
  Install `idris2` via `nix`:\n\n```bash\nnix-env -i idris2\n```\n\n3. Set environmental
  variable:\n\n```bash\nexport IDRIS2_BIN_PATH=\"$HOME/.nix-profile/bin/idris2\"\n```\n\n###
  Lean\n\n1. Get `nix` from [nixos.org](https://nixos.org/download.html#download-nix).\n\n2.
  Install `lean` via `nix`:\n\n```bash\nnix-env -i lean\n```\n\n3. Install `leanproject`
  via `nix`:\n\n```bash\nnix-env -i mathlibtools\n```\n\n4. Run `leanproject new lean`.\n\n5.
  Set `LEAN_BIN_PATH` environmental variable:\n\n```bash\nexport LEAN_BIN_PATH=\"$HOME/.nix-profile/bin/lean\"\n```\n\n6.
  Set `LEAN_PROJECT_PATH` to the newly created project directory.\n\n### Arend\n\n1.
  Get `nix` from [nixos.org](https://nixos.org/download.html#download-nix).\n\n2.
  Get `java` and `openjdk17` via `nix`:\n\n```bash\nnix-env -i openjdk-17.0.4+8\n```\n\n3.
  Set `JAVA_HOME` environment variable to your openjdk location. You can use `readlink
  $HOME/.nix-profile/bin/java` and strip `/bin/java` from the end.\n\n4. Create project
  directory to store arend projects (for different Telegram chats) \nand set `AREND_ROOT_PROJECT_DIR`.\n\n5.
  Get Arend standard library from [the official site](https://arend-lang.github.io/download#standard-library)
  and store in `${AREND_ROOT_PROJECT_DIR}/libs`.\n\n6. Point `AREND_STDLIB_PATH` environment
  variable to the same location as `AREND_ROOT_PROJECT_DIR`.\n\n7. Download [`Arend.jar`](https://github.com/JetBrains/Arend/releases/latest/download/Arend.jar)
  and set `AREND_PATH` environment variable to its location, e.g.\n\n```bash\nexport
  AREND_PATH=\"${AREND_ROOT_PROJECT_DIR}/Arend.jar\"\n```\n\n### Rzk\n\nNo actions
  required. See `cabal.project` for more details.\n\n### Alloy 6 / Alloy CLI Wrapper\n\nYou
  can read about CLI Wrapper here: https://github.com/AlloyTools/org.alloytools.alloy/issues/211\n\n1.
  Get `nix` from [nixos.org](https://nixos.org/download.html#download-nix).\n\n2.
  Get `java` and `openjdk17` via `nix`:\n\n```bash\nnix-env -i openjdk-17.0.4+8\n```\n\n3.
  Set `JAVA_HOME` environment variable to your openjdk location. You can use `readlink
  $HOME/.nix-profile/bin/java` and strip `/bin/java` from the end.\n\n4. Get `alloy6`
  via `nix`:\n\n```bash\nnix-env -i alloy6\n```\n\n5. Create project directory to
  store Alloy projects (for different telegram chats) and set `ALLOY_PROJECT_DIR`.\n\n6.
  Create directory for Alloy CLI wrapper and prepare Alloy CLI Wrapper:\n\n```bash\nmkdir
  -p $ALLOY_PROJECT_DIR/bin\ncd $ALLOY_PROJECT_DIR\n# Download Alloy CLI Wrapper\ncurl
  https://gist.githubusercontent.com/swamp-agr/560f0d9bf8dc034f99d6055a5a197285/raw/5b547616063ba834bfa2987bc1eb539f1ec8088d/Main.java
  > bin/Main.java\njavac -cp \"$NIX_PROFILE/share/alloy/*\" -Xlint:all bin/Main.java\n#
  Test: should be empty output and exit code 0\njava -cp $NIX_PROFILE/share/alloy/alloy6.jar:$ALLOY_PROJECT_DIR/bin
  Main\n```\n\n7. Set up `graphviz` and `imagemagick` for generating plots based on
  Alloy CLI Wrapper output:\n\n```bash\nnix-env -i graphviz imagemagick\n```\n\n8.
  Set `ALLOY_PATH` environment variable to `$NIX_PROFILE/share/alloy/alloy6.jar`.\n\n##
  Usage\n\n- Coq supports only typecheck of the user input via `/coq` command. Example:\n\n```coq\n/coq
  Inductive day : Type :=\n  | monday\n  | tuesday\n  | wednesday\n  | thursday\n
  \ | friday\n  | saturday\n  | sunday.\n\nDefinition next_weekday (d:day) : day :=\n
  \ match d with\n  | monday => tuesday\n  | tuesday => wednesday\n  | wednesday =>
  thursday\n  | thursday => friday\n  | friday => monday\n  | saturday => monday\n
  \ | sunday => monday\n  end.\n\nCompute (next_weekday friday).\n\nCompute (next_weekday
  (next_weekday saturday)).\n\nExample test_next_weekday:\n  (next_weekday (next_weekday
  saturday)) = tuesday.\n\nProof. simpl. reflexivity. Qed.\n```\n\n- Agda is available
  via `/agda` command. Bot supports several subcommands for Agda:\n    - `/agda /load
  <input>`. E.g. \n\n    ```agda\n    /agda /load import Relation.Binary.PropositionalEquality
  as Eq\n    open Eq using (_≡_; refl)\n    open Eq.≡-Reasoning using (begin_; _≡⟨⟩_;
  _∎)\n    \n    data ℕ : Set where\n      zero : ℕ\n      suc  : ℕ → ℕ\n    \n    {-#
  BUILTIN NATURAL ℕ #-}\n    \n    _+_ : ℕ → ℕ → ℕ\n    zero + n = n\n    (suc m)
  + n = suc (m + n)\n    \n    _ : 2 + 3 ≡ 5\n    _ =\n      begin\n        2 + 3\n
  \     ≡⟨⟩    -- is shorthand for\n        (suc (suc zero)) + (suc (suc (suc zero)))\n
  \     ≡⟨⟩    -- inductive case\n        suc ((suc zero) + (suc (suc (suc zero))))\n
  \     ≡⟨⟩    -- inductive case\n        suc (suc (zero + (suc (suc (suc zero)))))\n
  \     ≡⟨⟩    -- base case\n        suc (suc (suc (suc (suc zero))))\n      ≡⟨⟩    --
  is longhand for\n        5\n      ∎\n    ```\n\n    - `/agda /reload`\n    - `/agda
  /typeOf <expr>`. E.g. `/agda /typeOf suc`.\n    - `/agda <expr>`. E.g. `/agda suc
  zero + suc zero`.\n\n- Idris 2 via `/idris2` command. Bot supports several subcommands
  for Idris 2:\n    - `/idris2 /load <input>`. E.g.\n\n    ```idris\n    /idris2 /load
  module Main\n    \n    import System.File.ReadWrite\n    \n    tryPrint : Either
  FileError String -> IO ()\n    tryPrint (Left _) = putStrLn \"error\"\n    tryPrint
  (Right r) = putStrLn r\n    \n    main : IO ()\n    main = do c <- readFile \"hello.idr\"\n
  \             tryPrint c\n    ```\n\n    - `/idris2 /typeOf <expr>`. E.g. `/idris2
  /typeOf Nat`.\n    - `/idris2 <expr>`. E.g. `/idris2 2 + 3`.\n    \n- Lean is available
  via `/lean` command. Typecheck supported for the user input. Only several modes
  were tested (calc mode, conv mode, simplifier).\n\n    - Example 1: \n    \n    ```lean\n
  \   /lean import data.nat.basic\n    \n    variables (a b c d e : ℕ)\n    variable
  h1 : a = b\n    variable h2 : b = c + 1\n    variable h3 : c = d\n    variable h4
  : e = 1 + d\n    \n    theorem T : a = e :=\n    calc\n      a     = b      : h1\n
  \       ... = c + 1  : h2\n        ... = d + 1  : congr_arg _ h3\n        ... =
  1 + d  : add_comm d (1 : ℕ)\n        ... =  e     : eq.symm h4\n    ```\n\n    -
  Example 2:\n    \n    ```lean\n    /lean import topology.basic\n    \n    #check
  topological_space\n    ```\n\n    - Example 3:\n    \n    ```lean\n    /lean import
  algebra.group.defs\n    \n    variables (G : Type) [group G] (a b c : G)\n    \n
  \   example : a * a⁻¹ * 1 * b = b * c * c⁻¹ :=\n    begin\n      simp\n    end\n
  \   ```\n\n- Arend is available via `/arend` command. Only typecheck supported.\n\n
  \   - Example: \n    \n    ```arend\n    /arend \\func f => 0\n    ```\n    \n-
  Rzk is available via `/rzk` command. Typechecker supported for every language.\n\n
  \   - Example:\n\n    ```rzk\n    /rzk  #lang rzk-1\n    \n    #def prod : (A :
  U) -> (B : U) -> U\n      := \\A -> \\B -> ∑ (x : A), B\n    \n    #def isweq :
  (A : U) -> (B : U) -> (f : (_ : A) -> B) -> U\n      := \\A -> \\B -> \\f ->\n            ∑
  (g : (_ : B) -> A),\n              prod ((x : A) -> g (f x) =_{A} x)\n                   ((y
  : B) -> f (g y) =_{B} y)\n    \n    #def weq : (A : U) -> (B : U) -> U\n      :=
  \\A -> \\B -> ∑ (f : (_ : A) -> B), isweq A B f\n    \n    #def Theorem-4.1\n      :
  (I : CUBE)\n      -> (psi : (t : I) -> TOPE)\n      -> (phi : {(t : I) | psi t}
  -> TOPE)\n      -> (X : U)\n      -> (Y : <{t : I | psi t} -> (x : X) -> U >)\n
  \     -> (f : <{t : I | phi t} -> (x : X) -> Y t x >)\n      -> weq <{t : I | psi
  t} -> (x : X)          -> Y t x [phi t |-> f t]>\n             ((x : X)         ->
  <{t : I | psi t} -> Y t x [phi t |-> f t x]>)\n      := \\I -> \\psi -> \\phi ->
  \\X -> \\Y -> \\f ->\n        (\\k -> \\x -> \\t -> k t x,\n          (\\k -> \\{t
  : I | psi t} -> \\x -> (k x) t,\n            (\\k -> refl_{k}, \\k -> refl_{k})))\n
  \   \n    #def Theorem-4.2_uncurry_ext\n      : (I : CUBE)\n      -> (J : CUBE)\n
  \     -> (psi : (t : I) -> TOPE)\n      -> (zeta : (s : J) -> TOPE)\n      -> (X
  : <{t : I | psi t} -> <{s : J | zeta s} -> U> >)\n      -> (chi : {(t : I) | psi
  t} -> TOPE)\n      -> (phi : {(s : J) | zeta s} -> TOPE)\n      -> (f : <{(t, s)
  : I * J | psi t /\\ zeta s} -> X t s >)\n      -> (_ : <{t : I | psi t}\n                ->
  <{s : J | zeta s}\n                     -> X t s [chi s |-> f (t, s)]>\n                   [phi
  t |-> \\s -> f (t, s)]>)\n      -> <{(t, s) : I * J | psi t /\\ zeta s}\n            ->
  X t s [(phi t /\\ zeta s) \\/ (psi t /\\ chi s) |-> f (t, s)]>\n      := \\I ->
  \\J -> \\psi -> \\zeta -> \\X -> \\chi -> \\phi -> \\f ->\n        \\k -> \\(t,
  s) -> k t s\n    ```\n\n- Alloy is available via `/alloy` command.\n\n    - Example:\n\n
  \   ```alloy\n    /alloy open util/ordering[Id]\n\n    sig Node {\n     id : one
  Id,\n     succ : one Node,\n     var inbox : set Id,\n     var outbox : set Id\n
  \   } \n    \n    sig Id {}\n    \n    fact ring {\n     all i : Id | lone id.i\n
  \    all n : Node | Node in n.^succ\n    }\n    \n    var sig elected in Node {}\n
  \   \n    fact elected {\n     always {\n      elected = {n : Node | once (n.id
  in n.inbox)}\n     }\n    }\n    \n    enum Event { Send, Compute }\n    \n    pred
  send [n : Node] {\n     some i : n.outbox {\n      n.outbox' = n.outbox - i\n      n.succ.inbox'
  = n.succ.inbox + i\n     }\n     all m : Node - n.succ | m.inbox' = m.inbox\n     all
  m : Node - n | m.outbox' = m.outbox\n    }\n    \n    fun send : Event -> Node {\n
  \    Send -> { n : Node | send[n] }\n    }\n    \n    pred compute [n : Node] {\n
  \    some i : n.inbox {\n      n.inbox' = n.inbox - i\n      n.outbox' = n.outbox
  + (i - n.id.*(~next))\n     }\n     all m : Node - n | m.inbox' = m.inbox\n     all
  m : Node - n | m.outbox' = m.outbox\n    }\n    \n    fun compute : Event -> Node
  {\n     Compute -> { n : Node | compute[n] }\n    }\n    \n    fun events : set
  Event {\n     (send+compute).Node\n    }\n    \n    pred skip {\n     inbox' = inbox\n
  \    outbox' = outbox\n    }\n    \n    fact init {\n     no inbox\n     outbox
  = id\n    }\n    \n    fact behaviour {\n     always (skip or some n : Node | send[n]
  or compute[n])\n    }\n    \n    \n    run {} for 4 but exactly 4 Node, 10 steps\n
  \   run example {eventually some elected} for 3 but exactly 3 Node, 6 steps\n    \n
  \   assert safety {\n     always lone elected\n    }\n    check safety for 3 but
  15 steps\n    \n    \n    pred sendEnabled [n : Node] {\n     some n.outbox\n    }\n
  \   \n    pred computeEnabled [n : Node] {\n     some n.inbox\n    }\n    \n    pred
  fairness {\n     always (all n : Node | (always sendEnabled[n] implies eventually
  send[n]))\n     always (all n : Node | (always computeEnabled[n] implies eventually
  compute[n]))\n    }\n    \n    assert liveness {\n     fairness and some Node implies
  eventually some elected\n    }\n    check liveness for 3\n    ```\n\n    - As result
  you can see:\n    \n    ![Alloy temporal model instance with two different states](https://raw.githubusercontent.com/swamp-agr/proof-assistant-bot/master/resources/alloy-repsonse.gif)\n\n##
  Available instances\n\n1. [@ProofBot](https://t.me/ProofAssistantBot) (online)\n2.
  [@ProofDebugBot](https://t.me/ProofDebugBot) (for debug purpose, offline most of
  the time)\n\n## Acknowledgements\n\n- PLTT Community\n- Nikolay Kudasov\n- Andrey
  Borzenkov\n- Matúš Tejiščák\n- My wife\n"
description-type: markdown
hash: ea28be283584ad0a6b12e3a3139149fc3119b62252448c1f54c96922dfd8c95b
homepage: https://github.com/swamp-agr/proof-assistant-bot/
latest: 0.2.2
license-name: MIT
maintainer: persiantiger@yandex.ru
synopsis: Telegram bot for proof assistants
test-bench-deps: {}
