homepage: https://github.com/bergey/preql#readme
changelog-type: markdown
hash: 84d159cb3e80009fd21f2eab9fbeeca6f172cdf3af40c78b4513055c9660dabe
test-bench-deps:
  bytestring: '>=0.10.10.0'
  base: '>=4.13.0.0 && <5.0'
  time: '>=1.9.3'
  bytestring-strict-builder: '>=0.4.5.3'
  tasty-hedgehog: '>=1.0'
  vector-sized: '>=1.4.1'
  postgresql-libpq: '>=0.9.4.2'
  unordered-containers: -any
  text: '>=1.2.3.2'
  uuid: '>=1.3.13'
  syb: '>=0.7.1'
  criterion: -any
  hedgehog: '>=1.0.3'
  array: '>=0.5.4.0'
  th-lift-instances: '>=0.1.17'
  containers: '>=0.6.2.1'
  postgresql-binary: '>=0.12.2'
  generic-random: -any
  contravariant: '>=1.5.2'
  preql: -any
  mtl: '>=2.2.2'
  binary-parser: '>=0.5.6'
  tasty-hunit: '>=0.10.0'
  transformers: '>=0.5.6.2'
  tasty: '>=1.2.3'
  deepseq: -any
  scientific: '>=0.3.6.2'
  aeson: '>=1.4.7.1'
  template-haskell: '>=2.15.0.0'
  vector: '>=0.12.1.2'
maintainer: bergey@teallabs.org
synopsis: safe PostgreSQL queries using Quasiquoters
changelog: |
  # 0.6 (2021-07-31)

  - decode array types
  - decode composite types with `Tuple` newtype
  - cache OID lookups

  # 0.5 (2021-01-10)

  - fix `deriveFromSql` which was completely unusable
  - add benchmark / exe for speeed testing
  - 3x improvement in decoding speed for this benchmark

  # 0.4 (2021-01-07)

  - `select` quasiquoter that validates syntax
  - tag number of columns consumed in `RowDecoder` type
  - when decoder & number of returned columns are both known, ensure they match

  # 0.3 (2020-06-18)

  - lookup types by name when OID is not known statically
  - specify isolation level when running a transaction
  - stop trying to fake nested transactions
  - provide direct access to a Connection when that control is needed

  # 0.2 (2020-03-31)

  - now we have documentation
  - rearrange some code, re-export modules to support docs

  # 0.1 (2020-02-29)

  0.1 highlights include:

  - binary wire format
  - check that Postgres sent expected type before decoding
  - Quasiquoter supports mixing numbered & antiquoted params
basic-deps:
  bytestring: '>=0.10.10.0'
  base: '>=4.13.0.0 && <5.0'
  time: '>=1.9.3'
  bytestring-strict-builder: '>=0.4.5.3'
  vector-sized: '>=1.4.1'
  postgresql-libpq: '>=0.9.4.2'
  unordered-containers: -any
  text: '>=1.2.3.2'
  uuid: '>=1.3.13'
  syb: '>=0.7.1'
  array: '>=0.5.4.0'
  th-lift-instances: '>=0.1.17'
  postgresql-binary: '>=0.12.2'
  contravariant: '>=1.5.2'
  mtl: '>=2.2.2'
  binary-parser: '>=0.5.6'
  transformers: '>=0.5.6.2'
  scientific: '>=0.3.6.2'
  aeson: '>=1.4.7.1'
  template-haskell: '>=2.15.0.0'
  vector: '>=0.12.1.2'
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- '0.5'
- '0.6'
author: Daniel Bergey
latest: '0.6'
description-type: haddock
description: |
  Before you Post(gres)QL, preql.

  @preql@ provides an effect type class `SQL`, a `select` quasiquoter
  that checks SQL syntax at compile time, and a `sql` quasiquoter that
  supports variable antiquotes, but does not attempt syntax
  validation.

  For more details, read
  the [quickstart](https://github.com/bergey/preql#quickstart)
  or the [vision](https://github.com/bergey/preql#vision-parsing-sql-in-haskell-quasiquotes)

  Most applications will want to import the top-level module @Preql@.  When writing @SQL@
  instances or your own higher-level abstractions, you may want the lower-level,
  IO-specific functions in @Preql.Wire@, not all of which are re-exported from @Preql@.
license-name: BSD-3-Clause
