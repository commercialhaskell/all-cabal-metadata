all-versions:
- 0.1.0
author: Michael Klein
basic-deps:
  base: '>=4.7 && <5'
  ghc-prim: '>=0.3.1.0'
  spoon: '>=0.3'
changelog: ''
changelog-type: ''
description: "#Prim-Spoon\n\n[![Build Status](https://travis-ci.org/michaeljklein/prim-spoon.png)](https://travis-ci.org/michaeljklein/prim-spoon)\n\nThis
  is a microproject for the sole purpose of having a high-performance \nversion of
  `teaspoon` from [Control.Spoon](http://hackage.haskell.org/package/spoon-0.3.1),
  using primops.\nWhile it is unsafe, it is as safe as `catch#` and `seq#` from [GHC.Prim](https://hackage.haskell.org/package/ghc-prim-0.4.0.0/candidate/docs/GHC-Prim.html).\n(I'd
  look into how safe those are, but they're hidden in GHC's source and that _really_
  seems like overkill.)\n\nCurrent [benchmarks](https://rawgit.com/michaeljklein/prim-spoon/master/benchmarks.html)\nsuggest
  that `primspoon` takes about 3x as long as a function call on non-error \nthrowing
  values and about 5x as long to catch an error and return `Nothing`. \nThis is an
  improvment over `teaspoon`, which takes about 4x as long as a\nfunction call on
  a non-error value and about 21x to catch an error.\n\nWhy bother? Three reasons:
  \n\n1. This is my first experience with digging into primops in Haskell for performance,
  and it was a good exercise.\n2. I had begun to roll my own solution before I found
  `Control.Spoon` and wanted to benchmark several different solutions (for example,
  `makeStableName`).\n3. I was curious how `unsafePerformIO` affects performance.
  It turns out that it takes longer than I expected, but it makes some sense as it's
  not the best thing to spend time optimizing.\n"
description-type: markdown
hash: d19a413932f2e84893c8a958435569927c99730b5e7952a8b47b7aacc6b0bed8
homepage: https://github.com/michaeljklein/prim-spoon
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: Michael Klein <lambdamichael@gmail.com>
synopsis: Catch errors thrown from pure computations using primops.
test-bench-deps:
  HUnit: '>=1.2.5.2'
  QuickCheck: '>=2.7.6'
  base: '>=0'
  criterion: '>=1.1.0.0 && <1.2.0.0'
  ghc-prim: '>=0.3.1.0'
  prim-spoon: '>=0'
  spoon: '>=0.3.1'
