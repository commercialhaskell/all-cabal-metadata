all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.1.0
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.0.1
- 0.5.0.2
- 0.5.0.3
- 0.5.0.4
- 0.5.0.5
- 1.0.0.0
- 1.0.0.1
- 1.0.0.2
- 1.0.0.3
- 1.1.0.0
- 1.2.0.0
- 1.2.0.1
author: Hideyuki Tanaka
basic-deps:
  base: '>=4 && <5'
  bytestring: '>=0.9'
  conduit: '>=1.1'
  control-monad-loop: '>=0.1 && <0.2'
  mtl: '>=2.0'
  process: '>=1.0'
  resourcet: '>=1.1'
  shakespeare: '>=0'
  shakespeare-text: '>=1.0'
  template-haskell: '>=2.4'
  text: '>=0.11'
changelog: ''
changelog-type: ''
description: |
  process-conduit: Conduit for processes
  ======================================

  # About

  This package provides [conduit](http://hackage.haskell.org/package/conduit)
  for processes.
  Also this provides quasi-quoters for process using it.

  # Install

  ~~~ {.bash}
  $ cabal update
  $ cabal install process-conduit
  ~~~

  # Document

  Haddock documents are here:

  <http://hackage.haskell.org/package/process-conduit>

  # Quasi Quoters

  process-conduit has three quasi-quoters, `cmd`, `scmd` and `ccmd`.

  The result type of `cmd` is Lazy `ByteString`,
  but execution will perform strictly.

  The result type of `scmd` and `ccmd` are
  `GSource m ByteString` and
  `GConduit ByteString m ByteString` respectively.

  If a command is failed, an exception is thrown.

  Commands are executed in ***run-time***, not compile-time.

  # Examples

  * Create a Source and a Conduit of process

  ~~~ {.haskell}
  import Data.Conduit
  import qualified Data.Conduit.Binary as CB
  import Data.Conduit.Process
  import System.IO

  main :: IO ()
  main = runResourceT $ do
    sourceCmd "ls" $= conduitCmd "sort" $$ CB.sinkHandle stdout
  ~~~

  * Invoke a process simply

  ~~~ {.haskell}
  {-# LANGUAGE QuasiQuotes #-}
  import System.Process.QQ

  main = print =<< [cmd|ls|]
  ~~~

  * Conduit Quasi-Quoters

  ~~~ {.haskell}
  main :: IO ()
  main = runResourceT $ do
    [scmd|ls|] $= [ccmd|sort|] $$ CB.sinkHandle stdout
  ~~~

  * Unquoting (syntax is same as [shakespeare-text](http://hackage.haskell.org/package/shakespeare-text))

  ~~~ {.haskell}
  main = do
    [url] <- getArgs
    print =<< [cmd|curl #{url}|]
  ~~~
description-type: markdown
hash: c179f6461aec3f65a8b1ffabc4efa62311d4fe8aa9ec984054cb7436abc19199
homepage: http://github.com/snoyberg/process-conduit
latest: 1.2.0.1
license-name: BSD-3-Clause
maintainer: Michael Snoyman
synopsis: Conduits for processes (deprecated)
test-bench-deps:
  base: '>=4 && <5'
  bytestring: '>=0'
  conduit: '>=0'
  conduit-extra: '>=0'
  hspec: '>=1.3'
  process-conduit: '>=0'
  resourcet: '>=0'
