all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.5.0.0
- 0.6.0.0
- 0.7.0.0
- 0.7.0.1
- 0.7.0.2
- 0.7.0.3
- 0.8.0.0
- 0.9.0.0
- 0.10.0.0
- 0.11.0.0
- 0.12.0.0
- 0.13.0.0
- 0.14.0.0
author: Edmund Noble
basic-deps:
  adjunctions: '>=4.4.2 && <5'
  base: '>=4.8 && <4.30'
  deepseq: '>=1.4.8 && <2'
  lens: '>=5.3.2 && <6'
  mtl: '>=2.3.1 && <3'
changelog: |
  # Revision history for predicate-transformers

  ## 0.14.0.0 -- 2024-08-23
  * Add `?` back in as a useful operator to work with `&`; `&` can be used as a predicate applicator, and `?` can be used as a predicate transformer applicator, allowing for a form of infix binary application like `x & f ? y = f x y`.
  * Add `match` back in as a type-restricted alias for `soleElementOf`.

  ## 0.13.0.0 -- 2024-07-23
  * Remove `?`

  ## 0.12.0.0 -- 2024-07-23
  * Rename `sole` to `soleElement`
  * Add `?`, an infix function application operator with lower
    precedence than `!`.
  * Add `satAll = foldr also continue`.

  ## 0.11.0.0 -- 2024-07-21
  * Add documentation.
  * Rename `onlyContains` to `sole`. Add `soleOf`, generalizing over `Fold`s.
    `soleOf` is likely a better replacement for `match` than `allOf1` was.
  * Exchange `INLINABLE` pragmas for `-fexpose-all-unfoldings`.
  * Implement `traceFailFunShow`.
  * Change `Exceptional`'s method `assess` to make it possible to implement for functional predicates, and delete `traceFailFun`, now redundant.

  ## 0.10.0.0 -- 2024-07-21

  * Rename `oneOfTwo` to `otherHand`, for easier reading.
  * Set `also` and `otherHand` precedences to those of `&&` and `||`
    respectively. That makes them work better with the precedence of
    `!`, allowing easier composition.
  * Rename `only` to `onlyContains`, for easier reading and to avoid a
    name conflict with `Control.Lens.only`.
  * Set `!` precedence to be equal to that of `.`.
  * Add `equals` predicate.
  * Delete `match`. `allOf1` does the same thing more generally, with
    `Fold` instead of `Prism`.
  * Make `otherHand` stop catching async exceptions. Otherwise a thread
    being killed may appear as a predicate failure.

  ## 0.9.0.0 -- 2024-07-21

  * Add instance `Predicatory (e -> a)`. This will allow for adding extra
    parameters to predicates, making it easier to compose them; maybe
    these are called "functional predicates".
  * Added `traceFailFun`. This version of traceFail works on functional
    predicates.
  * Tupling sugar renamed from `==>` to `:=>`, to allow it to be a pattern synonym.
  * Minor code style changes.

  ## 0.1.0.0 -- 2019-10-05

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: This package provides ways to write predicates such that they compose
  nicely and are easy to debug.
description-type: haddock
hash: e3bb8a6e3d0130adfccd0b2e08229e76d3c6bd72573998b1952a893ecf226e55
homepage: ''
latest: 0.14.0.0
license-name: BSD-3-Clause
maintainer: edmundnoble@gmail.com
synopsis: A library for writing predicates and transformations over predicates in
  Haskell
test-bench-deps: {}
