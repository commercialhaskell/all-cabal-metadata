homepage: https://github.com/typedbyte/program#readme
changelog-type: markdown
hash: af77fc21e5723945db9f7047d771966a7f9592498cbb9bf44b4583cdde00e577
test-bench-deps: {}
maintainer: typedbyte@qualified.name
synopsis: Programs with Environments and Managed Resources
changelog: "# Changelog for program\r\n\r\n## 0.1.0.0 (2021-12-02)\r\n\r\n* Initial
  release"
basic-deps:
  base: '>=4.7 && <5'
all-versions:
- 0.1.0.0
author: Michael Szvetits
latest: 0.1.0.0
description-type: markdown
description: "# program\r\n\r\n[![Hackage](https://img.shields.io/hackage/v/program.svg?logo=haskell&label=program)](https://hackage.haskell.org/package/program)\r\n\r\n[RIO]:
  https://hackage.haskell.org/package/rio\r\n[ReaderT]: https://www.fpcomplete.com/blog/2017/06/readert-design-pattern/\r\n[Handle
  Pattern]: https://jaspervdj.be/posts/2018-03-08-handle-pattern.html\r\n[record-of-functions]:
  https://discourse.haskell.org/t/records-of-functions-and-implicit-parameters/747\r\n[managed]:
  https://hackage.haskell.org/package/managed\r\n[Hackage]: https://hackage.haskell.org/package/program\r\n\r\n##
  Overview\r\n\r\n`program` is a library for writing programs with environments and
  managed resources, written in Haskell. It aims to be simple, has minimal dependencies
  and combines features of various existing approaches for threading an environment
  through an application (e.g., [RIO][], [ReaderT][], [Handle Pattern][], [record-of-functions][])
  and for managing resources without nested bracket-functions (e.g., [managed][]).
  The library and its documentation can be found on [Hackage][].\r\n\r\n## Example\r\n\r\nThe
  following simple example copies `count` characters from one file to another, where
  `count` is demanded from the environment `e` by the function `copy` (via `pull`)
  and supplied by `main`. Note that we do not need to close file handles, because
  resources are managed automatically.\r\n\r\n```haskell\r\n{-# LANGUAGE FlexibleContexts
  #-}\r\n{-# LANGUAGE TypeOperators    #-}\r\nmodule Example where\r\n\r\n-- base\r\nimport
  Control.Monad\r\nimport Control.Monad.IO.Class\r\nimport System.IO\r\n\r\n-- program\r\nimport
  Control.Program (Program, Has, manage, pull, runProgram)\r\n\r\ncopy :: e `Has`
  Int => FilePath -> FilePath -> Program e ()\r\ncopy from to = do\r\n  fromHandle
  <- manage (withFile from ReadMode)\r\n  toHandle   <- manage (withFile to WriteMode)\r\n
  \ count      <- pull\r\n  liftIO . replicateM_ count $\r\n    hGetChar fromHandle
  >>= hPutChar toHandle\r\n\r\nmain :: IO ()\r\nmain = do\r\n  runProgram\r\n    (
  10 :: Int )\r\n    ( copy \"/tmp/source\" \"/tmp/target\" )\r\n```\r\n\r\nIn larger
  applications, the environment would contain many more complex values (all demanded
  by `Has`) and can also be used to manage mutable state. See the documentation on
  [Hackage][] for more details.\r\n\r\n## Advantages\r\n\r\n* Easy to understand (e.g.,
  no unlifting, no type-level wizardry, hardly any language extensions).\r\n* No need
  for extra dependencies. All we need is `base`.\r\n* Mocking is easy by supplying
  different environments via `runProgram`.\r\n* No fight with the type inference (i.e.,
  down-to-earth types, hardly any typeclasses).\r\n* The environment can easily simulate
  beloved effects like `Reader` and `State`.\r\n* Easy integration of other effects
  by putting records-of-functions into the environment.\r\n* Clear error message because
  involved types are not overly generic."
license-name: BSD-3-Clause
