all-versions:
- 0.1.5
- 0.1.8
- 0.1.9
- 0.1.10
- 0.1.10.1
- 0.1.11
- 0.1.12
- 0.1.14
- 0.1.14.1
author: Edwin Brady
basic-deps:
  base: '>=3 && <4.4'
  binary: '>=0'
  containers: '>=0'
  directory: '>=0'
  haskell98: <2
  mtl: '>=0'
  parsec: '>=0'
changelog: ''
changelog-type: ''
description: |-
  Ivor is a type theory based theorem prover, with a
  Haskell API, designed for easy extending and embedding
  of theorem proving technology in Haskell
  applications. It provides an implementation of the
  type theory and tactics for building terms, more or
  less along the lines of systems such as Coq or Agda,
  and taking much of its inspiration from Conor
  McBride's presentation of OLEG.

  The API provides a collection of primitive tactics and
  combinators for building new tactics. It is therefore
  possible to build new tactics to suit specific
  applications. Ivor features a dependent type theory
  similar to Luo's ECC with definitions (and similar to
  that implemented in Epigram), with dependent pattern
  matching, and experimental multi-stage programming
  support. Optionally, it can be extended with
  heterogeneous equality, primitive types and operations,
  new parser rules, user defined tactics and (if you
  want your proofs to be untrustworthy) a fixpoint
  combinator.
description-type: haddock
hash: 32900700e14c90c9c9aad7d7790c36540bad4c7a4af16cfdc1c16c6289902635
homepage: http://www.dcs.st-and.ac.uk/~eb/Ivor/
latest: 0.1.14.1
license-name: BSD-3-Clause
maintainer: Edwin Brady <eb@dcs.st-and.ac.uk>
synopsis: Theorem proving library based on dependent type theory
test-bench-deps: {}
