all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.2.1
- 0.1.2.4
- 0.1.2.5
- 0.2.2
- 0.2.11
- '0.3'
author: Ryan Newton <rrnewton@gmail.com>
basic-deps:
  HUnit: '>=0'
  async: '>=0'
  base: '>=3 && <5'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  fgl: '>=0'
  filepath: '>=0'
  graphviz: '>=2999.16'
  hierarchical-clustering: '>=0.4'
  parsec: '>=3.1.0'
  phybin: '>=0'
  prettyclass: '>=0'
  process: '>=0'
  split: '>=0.2'
  text: '>=0.11 && <0.12'
  time: '>=0'
  vector: '>=0.10'
changelog: ''
changelog-type: ''
description: "% PhyBin (0.3): Binning/Clustering Newick Trees by Topology\n\n\nPhyBin
  is a simple command line tool that classifies a set of\n  [Newick tree files](http://en.wikipedia.org/wiki/Newick_format)
  \nby their topology.  The purpose of it is to take a large set of tree\nfiles and
  browse through the most common tree topologies.\n\n![(Above figure) Trees corresponding
  to the three largest bins resulting from a\n  phybin run.  The file `binXX_YYY`,
  where `XX` is the rank of the bin and\n  `YYY` is the number of trees having that
  topology.](trees.jpg)\n\nChange Log\n==========\n\nIn version 0.2, PhyBin was extended
  to do clustering as well as binning:\n\n * Computee full all-to-all Robinson-Foulds
  distance matrices (quickly)\n * Hierarchical clustering of all trees into a tree-of-trees
  dendrogram based on \n   Robinson Foulds symmetric (tree edit) distance.\n\nIn version
  0.3, PhyBin gained a number of new features\n\n * A `--tolerant` mode for computing
  RF distance matrices even for trees missing taxa. \n * A `--prune` option for \"zooming
  in\" on a specific set of taxa.\n * The `--minboostrap` option was added.\n\n\nInvoking
  PhyBin \n===============\n\nPhyBin is a command-line program that produces output
  in the form of\ntext files and pdfs, but to produce pdfs (to visualize trees) the\n
  \ [GraphViz program](http://www.graphviz.org/),\nincluding the `dot` command, must
  be installed on the machine.\n\nThe following is a simple invocation of PhyBin:\n\n
  \   phybin --bin *.tree -o output_dir/\n\nThe input trees can be specified directly
  on the command-line, or, if the\nname of a directory is provided instead, all contained
  files are\nassumed to be trees in Newick format.\n\nPhyBin, at minimum, produces
  files of the form\n`output_dir/clusterXX_YY.tr`, one for each bin.  If\nrequested,
  it will also produce visual representations of each bin in\nthe form `output_dir/clusterXX_YY.pdf`.\n\nDownloading
  and Installing PhyBin\n=================================\n\nThe source code to PhyBin
  can be downloaded here:\n\n  * [Download Source from Hackage](http://hackage.haskell.org/package/phybin)\n\nPhyBin
  is written in Haskell and if you have \n  [Haskell Platform](http://hackage.haskell.org/platform/).\ninstalled
  you can install phybin with this one-liner:\n\n    cabal install phybin\n\nOtherwise
  PhyBin is also available for download as a statically-linked\nexecutable for Mac-OS,
  Linux, and Windows:\n\n  * [Download Mac-OS Binary](phybin-0.3.mac) \n  * [Download
  Linux Binary](phybin-0.3.x86_64_linux)\n  * [Download Windows Binary](phybin-0.3_windows.exe)\n
  \ \n\n\nCommand-line Options\n====================\n\nIn addition to input files
  and directories, `phybin` supports a number\nof command-line options.  Run \"phybin
  --help\" to see these options.\nHere is a snapshot of the current help output (version
  0.2.11):\n\n    Usage: phybin [OPTION...] files or directories...\n\n    PhyBin
  takes Newick tree files as input.  Paths of Newick files can\n    be passed directly
  on the command line.  Or, if directories are provided,\n    all files in those directories
  will be read.  Taxa are named based on the files\n    containing them.  If a file
  contains multiple trees, all are read by phybin, and\n    the taxa name then includes
  a suffix indicating the position in the file:\n     e.g. FILENAME_0, FILENAME_1,
  etc.\n\n    When clustering trees, Phybin computes a complete all-to-all Robinson-Foulds
  distance matrix.\n    If a threshold distance (tree edit distance) is given, then
  a flat set of clusters\n    will be produced in files clusterXX_YY.tr.  Otherwise
  it produces a full dendogram (UNFINISHED).\n\n    Binning mode provides an especially
  quick-and-dirty form of clustering.\n    When running with the --bin option, only
  exactly equal trees are put in the same cluster.\n    Tree pre-processing still
  applies, however: for example collapsing short branches.\n\n    USAGE NOTES:\n     *
  Currently phybin ignores input trees with the wrong number of taxa.\n     * If given
  a directory as input phybin will assume all contained files are Newick trees.\n\n\n
  \   Options include:\n\n      -v       --verbose         print WARNINGS and other
  information (recommended at first)\n      -V       --version         show version
  number\n      -o DIR   --output=DIR      set directory to contain all output files
  (default \"./phybin_out/\")\n\t       --selftest        run internal unit tests\n\n\t\t\t\t
  ----------------------------- Clustering Options ------------------------------\n\t
  \      --bin             Use simple binning, the cheapest form of 'clustering'\n\t
  \      --single          Use single-linkage clustering (nearest neighbor)\n\t       --complete
  \       Use complete-linkage clustering (furthest neighbor)\n\t       --UPGMA           Use
  Unweighted Pair Group Method (average linkage) - DEFAULT mode\n\t       --editdist=DIST
  \  Combine all clusters separated by DIST or less.  Report a flat list of clusters.\n\t\t\t\t
  Irrespective of whether this is activated, a hierarchical clustering (dendogram.pdf)
  is produced.\n\t\t\t\t   Select Robinson-Foulds (symmetric difference) distance
  algorithm:\n\t       --simple          use direct all-to-all comparison\n\t       --hashrf
  \         (default) use a variant of the HashRF algorithm for the distance matrix\n\n\t\t\t\t
  ----------------------------- Visualization --------------------------------\n      -g
  \      --graphbins       use graphviz to produce .dot and .pdf output files\n      -d
  \      --drawbins        like -g, but open GUI windows to show each bin's tree\n
  \     -w       --view            for convenience, \"view mode\" simply displays
  input Newick files without binning\n\t       --showtrees       Print (textual) tree
  topology inside the nodes of the dendrogram\n\t       --highlight=FILE  Highlight
  nodes in the tree-of-trees (dendrogram) consistent with the.\n\t\t\t\t given tree
  file.  Multiple highlights are permitted and use different colors.\n\t       --interior
  \       Show the consensus trees for interior nodes in the dendogram, rather than
  just points.\n\n\t\t\t\t ---------------------------- Tree pre-processing -----------------------------\n
  \     -n NUM   --numtaxa=NUM     expect NUM taxa for this dataset\n      -b LEN
  \  --branchcut=LEN   collapse branches less than LEN\n\n\t\t\t\t ---------------------------
  Extracting taxa names ----------------------------\n\n      -p NUM   --nameprefix=NUM
  \ Leaf names in the input Newick trees can be gene names, not taxa.\n\t\t\t\t Then
  it is typical to extract taxa names from genes.  This option extracts\n\t\t\t\t
  a prefix of NUM characters to serve as the taxa name.\n\n      -s STR   --namesep=STR
  \    An alternative to --nameprefix, STR provides a set of delimeter characters,\n\t\t\t\t
  for example '-' or '0123456789'.  The taxa name is then a variable-length\n\t\t\t\t
  prefix of each gene name up to but not including any character in STR.\n\n      -m
  FILE  --namemap=FILE    Even once prefixes are extracted it may be necessary to
  use a lookup table\n\t\t\t\t to compute taxa names, e.g. if multiple genes/plasmids
  map onto one taxa.\n\t\t\t\t This option specifies a text file with find/replace
  entries of the form\n\t\t\t\t \"<string> <taxaname>\", which are applied AFTER -s
  and -p.\n\n\t\t\t\t --------------------------- Utility Modes ----------------------------\n\t
  \      --rfdist          print a Robinson Foulds distance matrix for the input trees\n\t
  \      --setdiff         for convenience, print the set difference between cluster*.txt
  files\n\t       --print           simply print out a concise form of each input
  tree\n\t       --printnorms      simply print out a concise and NORMALIZED form
  of each input tree\n\t       --consensus       print a strict consensus tree for
  the inputs, then exit\n\t       --matching        print a list of tree names that
  match any --highlight argument\n\n\n- - - - - - - - - - - - - - -\nAuthors: Irene
  and Ryan Newton\n\nContact email: `irnewton` and `rrnewton` at `indiana` `edu` (with
  \"at\" and \"dot\" inserted).\n\n[Irene's](http://www.bio.indiana.edu/faculty/directory/profile.php?person=irnewton)
  and \n[Ryan](http://www.cs.indiana.edu/~rrnewton/homepage.html) homepages.\n\n.\n\n\n"
description-type: markdown
hash: f16e5db3d2b59b318e5c14e5d4e425349c60b78ebb9133cd2cbf44a8b0044653
homepage: http://www.cs.indiana.edu/~rrnewton/projects/phybin/
latest: '0.3'
license-name: BSD-3-Clause
maintainer: Ryan Newton <rrnewton@gmail.com>
synopsis: Utility for clustering phylogenetic trees in Newick format based on Robinson-Foulds
  distance.
test-bench-deps:
  HUnit: '>=0'
  async: '>=0'
  base: '>=3 && <5'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  fgl: '>=0'
  filepath: '>=0'
  graphviz: '>=2999.16'
  hierarchical-clustering: '>=0.4'
  parsec: '>=3.1.0'
  prettyclass: '>=0'
  process: '>=0'
  split: '>=0.2'
  test-framework: '>=0'
  test-framework-hunit: '>=0'
  test-framework-th: '>=0'
  text: '>=0.11 && <0.12'
  time: '>=0'
  vector: '>=0.10'
