homepage: https://hackage.haskell.org/package/phonetic-languages-simplified-generalized-examples-array
changelog-type: markdown
hash: 05443b3199786f11847b5934682e9c2b1d103cbbbef3054ded85274610df7767
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: Helps to create texts with the given phonetic properties (e. g. poetic).
changelog: "# Revision history for phonetic-languages-simplified-generalized-examples-array\n\n##
  0.1.0.0 -- 2021-05-08\n\n* First version. Released on an unsuspecting world.\n\n##
  0.1.0.1 -- 2021-05-08\n\n* First version revised A. Some documentation and .cabal
  file improvements.\n\n## 0.1.1.0 -- 2021-05-10\n\n* First version revised B. Some
  documentation improvements. Changed the dependencies boundaries.\n\n## 0.2.0.0 --
  2021-05-24\n\n* Second version. Added new modules: Phonetic.Languages.General.Simple.Parsing,
  Phonetic.Languages.General.Lines.Parsing,\nPhonetic.Languages.General.GetInfo.Parsing.
  Added README.md file with some remarks to the new modules.\n\n## 0.2.0.1 -- 2021-05-26\n\n*
  Second version revised A. Added some information to the README.md file related to
  the IPA and espeak-ng usage.\n\n## 0.2.1.0 -- 2021-05-27\n\n* Second version revised
  B. Added important information to the README.md file related to the ground idea.\n\n##
  0.3.0.0 -- 2021-06-04\n\n* Third version. Changed the code related to the breaking
  update of the phonetic-languages-phonetics-basics package.\nNow the GWritingSystemPRPLX
  and syllable segmentation have extended possibilities.\n\n## 0.4.0.0 -- 2021-07-06\n\n*
  Fourth version. Added a new module EspeakNG_IPA to use the espeak and IPA functionality.\nFor
  this, added mmsyn3 and process as new dependencies.\n\n## 0.4.1.0 -- 2021-07-06\n\n*
  Fourth version revised A. Fixed issues with wrong parameter for espeak that caused
  no language specific translation.\n\n## 0.4.1.1 -- 2021-07-06\nː\n* Fourth version
  revised B. Fixed spelling and stylistic issues in the documentation.\n\n## 0.4.2.0
  -- 2021-07-08\n\n* Fourth version revised C. Added filtering possibilities and two
  generalized functions to the EspeakNG_IPA module.\n\n## 0.4.2.1 -- 2021-07-08\n\n*
  Fourth version revised D. Fixed issue with wrong character filtering 'ː' (that denotes
  the prolonged sounds in\nIPA) as ':' (default colon in ACSII).\n\n## 0.5.0.0 --
  2021-07-21\n\n* Fifth version. Added \"w\" and \"x\" lines of the properties that
  uses more complex rhythmicity structures and\nother properties. Changed the dependencise
  boundaries accordingly.\n\n## 0.5.0.1 -- 2021-07-21\n\n* Fifth version revised A.
  Fixed an issue with incomplete documentation addition to the README.md file.\n\n##
  0.6.0.0 -- 2021-07-29\n\n* Sixth version. Changed the command line arguments modifiers
  notation to the small letters,\nremoved the double ++ sign (changed to just single
  +) to simplify the command line arguments usage.\nAlso changed the way to sign the
  writing to file for the Phonetic.Languages.General.Simple module.\nAdded new lines
  of properties for the (hypothetic) polyrhythmicity handling. Among them\n\"c\",
  \"s\", \"t\", \"u\", \"v\" lines are. Changed the documentation appropriately. Changed
  the dependencies\nboundaries. Added the possibility to 'grow lines' to Phonetic.Languages.General.Lines
  and\nPhonetic.Languages.General.GetTextualInfo modules.\n\n## 0.6.1.0 -- 2021-07-30\n\n*
  Sixth version revised A. Fixed issues with the fixed point of 1.0 (arising from
  the issue in the dependency package\nphonetic-languages-rhythmicity).\n\n## 0.6.2.0
  -- 2021-07-31\n\n* Sixth version revised B. Changed the dependency boundaries so
  that the issues are fixed with '0' and not '0' functions.\nSome code improvements
  (reduced duplication).\n\n## 0.7.0.0 -- 2021-08-09\n\n* Seventh version. Added information
  to the documentation in the pdf format. Changed the dependency boundaries\nso that
  it now uses more linearized rhythmicity properties for polyrhythmic properties.\n\n##
  0.8.0.0 -- 2021-08-14\n\n* Eigth version. Changed the dependency boundaries and
  added new weighted properties and fixed some issues with\nthe previous ones so that
  they use more complete information. Added the handler for the case of the empty
  line for\nthe Simple submodule and related functionality. Some documentation improvements.\n\n##
  0.8.1.0 -- 2021-08-15\n\n* Eigth version revised A. Fixed issue with the wrong order
  and, therefore, mapping for different choices and\nthe corresponding properties
  in the module Phonetic.Languages.Simplified.Array.General.FuncRep2RelatedG2.\n\n##
  0.9.0.0 -- 2021-08-16\n\n* Ninth version. Added new properties that try to increase
  the importance of the ending of the line and decrease\nthe importance of the beginning
  of the line. Added new dependency of string-interpreter. Added the possibility\nto
  run Phonetic.Languages.General.Simple module functions in the recursive interactive
  mode. It is not\ncompatible with the contstraints so should be used not simultaneously
  with them (because they change their meaning).\nSome documentation improvements.\n\n##
  0.10.0.0 -- 2021-08-17\n\n* The tenth version. Added new linear weighted properties.
  Fixed some issues with wrong mapping. Some documentation\nimprovements.\n\n## 0.10.1.0
  -- 2021-08-24\n\n* The tenth version revised. Fixed issues with the custom user
  defined polyrhythmicity patterns. Changed the\ndocumentation instructions in editor.
  Updated the dependency boundaries accordingly.\n\n## 0.11.0.0 -- 2021-09-04\n\n*
  The eleventh version. Added new mode of multiple sources processment (+t_ ... -t).
  Added the possibility to\ncount in the recursive mode not just from the beginning
  of the word concatenation but also from the end using\nthe commonly used programming
  pattern of the negative integer indexing. Updated the dependencies so that now\nit
  can use multiple improvements of the dependencies. Some documentation improvements.\n\n##
  0.11.1.0 -- 2021-09-08\n\n* The eleventh version revised B. Fixed issue with the
  phonetic-languages-plus dependency being not built. Updated\nthe dependency boundaries.\n\n##
  0.11.2.0 -- 2021-09-09\n\n* The eleventh version revised C. Updated the README.md
  file with the hyperlinks to the updated documentation\nrelated to the usage of the
  related package phonetic-languages-simplified-examples-array.\n\n## 0.11.3.0 --
  2021-09-09\n\n* The eleventh version revised D. Updated the README.md file with
  the hyperlinks to the updated documentation\nrelated to the usage of the related
  package phonetic-languages-simplified-examples-array.\n\n## 0.12.0.0 -- 2021-09-14\n\n*
  The twelth version. Added multiple properties mode to the Phonetic.Languages.General.Lines
  module and related\nmodule and extended the comparative mode for it up to 7 different
  input source files. Some documentation improvements.\n\n## 0.12.1.0 -- 2021-09-15\n\n*
  The twelth version revised A. Fixed issues in the documentation for the installation
  and upgrading processes.\n\n## 0.13.0.0 -- 2021-10-15\n\n* The thirteenth version.
  Added the possibility to use just pairwise permutations\ninstead of the full universal
  set of them. Updated the dependency boundaries and the documentation\nappropriately.
  Fixed the issue with not properly documented (re-)installation process for the package(s).\n\n##
  0.13.1.0 -- 2021-10-23\n\n* The thirteenth version revised A. Imlemented pairwise
  permutations mode more deeply. Some documentation improvements.\nUpdated the dependencies
  boundaries.\n\n## 0.14.0.0 -- 2022-01-17\n\n* The fourteenth version. Added cli-arguments
  as a new dependency. Changed the way the programs parse their arguments.\nAdded
  the possibility to use also minimal set of permutations (just one word). Updated
  the dependencies. Some code\nimprovements. Updated the documentation with the new
  material and fixed obsoleted output examples for the\nUkrainian implementation (phonetic-languages-simplified-examples-array).\n\n##
  0.14.1.0 -- 2022-01-18\n\n* The fourteenth version revised A. Added information
  about the related suggested package html-presentation-text to the\npackage description.\n\n##
  0.15.0.0 -- 2022-02-09\n\nThe fifteenth version. Fixed the long existing issues
  with not working prepending needed concatenations for the text in the\nmodule Data.Phonetic.Languages.PrepareText
  of the dependency. Added also the possibility to not only prepend needed words,\nbut
  also append. This introduces breaking changes, so please, check the code that uses
  library functions afterwards.\nFixed also issue with innerProcessment function.\n\n##
  0.16.0.0 -- 2022-04-25\n\n* The sixteenth version. In the new version there were
  fixed issues with changing the structure of output (intervals rearrangements)\nso
  that the programs now work as\ndescribed. If you used earlier changing structure
  with the arguments then all the results must be re-considered (re-done)\nwith fixed
  version 0.16.0.0.\nThe author ask for pardon because of such longlasted issue.\nImproved
  documentation.\nFixed issues with string interpreter and added the possibility to
  adjust splitting.\n\n## 0.17.0.0 -- 2022-05-31\n\n* The seventeenth version. The
  new version adds support for additional properties, as well as multiple properties
  mode for distributionTextG.\nThe theoretical part of the documentation for the conceptually
  similar functionality in the phonetic-languages-simplified-examples-array package\nimproved.
  Fixed some code bugs. Switched in calculations of the\naverage values and standard
  deviation from population to sample versions (now the standard deviation is slightly
  higher).\nFixed issues with multiple variations of the text mode if it is not used
  interactively.\n\n## 0.18.0.0 -- 2022-08-09\n\n* The eighteenth version. Added the
  new operation mode -- SaaW (syllable-as-a-whole) addititonally \nto the previously
  defined PhoPaaW (phonetic-phenomena-as-a-whole) mode. Fixed some issues.\nFor more
  information see the documentation  for the parallel project phonetic-languages-simplified-examples-array:\n\nin
  Ukrainian:\nhttps://oleksandrzhabenko.github.io/uk/rhythmicity/InstructionUkr.20.pdf\n\nor
  here:\n\n(try \nhttps://web.archive.org/web/20220809192249/https://oleksandrzhabenko.github.io/uk/rhythmicity/InstructionUkr.20.pdf).\n\nIn
  English is here:\n\nhttps://oleksandrzhabenko.github.io/uk/rhythmicity/InstructionEng.20.pdf\n\nor
  here:\n\n(try \nhttps://web.archive.org/web/20220809192412/https://oleksandrzhabenko.github.io/uk/rhythmicity/InstructionEng.20.pdf).\n\n\n"
basic-deps:
  mmsyn3: ==0.1.5.0
  heaps: '>=0.3.6.1 && <1'
  phonetic-languages-permutations-array: ==0.3.4.0
  base: '>=4.8 && <5'
  string-interpreter: ==0.6.0.0
  process: '>=1.6.2 && <2'
  subG: ==0.5.3.0
  phonetic-languages-simplified-generalized-properties-array: ==0.11.0.0
  phonetic-languages-basis: ==0.1.1.0
  phonetic-languages-plus: ==0.6.0.0
  phonetic-languages-constraints-array: ==0.1.2.0
  phonetic-languages-filters-array: ==0.4.0.0
  phonetic-languages-simplified-base: ==0.6.0.0
  foldable-ix: ==0.2.1.0
  mmsyn2-array: ==0.3.0.0
  phonetic-languages-simplified-generalized-examples-common: ==0.5.0.0
  parallel: '>=3.2.0.6 && <4'
  cli-arguments: ==0.6.0.0
  phonetic-languages-phonetics-basics: ==0.9.0.0
all-versions:
- 0.18.0.0
author: Oleksandr Zhabenko
latest: 0.18.0.0
description-type: markdown
description: |
  The version 0.15.0.0 fixed the long existing issues with not working prepending needed concatenations for the text in the
  module Data.Phonetic.Languages.PrepareText. Added also the possibility to not only prepend needed words, but also append.
  This introduces breaking changes, so please, check the code that uses library functions afterwards.

  The version 0.2.0.0 is prepared to the Day of the Saints Cyril and Methodius, the 'Apostles to the Slavs',
  and to the Day of Slavic writing systems and culture.

  The functions in the modules Phonetic.Languages.General.Simple.Parsing, Phonetic.Languages.General.Lines.Parsing,
  Phonetic.Languages.General.GetInfo.Parsing highly depend on the data types in the phonetic-languages-phonetics-basics
  package.

  They use the parsing with the failing possibilities, so for them, to work properly, you need to specify every
  piece of data accordingly to the specifications in the imported modules and in the new modules themselves.

  Otherwise, the functions definitely will not work correctly.

  Are provided mainly for testing purposes, may be not enough performant for production usage.

   Espeak-ng Additional Usage and IPA
   ==================================

  You can use additionally the espeak-ng program (see: https://github.com/espeak-ng/espeak-ng) and in the
  Unix / Linux terminal (bash shell) you can enter as a command something like:

  cat - | tr -d [:punct:] | espeak-ng -v{lang} -x -g 1 -s 130 --ipa

  where {lang} is the needed language code (see, the output of the espeak-ng --voices and besides the manual page for
  the espeak-ng).

  The IPA symbols information can be taken from the https://www.internationalphoneticassociation.org/content/full-ipa-chart
  or the https://www.internationalphoneticassociation.org/sites/default/files/phonsymbol.pdf
  Please, take into account the license information: the IPA chart and all its subparts
  are copyright 2018/2005 by the International Phonetic Association. As of July 2012, they are made freely
  available under a Creative Commons Attribution-Sharealike 3.0 Unported License (CC-BY-SA). This license
  allows any kind of re-use (including commercial reproduction and derivative works), as long as attribution
  is given and the reproduction or derivative work is under the same license.
  See http://creativecommons.org/licenses/by-sa/3.0/ for further description.

  It is rather easy to create the corresponding GWritingSystemPRPLX information using the IPA, but you can use
  some other respesentation. The idea for this is that you can use IPA line produced by the espeak-ng as the
  input 'String'.

   Some Ideas to Be Checked (Hypotheses)
   =====================================

  The phonetic-languages-simplified-generalized-examples-array library is based on the idea of the defined
  phonetic phenomenae durations in time while speaking. Definitely, they have some durations, the question of
  interest is that there are no stable ones, immutable ones. The durations vary not only from situation to situation,
  from one speaker to another one, from circumstances etc., but also the durations for some phonemes can vary
  depending on their neighbouring ones and, therefore, being some (probably, a new one in every case) function
  of the neighbour phonemes. This fact is not taken into account in this version of the package and library, but
  it has some meaning.

   A Child Learns to Read, or Somebody New to the Language
   =======================================================

  When a child just begins to read words in the language (or, there can be just somebody new to the language) he or she
  starts with phonemes pronunciation for every meaningful written (and, hence, read) symbol. Afterwards, after some
  practice, he / she starts to read smoothly. Nevertheless, if the text is actually a poetic piece, e. g. some
  poem, it is OFTEN (may be, usually, or sometimes, or occasionally, etc.) just evident that the text being read
  in such a manner has some rhythmicity properties, despite the fact that the phonemes are read and pronounced in
  a manner of irregular and to some extent irrelevant to the normal speech mode lengths (durations). We can
  distinguish (often) the poetic text from the non-poetic one just by some arrangement of the elements.

  The same situation occurs when a person with an accent (probably, strong, or rather uncommon) reads a poetic text.
  Or in other situations. The library design works just as in these situations. It assumes predefined durations, but
  having several reasonable (sensible) ones we can evaluate (approximately, of course) the rhythmicity properties
  and some other ones, just as the algorithms provided here.

  This, to the mind of the author, is a ground for using the library and its functionality in such cases.

   Using the Espeak and IPA functionality
   ======================================

  You can use the EspeakNG_IPA module for this since the 0.4.0.0 version.

   "w" and "x" Series of properties
   ================================

  Since the 0.5.0.0 version you can use also "w" and "x" series (lines) of properties. They use more complex
  approach and are intended for 4 elements in the rhythmic groups. For more information, please, refer to the
  section 'WX argument' in the Ukrainian instruction:

  https://oleksandrzhabenko.github.io/uk/rhythmicity/InstructionUkr.20.pdf

  or here:

  (try
  https://web.archive.org/web/20220809192249/https://oleksandrzhabenko.github.io/uk/rhythmicity/InstructionUkr.20.pdf)

  The instruction in English is here:

  https://oleksandrzhabenko.github.io/uk/rhythmicity/InstructionEng.20.pdf

  or here:

  (try
  https://web.archive.org/web/20220809192412/https://oleksandrzhabenko.github.io/uk/rhythmicity/InstructionEng.20.pdf)

  There are also some additional information there about the changes in the 0.6.0.0 version.

  Since the 0.6.0.0 version there are made several significant changes.
  Changed the command line arguments modifiers notation to the small letters,
  removed the double ++ sign (changed to just single +) to simplify the command line arguments usage.
  Also changed the way to sign the writing to file for the Phonetic.Languages.General.Simple module.
  Added new lines of properties for the (hypothetic) polyrhythmicity handling. Among them
  "c", "s", "t", "u", "v" lines are. Changed the dependencies
  boundaries. Added the possibility to 'grow lines' to Phonetic.Languages.General.Lines and
  Phonetic.Languages.General.GetTextualInfo modules.

  Since the 0.7.0.0 version the "c", "s", "t", "u" and "v" series can have negative (by sign) result of the
  properties. This does not influence the general behavior of the functions.

  Since the 0.8.0.0 version there are also new "weighted" properties lines used.

  Since the 0.9.0.0 version there are also recursive interactive mode of the
  Phonetic.Languages.General.Simple module functions.

  Since the version 0.13.0.0 added the pairwise permutations
  mode (with +p command line argument) where just pairwise
  permutations are used and the length of the line can be
  up to 10 words or their concatenations.

  Since the 0.14.0.0 version you can use two reduced set of permutations modes
  in addition to the default full universal set of permutations mode. To
  use them, please, add "+p {1 or 2}" to the command line arguments.
  For more information, please, refer to the instructions following the links
  above.

  The version 0.16.0.0 fixes issues with changing the structure of output
  (intervals rearrangements) so that the programs now work as
  described. If you used earlier changing structure with the arguments
  then all the results must be re-considered (re-done)
  with fixed version 0.16.0.0.
  The author ask for pardon because of such longlasted issue.
  Improved documentation.
  Fixed issues with string interpreter (see the appropriate information) and added the possibility to adjust splitting.
license-name: MIT
