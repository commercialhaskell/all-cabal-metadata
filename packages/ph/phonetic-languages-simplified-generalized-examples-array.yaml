homepage: https://hackage.haskell.org/package/phonetic-languages-simplified-generalized-examples-array
changelog-type: markdown
hash: f2549ebe4f6c258cf47693ca47571e42105901cfb2ea0b2a871a79f5ea620960
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: Helps to create texts with the given phonetic properties (e. g. poetic).
changelog: "# Revision history for phonetic-languages-simplified-generalized-examples-array\n\n##
  0.1.0.0 -- 2021-05-08\n\n* First version. Released on an unsuspecting world.\n\n##
  0.1.0.1 -- 2021-05-08\n\n* First version revised A. Some documentation and .cabal
  file improvements.\n\n## 0.1.1.0 -- 2021-05-10\n\n* First version revised B. Some
  documentation improvements. Changed the dependencies boundaries.\n\n## 0.2.0.0 --
  2021-05-24\n\n* Second version. Added new modules: Phonetic.Languages.General.Simple.Parsing,
  Phonetic.Languages.General.Lines.Parsing,\nPhonetic.Languages.General.GetInfo.Parsing.
  Added README.md file with some remarks to the new modules. \n\n## 0.2.0.1 -- 2021-05-26\n\n*
  Second version revised A. Added some information to the README.md file related to
  the IPA and espeak-ng usage.\n"
basic-deps:
  heaps: '>=0.3.6.1 && <1'
  phonetic-languages-permutations-array: '>=0.1 && <1'
  base: '>=4.8 && <4.15'
  subG: '>=0.4.2 && <1'
  phonetic-languages-simplified-generalized-properties-array: '>=0.1.2 && <1'
  phonetic-languages-plus: '>=0.2 && <1'
  phonetic-languages-constraints-array: '>=0.1 && <1'
  phonetic-languages-filters-array: '>=0.1 && <1'
  phonetic-languages-simplified-base: '>=0.2 && <1'
  mmsyn2-array: '>=0.1.3 && <1'
  phonetic-languages-simplified-generalized-examples-common: '>=0.1.2 && <1'
  parallel: '>=3.2.0.6 && <4'
  phonetic-languages-phonetics-basics: '>=0.6.3 && <1'
all-versions:
- 0.2.0.1
author: Oleksandr Zhabenko
latest: 0.2.0.1
description-type: markdown
description: "The version 0.2.0.0 is prepared to the Day of the Saints Cyril and Methodius,
  the 'Apostles to the Slavs',\nand to the Day of Slavic writing systems and culture.
  \n\nThe functions in the modules Phonetic.Languages.General.Simple.Parsing, Phonetic.Languages.General.Lines.Parsing,\nPhonetic.Languages.General.GetInfo.Parsing
  highly depend on the data types in the phonetic-languages-phonetics-basics\npackage.\n\nThey
  use the parsing with the failing possibilities, so for them, to work properly, you
  need to specify every\npiece of data accordingly to the specifications in the imported
  modules and in the new modules themselves.\n\nOtherwise, the functions definitely
  will not work correctly.\n\nAre provided mainly for testing purposes, may be not
  enough performant for production usage.\n\n Espeak-ng Additional Usage and IPA\n
  ==================================\n\nYou can use additionally the espeak-ng program
  (see: https://github.com/espeak-ng/espeak-ng) and in the\nUnix / Linux terminal
  (bash shell) you can enter as a command something like:\n\ncat - | tr -d [:punct:]
  | espeak-ng -v{lang} -x -g 1 -s 130 --ipa\n\nwhere {lang} is the needed language
  code (see, the output of the espeak-ng --voices and besides the manual page for\nthe
  espeak-ng).\n\nThe IPA symbols information can be taken from the https://www.internationalphoneticassociation.org/content/full-ipa-chart\nor
  the https://www.internationalphoneticassociation.org/sites/default/files/phonsymbol.pdf\nPlease,
  take into account the license information: the IPA chart and all its subparts\nare
  copyright 2018/2005 by the International Phonetic Association. As of July 2012,
  they are made freely\navailable under a Creative Commons Attribution-Sharealike
  3.0 Unported License (CC-BY-SA). This license\nallows any kind of re-use (including
  commercial reproduction and derivative works), as long as attribution\nis given
  and the reproduction or derivative work is under the same license.\nSee http://creativecommons.org/licenses/by-sa/3.0/
  for further description.\n\nIt is rather easy to create the corresponding GWritingSystemPRPLX
  information using the IPA, but you can use\nsome other respesentation. The idea
  for this is that you can use IPA line produced by the espeak-ng as the\ninput 'String'.\n"
license-name: MIT
