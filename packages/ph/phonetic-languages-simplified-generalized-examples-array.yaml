homepage: https://hackage.haskell.org/package/phonetic-languages-simplified-generalized-examples-array
changelog-type: markdown
hash: 9f30923601058800484dcea986dbc2dde4db4b5355aa4688f8cc96d366239aae
test-bench-deps: {}
maintainer: olexandr543@yahoo.com
synopsis: Helps to create texts with the given phonetic properties (e. g. poetic).
changelog: "# Revision history for phonetic-languages-simplified-generalized-examples-array\n\n##
  0.1.0.0 -- 2021-05-08\n\n* First version. Released on an unsuspecting world.\n\n##
  0.1.0.1 -- 2021-05-08\n\n* First version revised A. Some documentation and .cabal
  file improvements.\n\n## 0.1.1.0 -- 2021-05-10\n\n* First version revised B. Some
  documentation improvements. Changed the dependencies boundaries.\n\n## 0.2.0.0 --
  2021-05-24\n\n* Second version. Added new modules: Phonetic.Languages.General.Simple.Parsing,
  Phonetic.Languages.General.Lines.Parsing,\nPhonetic.Languages.General.GetInfo.Parsing.
  Added README.md file with some remarks to the new modules. \n\n## 0.2.0.1 -- 2021-05-26\n\n*
  Second version revised A. Added some information to the README.md file related to
  the IPA and espeak-ng usage.\n\n## 0.2.1.0 -- 2021-05-27\n\n* Second version revised
  B. Added important information to the README.md file related to the ground idea.\n\n##
  0.3.0.0 -- 2021-06-04\n\n* Third version. Changed the code related to the breaking
  update of the phonetic-languages-phonetics-basics package.\nNow the GWritingSystemPRPLX
  and syllable segmentation have extended possibilities.\n\n## 0.4.0.0 -- 2021-07-06\n\n*
  Fourth version. Added a new module EspeakNG_IPA to use the espeak and IPA functionality.
  \nFor this, added mmsyn3 and process as new dependencies.\n\n## 0.4.1.0 -- 2021-07-06\n\n*
  Fourth version revised A. Fixed issues with wrong parameter for espeak that caused
  no language specific translation.\n\n## 0.4.1.1 -- 2021-07-06\nː\n* Fourth version
  revised B. Fixed spelling and stylistic issues in the documentation. \n\n## 0.4.2.0
  -- 2021-07-08\n\n* Fourth version revised C. Added filtering possibilities and two
  generalized functions to the EspeakNG_IPA module.\n\n## 0.4.2.1 -- 2021-07-08\n\n*
  Fourth version revised D. Fixed issue with wrong character filtering 'ː' (that denotes
  the prolonged sounds in\nIPA) as ':' (default colon in ACSII).\n"
basic-deps:
  mmsyn3: '>=0.1.5 && <1'
  heaps: '>=0.3.6.1 && <1'
  phonetic-languages-permutations-array: '>=0.1 && <1'
  base: '>=4.8 && <4.15'
  process: '>=1.6.2 && <2'
  subG: '>=0.4.2 && <1'
  phonetic-languages-simplified-generalized-properties-array: '>=0.2 && <1'
  phonetic-languages-plus: '>=0.2 && <1'
  phonetic-languages-constraints-array: '>=0.1 && <1'
  phonetic-languages-filters-array: '>=0.1 && <1'
  phonetic-languages-simplified-base: '>=0.2 && <1'
  mmsyn2-array: '>=0.1.3 && <1'
  phonetic-languages-simplified-generalized-examples-common: '>=0.2 && <1'
  parallel: '>=3.2.0.6 && <4'
  phonetic-languages-phonetics-basics: '>=0.7 && <1'
all-versions:
- 0.4.2.1
author: Oleksandr Zhabenko
latest: 0.4.2.1
description-type: markdown
description: "The version 0.2.0.0 is prepared to the Day of the Saints Cyril and Methodius,
  the 'Apostles to the Slavs',\nand to the Day of Slavic writing systems and culture.
  \n\nThe functions in the modules Phonetic.Languages.General.Simple.Parsing, Phonetic.Languages.General.Lines.Parsing,\nPhonetic.Languages.General.GetInfo.Parsing
  highly depend on the data types in the phonetic-languages-phonetics-basics\npackage.\n\nThey
  use the parsing with the failing possibilities, so for them, to work properly, you
  need to specify every\npiece of data accordingly to the specifications in the imported
  modules and in the new modules themselves.\n\nOtherwise, the functions definitely
  will not work correctly.\n\nAre provided mainly for testing purposes, may be not
  enough performant for production usage.\n\n Espeak-ng Additional Usage and IPA\n
  ==================================\n\nYou can use additionally the espeak-ng program
  (see: https://github.com/espeak-ng/espeak-ng) and in the\nUnix / Linux terminal
  (bash shell) you can enter as a command something like:\n\ncat - | tr -d [:punct:]
  | espeak-ng -v{lang} -x -g 1 -s 130 --ipa\n\nwhere {lang} is the needed language
  code (see, the output of the espeak-ng --voices and besides the manual page for\nthe
  espeak-ng).\n\nThe IPA symbols information can be taken from the https://www.internationalphoneticassociation.org/content/full-ipa-chart\nor
  the https://www.internationalphoneticassociation.org/sites/default/files/phonsymbol.pdf\nPlease,
  take into account the license information: the IPA chart and all its subparts\nare
  copyright 2018/2005 by the International Phonetic Association. As of July 2012,
  they are made freely\navailable under a Creative Commons Attribution-Sharealike
  3.0 Unported License (CC-BY-SA). This license\nallows any kind of re-use (including
  commercial reproduction and derivative works), as long as attribution\nis given
  and the reproduction or derivative work is under the same license.\nSee http://creativecommons.org/licenses/by-sa/3.0/
  for further description.\n\nIt is rather easy to create the corresponding GWritingSystemPRPLX
  information using the IPA, but you can use\nsome other respesentation. The idea
  for this is that you can use IPA line produced by the espeak-ng as the\ninput 'String'.\n\n
  Some Ideas to Be Checked (Hypotheses)\n =====================================\n\nThe
  phonetic-languages-simplified-generalized-examples-array library is based on the
  idea of the defined\nphonetic phenomenae durations in time while speaking. Definitely,
  they have some durations, the question of\ninterest is that there are no stable
  ones, immutable ones. The durations vary not only from situation to situation,\nfrom
  one speaker to another one, from circumstances etc., but also the durations for
  some phonemes can vary\ndepending on their neighbouring ones and, therefore, being
  some (probably, a new one in every case) function\nof the neighbour phonemes. This
  fact is not taken into account in this version of the package and library, but\nit
  has some meaning.\n\n A Child Learns to Read, or Somebody New to the Language\n
  =======================================================\n\nWhen a child just begins
  to read words in the language (or, there can be just somebody new to the language)
  he or she\nstarts with phonemes pronunciation for every meaningful written (and,
  hence, read) symbol. Afterwards, after some\npractice, he / she starts to read smoothly.
  Nevertheless, if the text is actually a poetic piece, e. g. some\npoem, it is OFTEN
  (may be, usually, or sometimes, or occasionally, etc.) just evident that the text
  being read\nin such a manner has some rhythmicity properties, despite the fact that
  the phonemes are read and pronounced in\na manner of irregular and to some extent
  irrelevant to the normal speech mode lengths (durations). We can\ndistinguish (often)
  the poetic text from the non-poetic one just by some arrangement of the elements.\n\nThe
  same situation occurs when a person with an accent (probably, strong, or rather
  uncommon) reads a poetic text.\nOr in other situations. The library design works
  just as in these situations. It assumes predefined durations, but\nhaving several
  reasonable (sensible) ones we can evaluate (approximately, of course) the rhythmicity
  properties\nand some other ones, just as the algorithms provided here.\n\nThis,
  to the mind of the author, is a ground for using the library and its functionality
  in such cases.\n\n Using the Espeak and IPA functionality\n ======================================\n\nYou
  can use the EspeakNG_IPA module for this since the 0.4.0.0 version.\n"
license-name: MIT
