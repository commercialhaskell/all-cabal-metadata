homepage: https://github.com/ExtremaIS/phatsort-haskell#readme
changelog-type: markdown
hash: e4f4572be9c47bc028c2bbde255a849569f9fd802be88f36197d33ec833056ec
test-bench-deps:
  phatsort: -any
  MonadRandom: -any
  base: -any
  tasty-hunit: '>=0.10 && <0.11'
  transformers: '>=0.5 && <0.7'
  tasty: '>=1.0 && <1.5'
maintainer: Travis Cardwell <travis.cardwell@extrema.is>
synopsis: FAT filesystem sort utility
changelog: |
  # `phatsort-haskell` Changelog

  This project follows the [Haskell package versioning policy][PVP], with
  versions in `A.B.C.D` format.  `A` may be incremented arbitrarily for
  non-technical reasons, but [semantic versioning][SemVer] is otherwise
  followed, where `A.B` is the major version, `C` is the minor version, and `D`
  is the patch version.  Initial development uses versions `0.0.0.D`, for which
  every version is considered breaking.

  [PVP]: <https://pvp.haskell.org/>
  [SemVer]: <https://semver.org/>

  The format of this changelog is based on [Keep a Changelog][KaC], with the
  following conventions:

  * Level-two heading `Unreleased` is used to track changes that have not been
    released.
  * Other level-two headings specify the release in `A.B.C.D (YYYY-MM-DD)`
    format, with newer versions above older versions.
  * Level-three headings are used to categorize changes as follows:
      1. Breaking
      2. Non-Breaking
  * Changes are listed in arbitrary order and present tense.

  [KaC]: <https://keepachangelog.com/en/1.0.0/>

  ## 0.5.0.1 (2022-03-02)

  ### Non-Breaking

  * Bump `optparse-applicative` dependency version upper bound

  ## 0.5.0.0 (2021-12-10)

  ### Breaking

  * Add `seqcp`
  * Check that each target directory is not a mount point
  * Call `sync` system call via FFI instead of running the `sync` command

  ### Non-Breaking

  * Add tests using mocking

  ## 0.4.0.0 (2021-06-25)

  ### Breaking

  * Fix `--help` when using `optparse-applicative` `0.16`

  ### Non-Breaking

  * Refactor Nix configuration

  ## 0.3.0.0 (2021-05-27)

  ### Breaking

  * Add support for `optparse-applicative` `0.16`

  ### Non-Breaking

  * Add `.deb` and `.rpm` packaging
  * Add Cabal support to `Makefile`
  * Add Cabal tests to GitHub Actions
  * Add [stan](https://hackage.haskell.org/package/stan) static analysis

  ## 0.2.0.2 (2020-11-23)

  ### Non-Breaking

  * Use GitHub Actions instead of Travis CI

  ## 0.2.0.1 (2020-11-08)

  ### Non-Breaking

  * Rename Git default branch to `main`

  ## 0.2.0.0 (2020-07-26)

  ### Breaking

  * Add syncing, `--no-sync` option

  ### Non-Breaking

  * Refactor `Makefile`, add `STACK_NIX_PATH` support
  * Add `test-all` command to `Makefile`
  * Add Nix configuration

  ## 0.1.0.3 (2019-12-22)

  ### Non-Breaking

  * Switch back to using `LibOA` instead of `optparse-applicative-supplement`

  ## 0.1.0.2 (2019-12-22)

  ### Non-Breaking

  * Use `optparse-applicative-supplement`

  ## 0.1.0.1 (2019-12-22)

  ### Non-Breaking

  * Add Travis CI
  * Turn off threading

  ## 0.1.0.0 (2019-12-21)

  ### Breaking

  * Initial public release
basic-deps:
  phatsort: -any
  ansi-wl-pprint: ==0.6.*
  MonadRandom: '>=0.5 && <0.6'
  base: '>=4.7 && <5'
  unix-compat: '>=0.5 && <0.6'
  filepath: '>=1.4 && <1.5'
  random-shuffle: '>=0.0.4 && <0.1'
  transformers: '>=0.5 && <0.6'
  optparse-applicative: '>=0.14 && <0.18'
  directory: '>=1.3 && <1.4'
all-versions:
- 0.5.0.1
author: Travis Cardwell <travis.cardwell@extrema.is>
latest: 0.5.0.1
description-type: markdown
description: |
  # PhatSort

  [![Project Status: Active â€“ The project has reached a stable, usable state and is being actively developed.](https://www.repostatus.org/badges/latest/active.svg)](https://www.repostatus.org/#active)
  [![GitHub CI](https://github.com/ExtremaIS/phatsort-haskell/workflows/CI/badge.svg?branch=main)](https://github.com/ExtremaIS/phatsort-haskell/actions)
  [![Hackage](https://img.shields.io/hackage/v/phatsort.svg)](https://hackage.haskell.org/package/phatsort)
  [![Stackage LTS](https://stackage.org/package/phatsort/badge/lts)](https://stackage.org/package/phatsort)
  [![Stackage Nightly](https://stackage.org/package/phatsort/badge/nightly)](https://stackage.org/nightly/package/phatsort)

  * [Overview](#overview)
  * [CLI](#cli)
      * [Requirements](#requirements)
      * [Installation](#installation)
          * [`.deb` Package Installation](#deb-package-installation)
          * [`.rpm` Package Installation](#rpm-package-installation)
          * [Installation From Hackage](#installation-from-hackage)
          * [Installation From Stackage](#installation-from-stackage)
      * [Usage](#usage)
  * [Related Software](#related-software)
  * [Project](#project)
      * [Links](#links)
      * [Tags](#tags)
      * [Contribution](#contribution)
      * [License](#license)

  ## Overview

  The PhatSort project provides two command-line utilities for sorting files
  and directories on FAT filesystems.  The `phatsort` utility sorts files and
  directories that are already on the filesystem.  The `seqcp` utility copies
  files and directories to the filesystem in sorted order.

  There are many MP3 players that allow you to mount the device as external
  storage and manage the media yourself.  The storage generally uses a FAT
  filesystem.  When copying multiple files onto the storage, using the command
  line (`cp`/`mv`) or a GUI, they are generally stored in an arbitrary order.
  This is not a problem if the firmware of the MP3 player sorts by filename, but
  many MP3 players use the order in the FAT filesystem without sorting, which
  results in podcasts and album tracks being played out of order.

  There are some utilities that sort the FAT tables of an unmounted filesystem.
  (See [Related Software](#related-software) for information and links.)
  Unfortunately, there are many devices for which this does not work.  PhatSort
  takes a different approach to solving the problem.  It works by creating new
  directories and moving ("renaming") the files in the desired order, while the
  filesystem is mounted.  This method works on all devices that have been tried
  so far.

  PhatSort also (optionally) forces the filesystem buffers to be written to the
  storage media after each change.  This helps avoid write failures when using
  devices that have problems with writing large amounts of data.  Note that the
  `seqcp` utility helps with this issue even on non-FAT filesystems.

  ## CLI

  ### Requirements

  PhatSort has only been tested on Linux.  It *might* work on other operating
  systems.  Scripts that are output use POSIX shell commands and therefore
  require a POSIX shell to execute.

  ### Installation

  #### `.deb` Package Installation

  Check the [Releases][] page for `.deb` packages.

  #### `.rpm` Package Installation

  [Releases]: <https://github.com/ExtremaIS/phatsort-haskell/releases>

  Check the [Releases][] page for `.rpm` packages.

  #### Installation From Hackage

  Install PhatSort from [Hackage][] using [Cabal][] as follows:

  ```
  $ cabal v2-install phatsort
  ```

  [Hackage]: <https://hackage.haskell.org/package/phatsort>
  [Cabal]: <https://www.haskell.org/cabal/>

  #### Installation From Stackage

  Install PhatSort from [Stackage][] using [Stack][] as follows:

  ```
  $ stack install phatsort
  ```

  [Stackage]: <https://www.stackage.org/package/phatsort>
  [Stack]: <https://haskellstack.org/>

  ### Usage

  See the [`phatsort`](doc/phatsort.1.md) and [`seqcp`](doc/seqcp.1.md) man
  pages for usage information.

  ## Related Software

  [`FATSort`](https://fatsort.sourceforge.io/) is a command-line utility that
  sorts unmounted FAT filesystems by direct manipulation of the FAT tables.
  Unfortunately, there are many devices for which this does not work.

  [`YAFS`](http://www.luisrios.eti.br/public/en_us/projects/yafs/) is a
  command-line utility that sorts unmounted FAT filesystems by direct
  manipulation of the FAT tables.
  [`Visual YAFS`](http://www.luisrios.eti.br/public/en_us/projects/visual_yafs/)
  provides a GUI.  I have not tried either of these.

  [`DriveSort`](http://www.anerty.net/software/file/DriveSort/) is Windows GUI
  software that sorts unmounted FAT filesystems by direct manipulation of the
  FAT tables.  I have not tried it.

  ## Project

  ### Links

  * Hackage: <https://hackage.haskell.org/package/phatsort>
  * Stackage: <https://www.stackage.org/package/phatsort>
  * GitHub: <https://github.com/ExtremaIS/phatsort-haskell>
  * GitHub Actions CI: <https://github.com/ExtremaIS/phatsort-haskell/actions>

  ### Tags

  All releases are tagged in the `main` branch.  Release tags are signed using
  the
  [`security@extrema.is` GPG key](http://keys.gnupg.net/pks/lookup?op=vindex&fingerprint=on&search=0x1D484E4B4705FADF).

  ### Contribution

  Issues and feature requests are tracked on GitHub:
  <https://github.com/ExtremaIS/phatsort-haskell/issues>

  Issues may also be submitted via email to <bugs@extrema.is>.

  ### License

  This project is released under the
  [MIT License](https://opensource.org/licenses/MIT) as specified in the
  [`LICENSE`](LICENSE) file.
license-name: MIT
