homepage: https://hackage.haskell.org/package/phonetic-languages-rhythmicity
changelog-type: markdown
hash: 672c525a6b90e8b4c707cbae490975f6f000a7be8816f7f0181828e819ab8ddd
test-bench-deps: {}
maintainer: oleksandr.zhabenko@yahoo.com
synopsis: Allows to estimate the rhythmicity properties for the text
changelog: "# Revision history for phonetic-languages-rhythmicity\n\n## 0.1.0.0 --
  2020-10-08\n\n* First version. Released on an unsuspecting world.\n\n## 0.1.0.1
  -- 2020-10-08\n\n* First version revised A. Improved computational simplicity.\n\n##
  0.1.1.0 -- 2020-10-19\n\n* First version revised B. Some code improvements.\n\n##
  0.1.2.0 -- 2020-10-20\n\n* First version revised C. Some code improvements.\n\n##
  0.2.0.0 -- 2021-02-01\n\n* Second version. Added a new module Languages.Rhythmicity.Factor
  with somewhat 'improved' versions of the similar functions\nin the Languages.Rhythmicity
  module. Some tuning for the all functions done. Some minor documentation improvements.\n\n##
  0.3.0.0 -- 2021-07-19\n\n* Third version. Added a new module Rhythmicity.TwoFourth
  with a different approach to the rhythmicity evaluation.\nIt is highly experimental.\n\n##
  0.3.1.0 -- 2021-07-20\n\n* Third version revised A. Added new functions to the module
  Rhythmicity.TwoFourth. Some code optimizations.\n\n## 0.3.2.0 -- 2021-07-20\n\n*
  Third version revised B. Some changes to the code and documentation in the Rhythmicity.TwoFourth
  module.\n\n## 0.4.0.0 -- 2021-07-27\n\n* Fourth version. Fixed some issues with
  the Rhythmicity.TwoFourth module. Added a new module Rhythmicity.PolyRhythm.\nAdded
  GHC extension usage of MultiWayIf.\n\n## 0.5.0.0 -- 2021-07-28\n\n* Fifth version.
  Added special data type and related parsing functionality to the module Rhythmicity.PolyRhythm.\n\n##
  0.5.1.0 -- 2021-07-30\n\n* Fifth version revised A. Fixed issues with fixed point
  1.0 for increasing and decreasing functions in the module\nRhythmicity.PolyRhythm.\n\n##
  0.5.2.0 -- 2021-08-04\n\n* Fifth version revised B. Added README.md file with conceptual
  description for the polyrhythmic ideas used in the moudules.\n\n## 0.5.3.0 -- 2021-08-07\n\n*
  Fifth version revised C. Improved the increasing and decreasing functions to reduce
  irregular and asymmetric\nbehaviours for the polyrhythm module. Added the corresponding
  information to the README.md file.\n\n## 0.5.4.0 -- 2021-08-07\n\n* Fifth version
  revised D. Fixed issue with x == 0.0 for the long lines for the numeric increasing
  and decreasing\nfunctions for the polyrhythmicity.\n\n## 0.6.0.0 -- 2021-08-09\n\n*
  Sixth version. Changed the increasing and decreasing functions for the polyrhythms
  and added new possibilities\namong which there are also generalized kernel-based
  functions. This should linearize and allow to specify different\nkernels that allows
  to control which parts of the line are the most important and which are less. Added
  the\ninformation to the README.md file.\n\n## 0.6.0.1 -- 2021-08-09\n\n* Sixth version
  revised A. Fixed issues with deprecated documentation for the polyrhythmicity functions.\n\n##
  0.7.0.0 -- 2021-08-14\n\n* Seventh version. The library tries more completely include
  the information for analysis. Besides,\nthere are first weighted increasing and
  decreasing functions and functionality respectively.\n\n## 0.8.0.0 -- 2021-08-16\n\n*
  Eigth version. Added also the weighted functions that try to increase the importance
  of the line ending\nand to decrease the importance of the beginnings.\n\n## 0.9.0.0
  -- 2021-08-17\n\n* Ninth version. Added also the linear weighted functions that
  try to increase / decrease the importance of the line ending\nand to decrease /increase
  the importance of the beginnings.\n\n## 0.9.1.0 -- 2021-08-24\n\n* Ninth version
  revised A. Fixed issues with the custom rhythmicity in the 'readRhythmicity' function.
  Some documentation\nimprovements.\n\n## 0.9.2.0 -- 2022-03-24\n\n* Ninth version
  revised B. Updated the dependency boundaries to support the latest GHC and Cabal
  versions.\n\n## 0.10.0.0 -- 2023-02-05\n\n* Tenth version. Switched to NoImplicitPrelude
  extension. Changed the computational schemes in the Phladiprelio.Rhythmicity.Simple
  and \nPhladiprelio.Rhythmicity.Factor modules. Updated the dependency boundaries.\n\n##
  0.10.1.0 -- 2023-02-05\n\n* Tenth version revised A. Fixed issues with maxPosition2F
  function. \n"
basic-deps:
  base: '>=4.13 && <5'
all-versions:
- 0.10.1.0
author: OleksandrZhabenko
latest: 0.10.1.0
description-type: markdown
description: |2
   Polyrhythm as a Multi-Ordered Sequence Pattern
   ==============================================

  Let us have some sequence organized in the following way.
  Let us implement (generally speaking a conditional one)
  division of the sequence into compact single-connected
  subgroups with the same number of elements each in the
  subgroup, which actually means that we split the sequence
  into a sequence of subsequences with the same number of
  elements in each. Consider the internal ordering of each
  subsequence from the perspective of the placement of the
  values ​​of its elements and repeatability of the some
  patterns of the placement of the elements.
  We assume that the elements can be compared in relation of
  order, that is, they are the elements of the data type
  that has an implemented instance of the class Ord.

  Considering that the elements of the subsequences may be
  pairwise different (or in some cases equal), we will
  compare the positions on which the subgroups of elements
  that have a higher degree of relatedness ("closeness",
  "similarity") in value and order are located.
  Denote such subgroups by indices that have in the module
  code mostly a letter designation.

  Then each subsequence will consist of the same number of
  elements of one nature (in particular, numbers of the
  type Double), in each subsequence there will be selected
  several subgroups of "similar" elements in value (and
  order, if the subsequences are sorted by the value),
  each of which will have its own index as a symbol
  (most often in the code -- the characters). Subgroups must
  have (actually approximately) the same number of elements
  (in the code it is not strictly used for simplification
  of the former one, but it is so in the vast majority of
  cases because of the excessive "accuracy" of numbers of
  type Double that are used). Consider the question of
  positions in the subsequences of the corresponding
  subgroups in case of they have been belonging to different
  subsequences.

  To assess this, we introduce certain numerical functions
  (see the information below)
  that have regular behavior and allow us to determine
  whether the subsequences actually have elements that
  belong to the relevant corresponding subgroups in the
  same places, or on different ones. It can be shown that
  the situation "on different ones" corresponds to the
  presence of several rhythmimc patterns - for each subgroup
  will be their own, which do not mutually match, at the
  same time the ideal situation "completely in the same places"
  corresponds to the case when these rhythms are consistent
  with each other, as is the case of coherence in quantum
  physics, in particular spatial and temporal coherence,
  which is important in particular for understanding of
  lasers and masers. Polyrhythms consisting of such
  rhythms, which cohere with each other, form a more
  noticeable overall rhythm, as well as the presence of
  coherence in the radiation leads to a more structured
  latter one.

   Coherent States of Polyrhythmicity as One of the Essential Sources of Rhythmicity
   =================================================================================

  The described pattern of rhythmicity is one of the
  significant possible options for the formation of
  rhythmicity in particular in lyrics or music, but not the
  only one. It should be noted that the described mechanism
  of rhythm formation, as is noticed in the statistical
  experiments with texts using this code (the code of the
  library and its dependent packages on the Hackage site)
  may not be the only possible option, but in many cases it
  is crucial and influences the course of the rhythmization
  process (formation, change or disappearance of the
  rhythm). It is also known that the presence of the
  statistical relationship does not mean the existence of
  deeper connections between phenomena, in particular --
  the causality. "Correlation does not mean causality."
  A deeper connection implies the presence of other than the
  statistical ones to confirm it.

   Rap Music Consequences
   =====================

  The code of the library allows in practice to obtain
  rhythmic patterns that are often close to the lyrics in
  rap style. Therefore, this can be attributed to one of
  the direct applications of the library.

   Increasing and Decreasing Functions
   ===================================

  Since the 0.5.3.0 version the increasing and decreasing
  functions for the polyrhythmicity evaluation have become
  more similar to be more likewise the inverse one to
  another. This leads to that fact that these functions
  now are expected to be smoother for usage for the
  beginning of the line, its middle and its ending.

  Since the 0.6.0.0 version these functions became more
  linearized and there is also library possibility to
  specify kernels for them to control which parts
  of the line are more important and which are less.

  Since the 0.7.0.0 version the program tries more
  completely include the information for analysis. Besides,
  there are first weighted increasing and decreasing
  functions and functionality respectively.

  Since the 0.8.0.0 version added the weighted functions
  that try to increase the importance of the line ending
  and to decrease the importance of the beginnings.
license-name: MIT
