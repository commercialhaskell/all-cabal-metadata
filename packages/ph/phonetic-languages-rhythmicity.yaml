homepage: https://hackage.haskell.org/package/phonetic-languages-rhythmicity
changelog-type: markdown
hash: c03235f4e0248c13c0a60fd43cc78aee35e96f6e466784b8ab2f240f1814388b
test-bench-deps: {}
maintainer: oleksandr.zhabenko@yahoo.com
synopsis: Allows to estimate the rhythmicity properties for the text
changelog: "# Revision history for phonetic-languages-rhythmicity\n\n## 0.1.0.0 --
  2020-10-08\n\n* First version. Released on an unsuspecting world.\n\n## 0.1.0.1
  -- 2020-10-08\n\n* First version revised A. Improved computational simplicity.\n\n##
  0.1.1.0 -- 2020-10-19\n\n* First version revised B. Some code improvements.\n\n##
  0.1.2.0 -- 2020-10-20\n\n* First version revised C. Some code improvements.\n\n##
  0.2.0.0 -- 2021-02-01\n\n* Second version. Added a new module Languages.Rhythmicity.Factor
  with somewhat 'improved' versions of the similar functions\nin the Languages.Rhythmicity
  module. Some tuning for the all functions done. Some minor documentation improvements.\n\n##
  0.3.0.0 -- 2021-07-19\n\n* Third version. Added a new module Rhythmicity.TwoFourth
  with a different approach to the rhythmicity evaluation.\nIt is highly experimental.\n\n##
  0.3.1.0 -- 2021-07-20\n\n* Third version revised A. Added new functions to the module
  Rhythmicity.TwoFourth. Some code optimizations.\n\n## 0.3.2.0 -- 2021-07-20\n\n*
  Third version revised B. Some changes to the code and documentation in the Rhythmicity.TwoFourth
  module.\n\n## 0.4.0.0 -- 2021-07-27\n\n* Fourth version. Fixed some issues with
  the Rhythmicity.TwoFourth module. Added a new module Rhythmicity.PolyRhythm.\nAdded
  GHC extension usage of MultiWayIf.\n\n## 0.5.0.0 -- 2021-07-28\n\n* Fifth version.
  Added special data type and related parsing functionality to the module Rhythmicity.PolyRhythm.\n\n##
  0.5.1.0 -- 2021-07-30\n\n* Fifth version revised A. Fixed issues with fixed point
  1.0 for increasing and decreasing functions in the module\nRhythmicity.PolyRhythm.\n\n##
  0.5.2.0 -- 2021-08-04\n\n* Fifth version revised B. Added README.md file with conceptual
  description for the polyrhythmic ideas used in the moudules.\n\n## 0.5.3.0 -- 2021-08-07\n\n*
  Fifth version revised C. Improved the increasing and decreasing functions to reduce
  irregular and asymmetric\nbehaviours for the polyrhythm module. Added the corresponding
  information to the README.md file.\n\n## 0.5.4.0 -- 2021-08-07\n\n* Fifth version
  revised D. Fixed issue with x == 0.0 for the long lines for the numeric increasing
  and decreasing\nfunctions for the polyrhythmicity.\n\n## 0.6.0.0 -- 2021-08-09\n\n*
  Sixth version. Changed the increasing and decreasing functions for the polyrhythms
  and added new possibilities\namong which there are also generalized kernel-based
  functions. This should linearize and allow to specify different\nkernels that allows
  to control which parts of the line are the most important and which are less. Added
  the\ninformation to the README.md file.\n\n## 0.6.0.1 -- 2021-08-09\n\n* Sixth version
  revised A. Fixed issues with deprecated documentation for the polyrhythmicity functions.\n\n##
  0.7.0.0 -- 2021-08-14\n\n* Seventh version. The library tries more completely include
  the information for analysis. Besides,\nthere are first weighted increasing and
  decreasing functions and functionality respectively.\n\n## 0.8.0.0 -- 2021-08-16\n\n*
  Eigth version. Added also the weighted functions that try to increase the importance
  of the line ending\nand to decrease the importance of the beginnings.\n\n## 0.9.0.0
  -- 2021-08-17\n\n* Ninth version. Added also the linear weighted functions that
  try to increase / decrease the importance of the line ending\nand to decrease /increase
  the importance of the beginnings.\n\n## 0.9.1.0 -- 2021-08-24\n\n* Ninth version
  revised A. Fixed issues with the custom rhythmicity in the 'readRhythmicity' function.
  Some documentation\nimprovements.\n\n## 0.9.2.0 -- 2022-03-24\n\n* Ninth version
  revised B. Updated the dependency boundaries to support the latest GHC and Cabal
  versions.\n\n## 0.10.0.0 -- 2023-02-05\n\n* Tenth version. Switched to NoImplicitPrelude
  extension. Changed the computational schemes in the Phladiprelio.Rhythmicity.Simple
  and \nPhladiprelio.Rhythmicity.Factor modules. Updated the dependency boundaries.\n\n##
  0.10.1.0 -- 2023-02-05\n\n* Tenth version revised A. Fixed issues with maxPosition2F
  function. \n\n## 0.10.2.0 -- 2023-02-05\n\n* Tenth version revised B. Normed the
  functions in the Phladiprelio.Rhythmicity.Simple and Phladiprelio.Rhythmicity.Factor
  modules.\n\n## 0.11.0.0 -- 2023-03-13\n\n* Eleventh version. Moved the shared by
  different implementations functionality to a new package. Some documentation changes.\n\n##
  0.11.0.1 -- 2023-03-15\n\n* Eleventh version revised A. Improved the metadata and
  documentation so that the \nchanges in the previous version are clear.\n\n## 0.11.0.2
  -- 2023-03-15\n\n* Eleventh version revised B. Fixed issue with incorrect documentation
  link to other package.\n \n"
basic-deps:
  base: '>=4.13 && <5'
all-versions:
- 0.11.0.2
author: OleksandrZhabenko
latest: 0.11.0.2
description-type: markdown
description: "Since the version 0.11.0.0 the modules Phladiprelio.Rhythmicity.Simple\nand
  Phladiprelio.Rhythmicity.Factor moved to the other package \n[phladiprelio-rhythmicity-shared](https://hackage.haskell.org/package/phladiprelio-rhythmicity-shared)\nso
  that it can be shared between different implementations of \nPhLADiPreLiO.\n\nPolyrhythm
  as a Multi-Ordered Sequence Pattern\n ==============================================\n\nLet
  us have some sequence organized in the following way.\nLet us implement (generally
  speaking a conditional one)\ndivision of the sequence into compact single-connected\nsubgroups
  with the same number of elements each in the\nsubgroup, which actually means that
  we split the sequence\ninto a sequence of subsequences with the same number of\nelements
  in each. Consider the internal ordering of each\nsubsequence from the perspective
  of the placement of the\nvalues of its elements and repeatability of the some\npatterns
  of the placement of the elements.\nWe assume that the elements can be compared in
  relation of\norder, that is, they are the elements of the data type\nthat has an
  implemented instance of the class Ord.\n\nConsidering that the elements of the subsequences
  may be\npairwise different (or in some cases equal), we will\ncompare the positions
  on which the subgroups of elements\nthat have a higher degree of relatedness (\"closeness\",\n\"similarity\")
  in value and order are located.\nDenote such subgroups by indices that have in the
  module\ncode mostly a letter designation.\n\nThen each subsequence will consist
  of the same number of\nelements of one nature (in particular, numbers of the\ntype
  Double), in each subsequence there will be selected\nseveral subgroups of \"similar\"
  elements in value (and\norder, if the subsequences are sorted by the value),\neach
  of which will have its own index as a symbol\n(most often in the code -- the characters).
  Subgroups must\nhave (actually approximately) the same number of elements\n(in the
  code it is not strictly used for simplification\nof the former one, but it is so
  in the vast majority of\ncases because of the excessive \"accuracy\" of numbers
  of\ntype Double that are used). Consider the question of\npositions in the subsequences
  of the corresponding\nsubgroups in case of they have been belonging to different\nsubsequences.\n\nTo
  assess this, we introduce certain numerical functions\n(see the information below)\nthat
  have regular behavior and allow us to determine\nwhether the subsequences actually
  have elements that\nbelong to the relevant corresponding subgroups in the\nsame
  places, or on different ones. It can be shown that\nthe situation \"on different
  ones\" corresponds to the\npresence of several rhythmimc patterns - for each subgroup\nwill
  be their own, which do not mutually match, at the\nsame time the ideal situation
  \"completely in the same places\"\ncorresponds to the case when these rhythms are
  consistent\nwith each other, as is the case of coherence in quantum\nphysics, in
  particular spatial and temporal coherence,\nwhich is important in particular for
  understanding of\nlasers and masers. Polyrhythms consisting of such\nrhythms, which
  cohere with each other, form a more\nnoticeable overall rhythm, as well as the presence
  of\ncoherence in the radiation leads to a more structured\nlatter one.\n\n Coherent
  States of Polyrhythmicity as One of the Essential Sources of Rhythmicity\n =================================================================================\n\nThe
  described pattern of rhythmicity is one of the\nsignificant possible options for
  the formation of\nrhythmicity in particular in lyrics or music, but not the\nonly
  one. It should be noted that the described mechanism\nof rhythm formation, as is
  noticed in the statistical\nexperiments with texts using this code (the code of
  the\nlibrary and its dependent packages on the Hackage site)\nmay not be the only
  possible option, but in many cases it\nis crucial and influences the course of the
  rhythmization\nprocess (formation, change or disappearance of the\nrhythm). It is
  also known that the presence of the\nstatistical relationship does not mean the
  existence of\ndeeper connections between phenomena, in particular --\nthe causality.
  \"Correlation does not mean causality.\"\nA deeper connection implies the presence
  of other than the\nstatistical ones to confirm it.\n\n Rap Music Consequences\n
  =====================\n\nThe code of the library allows in practice to obtain\nrhythmic
  patterns that are often close to the lyrics in\nrap style. Therefore, this can be
  attributed to one of\nthe direct applications of the library.\n\n Increasing and
  Decreasing Functions\n ===================================\n\nSince the 0.5.3.0
  version the increasing and decreasing\nfunctions for the polyrhythmicity evaluation
  have become\nmore similar to be more likewise the inverse one to\nanother. This
  leads to that fact that these functions\nnow are expected to be smoother for usage
  for the\nbeginning of the line, its middle and its ending.\n\nSince the 0.6.0.0
  version these functions became more\nlinearized and there is also library possibility
  to\nspecify kernels for them to control which parts\nof the line are more important
  and which are less.\n\nSince the 0.7.0.0 version the program tries more\ncompletely
  include the information for analysis. Besides,\nthere are first weighted increasing
  and decreasing\nfunctions and functionality respectively.\n\nSince the 0.8.0.0 version
  added the weighted functions\nthat try to increase the importance of the line ending\nand
  to decrease the importance of the beginnings.\n\n Devotion\n ========\n\nThe author
  would like to devote this project to support the [Foundation\nGASTROSTARS](https://gastrostars.nl).\nIf
  you would like to share some financial support, please, contact the foundation\nusing
  the URL:\n\nhttps://gastrostars.nl/hou-mij-op-de-hoogte\n\n"
license-name: MIT
