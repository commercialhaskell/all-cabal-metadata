all-versions:
- 0.1.0.0
author: Josh Acay
basic-deps:
  base: '>=4.6 && <4.7'
changelog: ''
changelog-type: ''
description: |
  # G4ip

  Implementation of a theorem prover for propositional logic using G4ip in Haskell.


  ## File Structure

  * G4ip/Proposition.hs  -- Definition of propositions and some syntactic sugar
  * G4ip/Decider.hs      -- The actual theorem prover (decider?)
  * G4ip/Tester.hs       -- For defining and running tests
  * G4ip/TestMain.hs     -- Actually runs the default test suite


  ## Testing Manually

  * Startup `ghci`
  * Load `Main.hs` by typing `:l Main`
  * Use `decide prop` to see if `prop` is provable.

  You can use `T`, `F`, `/\`, `\/`, `==>`, `<==`, `<=>`, `neg`, and `()` with their usual meanings to form propositions. To form an atom, either use `Atom "name"` or use one of the predefined atoms: `a`, `b`, `c`, `d`, `e`, or `f`. Here is an example:

  ```
  decide $ (neg b ==> neg a) ==> (a ==> b) \/ (a \/ a ==> a)
  ```

  which prints `True` as expected (`$` if for associativity, you can use parenthesis if you want).


  ## Contact

  Email me at coskuacay@gmail.com for any questions.
description-type: markdown
hash: 0aa50a3fc32fd8eb0245a8b4a581679f57d957fe85777666a431fd51bc213d95
homepage: https://github.com/cacay/G4ip
latest: 0.1.0.0
license-name: MIT
maintainer: coskuacay@gmail.com
synopsis: A theorem prover for propositional logic that uses G4ip
test-bench-deps:
  base: '>=4.6 && <4.7'
  g4ip: '>=0'
