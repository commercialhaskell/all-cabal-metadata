homepage: https://github.com/ocharles/weeder#readme
changelog-type: markdown
hash: 59643b4ea1c917f2870ed288adf3a5e5cf296c75c5360b4847917dd1be1bc1a7
test-bench-deps:
  ghc: -any
  weeder: -any
  toml-reader: -any
  base: -any
  hspec: -any
  text: -any
  filepath: -any
  process: -any
  silently: -any
  algebraic-graphs: -any
  aeson: -any
  directory: -any
maintainer: Ollie Charles <ollie@ocharles.org.uk>
synopsis: Detect dead code
changelog: "# Changelog\nAll notable changes to this project will be documented in
  this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand
  is generated by [Changie](https://github.com/miniscruff/changie).\n\n\n## 2.6.0
  - 2023-07-07\n### Added\n* Weeder now supports GHC 9.6.\n### Changed\n* Weeder now
  uses [TOML](https://toml.io) as a configuration format. Please see Weeder's `README`
  for more information on the configuration format.\n* Weeder now sorts weeds in a
  single file by ascending line number\n### Fixed\n* Weeder now internally adds declarations
  once. This shouldn't result in any user visible changes, but may improve performance.\n\n###
  [`2.5.0`][v2.5.0] - *2023-01-23*\n \n- Weeder has been upgraded to support GHC 9.4
  (only). As this changes the\n  format of `.hie` files accepted, this is a major
  version bump. Thanks to @tfausak!\n\n### [`2.4.1`][v2.4.1] - *2023-01-05*\n\n- Build
  with `lens-5.2`\n\n### [`2.4.0`][v2.4.0] - *2022-05-22*\n\n- Weeder has been upgraded
  to support GHC 9.2 (only). As this changes the\n  format of `.hie` files accepted,
  this is a major version bump.\n\n### [`2.3.1`][v2.3.1] - *2022-05-21*\n\nThis is
  the last release of `weeder` compatible with GHC 9.0.\n\n- Weeder now analyzes top-level
  pattern bindings. For example, with the following input:\n\n    ```haskell\n    module
  Dep (a, b) where\n\n    xxx :: Int\n    xxx = 3\n\n    a, b :: Int\n    (a, b) =
  (xxx, 1)\n    ```\n\n    ... `weeder` will determine that both `a` and `b` depend
  on `xxx`. While this is an over-approximation, it prevents weeder from reporting
  false positives. For more information, see [#92](https://github.com/ocharles/weeder/issues/92).\n\n-
  Corrected a typo in `--help` ([#96](https://github.com/ocharles/weeder/pull/96)).\n-
  Shorten the help text for `--require-hs-files` ([#97](https://github.com/ocharles/weeder/pull/97)).\n-
  Allow `algebraic-graphs-0.6` ([#95](https://github.com/ocharles/weeder/pull/95)).\n-
  Allow Dhall 1.41 ([#99](https://github.com/ocharles/weeder/pull/99)).\n- Allow `optparse-applicative-0.17`
  ([#100](https://github.com/ocharles/weeder/pull/100)).\n\n### [`2.3.0`][v2.3.0]
  - *2021-10-11*\n\n- Switch to GHC 9\n\n### [`2.2.0`][v2.2.0] - *2021-08-28*\n\nThis
  will likely be the last Weeder release before GHC 9.\n\n- Allow configuration of
  the HIE file extension using the `--hie-extension` command-line flag\n- Add `--require-hs-files`
  switch. If supplied, this switch means Weeder will only consider `.hie` files where
  a corresponding `.hs` file can be found. ([#50](https://github.com/ocharles/weeder/pull/50))\n-
  Pattern synonyms are now considered ([#79](https://github.com/ocharles/weeder/pull/79))\n-
  Weeder's output format is now one-line-per-weed ([#62](https://github.com/ocharles/weeder/pull/62))\n-
  `--hie-extension` can be used to change the extension used for `.hie` files ([#64](https://github.com/ocharles/weeder/pull/64))\n\n###
  [`2.1.3`][v2.1.3] - *2020-12-11*\n\n- Support `dhall-1.35`, `dhall-1.36` and `dhall-1.37`.\n-
  Support `bytestring-0.11`.\n\n### [`2.1.2`][v2.1.2] - *2020-09-09*\n\n- Correctly
  support optparse-applicative 0.16.0.0. While this was meant to be resolved 2.1.1,
  2.1.1 only changed the version for the library and not the executable.\n\n### [`2.1.1`][v2.1.1]
  - *2020-09-09*\n\n- Support Dhall 1.34\n- Support optparse-applicative 0.16.0.0\n\n###
  [`2.1.0`][v2.1.0] - *2020-06-30*\n\n- Support regex-tdfa ^>= 1.2 (#13)\n- Handle
  mismatched hie file version explicitly (fixes #8). (#16)\n- Implement --help and
  --version (#36)\n- Make search directory configurable (#37)\n- Support GHC 8.10\n\n###
  [`2.0.1`][v2.0.1] - *2020-03-15*\n\n- PR #7: Support optparse-applicative-0.15.1.0
  and algebraic-graphs-0.5. Thanks\n  to @robx for contribuiting this fix!\n\n\n###
  [`2.0.0`][v2.0.0] - *2020-03-15*\n\n- Weeder 2.0 is a ground up rewrite of Weeder
  using `.hie` files. It is now\nmaintained by Ollie Charles (@ocharles on GitHub).\n\n-
  **Note:**\n\n  Issue numbers *before* this version reference to the original repository
  here:\n\n    - https://github.com/ndmitchell/weeder\n\n  Issue numbers *after*  this
  version reference to the new repository here:\n\n    - https://github.com/ocharles/weeder\n\n\n###
  [`1.0.8`][v1.0.8] - *2018-08-26*\n\n- #42, make paths case-insensitive on MacOS\n\n\n###
  [`1.0.7`][v1.0.7] - *2018-08-23*\n\n- Don't warn on base as it is used by Paths_
  modules\n\n- #42, make --verbose print out the version number\n\n- #41, make the
  --help output clear you can pass a stack.yaml\n\n\n### [`1.0.6`][v1.0.6] - *2018-06-16*\n\n-
  Don't fail with an error if stack setup is necessary\n\n- If you fail to find stack.yaml
  give a better error message\n\n\n### [`1.0.5`][v1.0.5] - *2018-05-05*\n\n- #39,
  provide weeder as a library\n\n\n### [`1.0.4`][v1.0.4] - *2018-05-02*\n\n- #38,
  make sure you parse bracketed version ranges properly\n\n\n### [`1.0.3`][v1.0.3]
  - *2018-03-04*\n\n- #35, support ^>= operator in Cabal\n\n\n### [`1.0.2`][v1.0.2]
  - *2018-03-01*\n\n- Add lower bounds for Yaml and Aeson\n\n\n### [`1.0.1`][v1.0.1]
  - *2018-02-23*\n\n- #34, support -any for version numbers\n\n\n### [`1.0`][v1.0]
  - *2018-01-22*\n\n- #30, bump the version number to 1.0\n\n\n### [`0.1.13`][v0.1.13]
  - *2018-01-17*\n\n- #32, find .hi files in more places\n\n- #32, always disable
  color when running stack\n\n\n### [`0.1.12`][v0.1.12] - *2018-01-16*\n\n- Make available
  on Mac\n\n\n### [`0.1.11`][v0.1.11] - *2017-12-29\n\n- #29, deal with case-insensitive
  FilePath on Windows\n\n\n### [`0.1.10`][v0.1.10] - *2017-12-28*\n\n- Make --verbose
  print out the directory when running commands\n\n- Don't report semigroups as unused
  on any platforms\n\n\n### [`0.1.9`][v0.1.9] - *2017-12-07*\n\n- Don't report Win32/unix
  as unused on the alternate platform\n\n\n### [`0.1.8`][v0.1.8] - *2017-12-06*\n\n-
  Follow both branches for if/else containing dependencies/modules\n\n\n### [`0.1.7`][v0.1.7]
  - *2017-08-09*\n\n- #21, detect dependencies that are only required transitively\n\n-
  #13, respect the STACK_YAML environment variable\n\n- #20, add verbosity messages
  in a lot of places\n\n- #15, tone down unused import if exporting a cross-package
  type\n\n- #11, optimise execution speed (~3x faster)\n\n\n### [`0.1.6`][v0.1.6]
  - *2017-06-18*\n\n- #10, find files generated by alex/happy\n\n\n### [`0.1.5`][v0.1.5]
  - *2017-06-02*\n\n- If --yaml and no hints give no output\n\n\n### [`0.1.4`][v0.1.4]
  - *2017-05-27*\n\n- #9, allow --dist-dir to set the stack dist-dir\n\n- Deal with
  operators including | in them\n\n- Allow arrays of arrays of strings in the .weeder.yaml\n\n\n###
  [`0.1.3`][v0.1.3] - *2017-05-08*\n\n- #5, document how to install weeder\n\n- #8,
  detect unused imports, even import Foo()\n\n- #7, don't say modules with only instances
  are always redundant\n\n- #6, don't give partial pattern matches when reading .weeder.yaml\n\n\n###
  [`0.1.2`][v0.1.2] - *2017-04-29*\n\n- #3, deal with space-separated hs-source-dirs\n\n\n###
  [`0.1.1`][v0.1.1] - *2017-04-29*\n\n- #2, use \"stack query\" rather than parsing
  stack.yaml\n\n\n### [`0.1`][v0.1] - *2017-04-28*\n\n- Initial version\n\n\n[v2.4.1]:
  https://github.com/ocharles/weeder/releases/tag/2.4.1\n[v2.4.0]: https://github.com/ocharles/weeder/releases/tag/2.4.0\n[v2.3.1]:
  https://github.com/ocharles/weeder/releases/tag/2.3.1\n[v2.3.0 ]: https://github.com/ocharles/weeder/releases/tag/2.3.0\n[v2.2.0
  ]: https://github.com/ocharles/weeder/releases/tag/2.2.0\n[v2.1.3 ]: https://github.com/ocharles/weeder/releases/tag/2.1.3\n[v2.1.2
  ]: https://github.com/ocharles/weeder/releases/tag/2.1.2\n[v2.1.1 ]: https://github.com/ocharles/weeder/releases/tag/2.1.1\n[v2.1.0
  ]: https://github.com/ocharles/weeder/releases/tag/2.1.0\n[v2.0.1 ]: https://github.com/ocharles/weeder/releases/tag/2.0.1\n[v2.0.0
  ]: https://github.com/ocharles/weeder/releases/tag/2.0.0\n[v1.0.8 ]: https://github.com/ndmitchell/weeder/tree/v1.0.8\n[v1.0.7
  ]: https://github.com/ndmitchell/weeder/tree/v1.0.7\n[v1.0.6 ]: https://github.com/ndmitchell/weeder/tree/v1.0.6\n[v1.0.5
  ]: https://github.com/ndmitchell/weeder/tree/v1.0.5\n[v1.0.4 ]: https://github.com/ndmitchell/weeder/tree/v1.0.4\n[v1.0.3
  ]: https://github.com/ndmitchell/weeder/tree/v1.0.3\n[v1.0.2 ]: https://github.com/ndmitchell/weeder/tree/v1.0.2\n[v1.0.1
  ]: https://github.com/ndmitchell/weeder/tree/v1.0.1\n[v1.0   ]: https://github.com/ndmitchell/weeder/tree/v1.0\n[v0.1.13]:
  https://github.com/ndmitchell/weeder/tree/v0.1.13\n[v0.1.12]: https://github.com/ndmitchell/weeder/tree/v0.1.12\n[v0.1.11]:
  https://github.com/ndmitchell/weeder/tree/v0.1.11\n[v0.1.10]: https://github.com/ndmitchell/weeder/tree/v0.1.10\n[v0.1.9
  ]: https://github.com/ndmitchell/weeder/tree/v0.1.9\n[v0.1.8 ]: https://github.com/ndmitchell/weeder/tree/v0.1.8\n[v0.1.7
  ]: https://github.com/ndmitchell/weeder/tree/v0.1.7\n[v0.1.6 ]: https://github.com/ndmitchell/weeder/tree/v0.1.6\n[v0.1.5
  ]: https://github.com/ndmitchell/weeder/tree/v0.1.5\n[v0.1.4 ]: https://github.com/ndmitchell/weeder/tree/v0.1.4\n[v0.1.3
  ]: https://github.com/ndmitchell/weeder/tree/v0.1.3\n[v0.1.2 ]: https://github.com/ndmitchell/weeder/tree/v0.1.2\n[v0.1.1
  ]: https://github.com/ndmitchell/weeder/tree/v0.1.1\n[v0.1   ]: https://github.com/ndmitchell/weeder/tree/v0.1\n"
basic-deps:
  ghc: ==9.4.* || ==9.6.*
  weeder: -any
  bytestring: '>=0.10.9.0 && <0.11 || >=0.11.0.0 && <0.12'
  toml-reader: ^>=0.2.0.0
  base: '>=4.17.0.0 && <4.18 || >=4.18.0.0 && <4.19'
  text: ^>=2.0.1
  filepath: '>=1.4.2.1 && <1.5'
  containers: '>=0.6.2.1 && <0.7'
  lens: ^>=5.1 || ^>=5.2
  regex-tdfa: ^>=1.2.0.0 || ^>=1.3.1.0
  mtl: ^>=2.2.2 || ^>=2.3
  generic-lens: ^>=2.2.0.0
  transformers: '>=0.5.6.2 && <0.7'
  optparse-applicative: '>=0.14.3.0 && <0.15 || >=0.15.1.0 && <0.16 || >=0.16.0.0
    && <0.18'
  algebraic-graphs: ^>=0.7
  directory: '>=1.3.3.2 && <1.4'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.1.8
- 0.1.9
- 0.1.10
- 0.1.11
- 0.1.12
- 0.1.13
- '1.0'
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.0.8
- 1.0.9
- 2.0.0
- 2.0.1
- 2.1.0
- 2.1.1
- 2.1.2
- 2.1.3
- 2.2.0
- 2.3.0
- 2.3.1
- 2.4.0
- 2.4.1
- 2.5.0
- 2.6.0
author: Ollie Charles <ollie@ocharles.org.uk>
latest: 2.6.0
description-type: markdown
description: |
  # Weeder

  Weeder is an application to perform whole-program dead-code analysis. Dead code
  is code that is written, but never reachable from any other code. Over the
  lifetime of a project, this happens as code is added and removed, and leftover
  code is never cleaned up. While GHC has warnings to detect dead code is a single
  module, these warnings don't extend across module boundaries - this is where
  Weeder comes in.

  Weeder uses HIE files produced by GHC - these files can be thought of as source
  code that has been enhanced by GHC, adding full symbol resolution and type
  information. Weeder builds a dependency graph from these files to understand how
  code interacts. Once all analysis is done, Weeder performs a traversal of this
  graph from a set of roots (e.g., your `main` function), and determines which
  code is reachable and which code is dead.

  # Using Weeder

  ## Preparing Your Code for Weeder

  To use Weeder, you will need to generate `.hie` files from your source code.

  ### Cabal

  If you use Cabal, this is easily done by adding one line to your
  `cabal.project.local` file:

  ``` cabal
  package *
    ghc-options: -fwrite-ide-info
  ```

  Once this has been added, perform a full rebuild of your project:

  ``` shell
  cabal clean
  cabal build all
  ```

  ### Stack

  If you use `stack`, add the following to your `stack.yaml`:

  ``` yaml
  ghc-options:
    "$locals": -fwrite-ide-info
  ```

  and rebuild:

  ``` shell
  stack clean
  stack build
  ```

  ## Calling Weeder

  To call Weeder, you first need to provide a configuration file, `weeder.toml`. Weeder uses
  [TOML](https://toml.io/en/) as its configuration format.

  `roots` is a list of regular expressions of symbols that are considered as
  alive. If you're building an executable, the pattern `^Main.main$` is a
  good starting point - specifying that `main` is a root. Weeder currently doesn't
  add all exported functions as roots automatically but in many cases `main` from a
  test suite could be a good workaround for that

  `type-class-roots` configures whether or not Weeder should consider anything in
  a type class instance as a root. Weeder is currently unable to add dependency
  edges into type class instances, and without this flag may produce false
  positives. It's recommended to initially set this to `True`:

  ``` toml
  roots = [ "^Main.main$" ]
  type-class-roots = true
  ```

  Now invoke the `weeder` executable, and - if your project has weeds - you will
  see something like the following:

  ``` shell
  $ weeder
  src/Dhall/TH.hs:187: toDeclaration
  src/Dhall/TH.hs:196: toNestedHaskellType
  ```

  … which indicates the location of two unused symbols.
  (Please note these warnings are just for demonstration and not necessarily weeds
  in the Dhall project).

  # Tips

  - You may want to add `^Paths_.*` to the roots in `weeder.toml` to ignore the
    `Paths_packageName` module automatically generated by Cabal.

  # Limitations

  Weeder currently has a few limitations:

  ## Type Class Instances

  Weeder is not currently able to analyse whether a type class instance is used.
  For this reason, Weeder adds all symbols referenced to from a type class
  instance to the root set, keeping this code alive. In short, this means Weeder
  might not detect dead code if it's used from a type class instance which is
  never actually needed.

  You can toggle whether Weeder consider type class instances as roots with the
  `type-class-roots` configuration option.

  ## Template Haskell

  Weeder is currently unable to parse the result of a Template Haskell splice. If
  some Template Haskell code refers to other source code, this dependency won't be
  tracked by Weeder, and thus Weeder might end up with false positives.
license-name: BSD-3-Clause
