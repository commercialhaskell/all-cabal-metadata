all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.1.8
- 0.1.9
- 0.1.10
- 0.1.11
- 0.1.12
- 0.1.13
- '1.0'
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.0.8
- 1.0.9
- 2.0.0
- 2.0.1
- 2.1.0
- 2.1.1
- 2.1.2
- 2.1.3
- 2.2.0
- 2.3.0
- 2.3.1
- 2.4.0
- 2.4.1
- 2.5.0
- 2.6.0
- 2.7.0
- 2.8.0
- 2.9.0
- 2.10.0
author: Ollie Charles <ollie@ocharles.org.uk>
basic-deps:
  Glob: ^>=0.9 || ^>=0.10
  algebraic-graphs: ^>=0.7
  async: ^>=2.2.0
  base: '>=4.17 && <4.22'
  bytestring: '>=0.10.9 && <0.13'
  containers: '>=0.6.2.1 && <0.9'
  directory: ^>=1.3.3.2
  filepath: ^>=1.4.2.1 || ^>=1.5
  generic-lens: ^>=2.2.0.0
  ghc: '>=9.4 && <9.13'
  lens: '>=5.1 && <5.4'
  mtl: ^>=2.2.2 || ^>=2.3
  optparse-applicative: '>=0.14.3 && <0.20'
  parallel: ^>=3.2.0.0
  regex-tdfa: ^>=1.2.0.0 || ^>=1.3.1.0
  text: ^>=2.0.1 || ^>=2.1
  toml-reader: '>=0.2.0.0 && <0.3.1'
  transformers: ^>=0.5.6.2 || ^>=0.6
  weeder: '>=0'
changelog: "# Changelog\nAll notable changes to this project will be documented in
  this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/).\n\n##
  2.10.0 - 2025-07-29\n\n### Added\n* Support GHC-9.10 (#183, #194, #195)\n* Support
  GHC-9.12 (#191)\n\n### Changed\n* Improve performance by caching EvidenceInfo (#188)\n*
  Allow specifying rts options. (#181)\n\n### Fixed \n* Correct `CHANGELOG.md`. (#175)\n*
  Fix ModuleRoot test failure. (#179)\n\n## 2.9.0 - 2024-08-10\n\n### Changed\n\n*
  Sort weeds by line number and then by column. (#155)\n* Show unit names in output.
  (#156)\n* Significantly improve weeders performance when using `type-class-roots
  = false`. (#172)\n* Use `Glob` to find `.hie` files. This can avoid an infinite
  loop with recursive symlinks. (#165)\n* Build with `lens-5.3`. (#173)\n\n### Fixed\n\n*
  Weeder now correctly reports TOML parse errors. (#161)\n\n## 2.8.0 - 2024-01-31\n\n###
  Added\n\n * Weeder now supports GHC 9.8. (#142)\n\n## 2.7.0 - 2023-08-17\n### Added\n*
  Weeder now supports type class instances. Type class instances can be marked as
  roots with the `root-instances` configuration option. (#126, #133, #136)\n* Weeder
  now optionally detects uses of types, excluding type family instances. This can
  be enabled with the `unused-types` configuration option. (#132)\n* Weeder's analysis
  now runs in parallel. This can almost halve execution time when given enough cores.
  Enabled by calling Weeder with `-j X` or `-N`. (#137)\n* `--write-default-config`
  flag to write and read a default configuration, if no configuration file is found.
  (#133)\n### Changed\n* All configuration options now have default values. This can
  be disabled with the `--no-default-fields` flag. (#133)\n* Weeder will now use distinct
  exit codes for certain failures. See `README.md` for more details. (#134)\n\n##
  2.6.0 - 2023-07-07\n### Added\n* Weeder now supports GHC 9.6.\n### Changed\n* Weeder
  now uses [TOML](https://toml.io) as a configuration format. Please see Weeder's
  `README` for more information on the configuration format.\n* Weeder now sorts weeds
  in a single file by ascending line number\n### Fixed\n* Weeder now internally adds
  declarations once. This shouldn't result in any user visible changes, but may improve
  performance.\n\n### [`2.5.0`][v2.5.0] - *2023-01-23*\n \n- Weeder has been upgraded
  to support GHC 9.4 (only). As this changes the\n  format of `.hie` files accepted,
  this is a major version bump. Thanks to @tfausak!\n\n### [`2.4.1`][v2.4.1] - *2023-01-05*\n\n-
  Build with `lens-5.2`\n\n### [`2.4.0`][v2.4.0] - *2022-05-22*\n\n- Weeder has been
  upgraded to support GHC 9.2 (only). As this changes the\n  format of `.hie` files
  accepted, this is a major version bump.\n\n### [`2.3.1`][v2.3.1] - *2022-05-21*\n\nThis
  is the last release of `weeder` compatible with GHC 9.0.\n\n- Weeder now analyzes
  top-level pattern bindings. For example, with the following input:\n\n    ```haskell\n
  \   module Dep (a, b) where\n\n    xxx :: Int\n    xxx = 3\n\n    a, b :: Int\n
  \   (a, b) = (xxx, 1)\n    ```\n\n    ... `weeder` will determine that both `a`
  and `b` depend on `xxx`. While this is an over-approximation, it prevents weeder
  from reporting false positives. For more information, see [#92](https://github.com/ocharles/weeder/issues/92).\n\n-
  Corrected a typo in `--help` ([#96](https://github.com/ocharles/weeder/pull/96)).\n-
  Shorten the help text for `--require-hs-files` ([#97](https://github.com/ocharles/weeder/pull/97)).\n-
  Allow `algebraic-graphs-0.6` ([#95](https://github.com/ocharles/weeder/pull/95)).\n-
  Allow Dhall 1.41 ([#99](https://github.com/ocharles/weeder/pull/99)).\n- Allow `optparse-applicative-0.17`
  ([#100](https://github.com/ocharles/weeder/pull/100)).\n\n### [`2.3.0`][v2.3.0]
  - *2021-10-11*\n\n- Switch to GHC 9\n\n### [`2.2.0`][v2.2.0] - *2021-08-28*\n\nThis
  will likely be the last Weeder release before GHC 9.\n\n- Allow configuration of
  the HIE file extension using the `--hie-extension` command-line flag\n- Add `--require-hs-files`
  switch. If supplied, this switch means Weeder will only consider `.hie` files where
  a corresponding `.hs` file can be found. ([#50](https://github.com/ocharles/weeder/pull/50))\n-
  Pattern synonyms are now considered ([#79](https://github.com/ocharles/weeder/pull/79))\n-
  Weeder's output format is now one-line-per-weed ([#62](https://github.com/ocharles/weeder/pull/62))\n-
  `--hie-extension` can be used to change the extension used for `.hie` files ([#64](https://github.com/ocharles/weeder/pull/64))\n\n###
  [`2.1.3`][v2.1.3] - *2020-12-11*\n\n- Support `dhall-1.35`, `dhall-1.36` and `dhall-1.37`.\n-
  Support `bytestring-0.11`.\n\n### [`2.1.2`][v2.1.2] - *2020-09-09*\n\n- Correctly
  support optparse-applicative 0.16.0.0. While this was meant to be resolved 2.1.1,
  2.1.1 only changed the version for the library and not the executable.\n\n### [`2.1.1`][v2.1.1]
  - *2020-09-09*\n\n- Support Dhall 1.34\n- Support optparse-applicative 0.16.0.0\n\n###
  [`2.1.0`][v2.1.0] - *2020-06-30*\n\n- Support regex-tdfa ^>= 1.2 (#13)\n- Handle
  mismatched hie file version explicitly (fixes #8). (#16)\n- Implement --help and
  --version (#36)\n- Make search directory configurable (#37)\n- Support GHC 8.10\n\n###
  [`2.0.1`][v2.0.1] - *2020-03-15*\n\n- PR #7: Support optparse-applicative-0.15.1.0
  and algebraic-graphs-0.5. Thanks\n  to @robx for contribuiting this fix!\n\n\n###
  [`2.0.0`][v2.0.0] - *2020-03-15*\n\n- Weeder 2.0 is a ground up rewrite of Weeder
  using `.hie` files. It is now\nmaintained by Ollie Charles (@ocharles on GitHub).\n\n-
  **Note:**\n\n  Issue numbers *before* this version reference to the original repository
  here:\n\n    - https://github.com/ndmitchell/weeder\n\n  Issue numbers *after*  this
  version reference to the new repository here:\n\n    - https://github.com/ocharles/weeder\n\n\n###
  [`1.0.8`][v1.0.8] - *2018-08-26*\n\n- #42, make paths case-insensitive on MacOS\n\n\n###
  [`1.0.7`][v1.0.7] - *2018-08-23*\n\n- Don't warn on base as it is used by Paths_
  modules\n\n- #42, make --verbose print out the version number\n\n- #41, make the
  --help output clear you can pass a stack.yaml\n\n\n### [`1.0.6`][v1.0.6] - *2018-06-16*\n\n-
  Don't fail with an error if stack setup is necessary\n\n- If you fail to find stack.yaml
  give a better error message\n\n\n### [`1.0.5`][v1.0.5] - *2018-05-05*\n\n- #39,
  provide weeder as a library\n\n\n### [`1.0.4`][v1.0.4] - *2018-05-02*\n\n- #38,
  make sure you parse bracketed version ranges properly\n\n\n### [`1.0.3`][v1.0.3]
  - *2018-03-04*\n\n- #35, support ^>= operator in Cabal\n\n\n### [`1.0.2`][v1.0.2]
  - *2018-03-01*\n\n- Add lower bounds for Yaml and Aeson\n\n\n### [`1.0.1`][v1.0.1]
  - *2018-02-23*\n\n- #34, support -any for version numbers\n\n\n### [`1.0`][v1.0]
  - *2018-01-22*\n\n- #30, bump the version number to 1.0\n\n\n### [`0.1.13`][v0.1.13]
  - *2018-01-17*\n\n- #32, find .hi files in more places\n\n- #32, always disable
  color when running stack\n\n\n### [`0.1.12`][v0.1.12] - *2018-01-16*\n\n- Make available
  on Mac\n\n\n### [`0.1.11`][v0.1.11] - *2017-12-29\n\n- #29, deal with case-insensitive
  FilePath on Windows\n\n\n### [`0.1.10`][v0.1.10] - *2017-12-28*\n\n- Make --verbose
  print out the directory when running commands\n\n- Don't report semigroups as unused
  on any platforms\n\n\n### [`0.1.9`][v0.1.9] - *2017-12-07*\n\n- Don't report Win32/unix
  as unused on the alternate platform\n\n\n### [`0.1.8`][v0.1.8] - *2017-12-06*\n\n-
  Follow both branches for if/else containing dependencies/modules\n\n\n### [`0.1.7`][v0.1.7]
  - *2017-08-09*\n\n- #21, detect dependencies that are only required transitively\n\n-
  #13, respect the STACK_YAML environment variable\n\n- #20, add verbosity messages
  in a lot of places\n\n- #15, tone down unused import if exporting a cross-package
  type\n\n- #11, optimise execution speed (~3x faster)\n\n\n### [`0.1.6`][v0.1.6]
  - *2017-06-18*\n\n- #10, find files generated by alex/happy\n\n\n### [`0.1.5`][v0.1.5]
  - *2017-06-02*\n\n- If --yaml and no hints give no output\n\n\n### [`0.1.4`][v0.1.4]
  - *2017-05-27*\n\n- #9, allow --dist-dir to set the stack dist-dir\n\n- Deal with
  operators including | in them\n\n- Allow arrays of arrays of strings in the .weeder.yaml\n\n\n###
  [`0.1.3`][v0.1.3] - *2017-05-08*\n\n- #5, document how to install weeder\n\n- #8,
  detect unused imports, even import Foo()\n\n- #7, don't say modules with only instances
  are always redundant\n\n- #6, don't give partial pattern matches when reading .weeder.yaml\n\n\n###
  [`0.1.2`][v0.1.2] - *2017-04-29*\n\n- #3, deal with space-separated hs-source-dirs\n\n\n###
  [`0.1.1`][v0.1.1] - *2017-04-29*\n\n- #2, use \"stack query\" rather than parsing
  stack.yaml\n\n\n### [`0.1`][v0.1] - *2017-04-28*\n\n- Initial version\n\n\n[v2.4.1]:
  https://github.com/ocharles/weeder/releases/tag/2.4.1\n[v2.4.0]: https://github.com/ocharles/weeder/releases/tag/2.4.0\n[v2.3.1]:
  https://github.com/ocharles/weeder/releases/tag/2.3.1\n[v2.3.0 ]: https://github.com/ocharles/weeder/releases/tag/2.3.0\n[v2.2.0
  ]: https://github.com/ocharles/weeder/releases/tag/2.2.0\n[v2.1.3 ]: https://github.com/ocharles/weeder/releases/tag/2.1.3\n[v2.1.2
  ]: https://github.com/ocharles/weeder/releases/tag/2.1.2\n[v2.1.1 ]: https://github.com/ocharles/weeder/releases/tag/2.1.1\n[v2.1.0
  ]: https://github.com/ocharles/weeder/releases/tag/2.1.0\n[v2.0.1 ]: https://github.com/ocharles/weeder/releases/tag/2.0.1\n[v2.0.0
  ]: https://github.com/ocharles/weeder/releases/tag/2.0.0\n[v1.0.8 ]: https://github.com/ndmitchell/weeder/tree/v1.0.8\n[v1.0.7
  ]: https://github.com/ndmitchell/weeder/tree/v1.0.7\n[v1.0.6 ]: https://github.com/ndmitchell/weeder/tree/v1.0.6\n[v1.0.5
  ]: https://github.com/ndmitchell/weeder/tree/v1.0.5\n[v1.0.4 ]: https://github.com/ndmitchell/weeder/tree/v1.0.4\n[v1.0.3
  ]: https://github.com/ndmitchell/weeder/tree/v1.0.3\n[v1.0.2 ]: https://github.com/ndmitchell/weeder/tree/v1.0.2\n[v1.0.1
  ]: https://github.com/ndmitchell/weeder/tree/v1.0.1\n[v1.0   ]: https://github.com/ndmitchell/weeder/tree/v1.0\n[v0.1.13]:
  https://github.com/ndmitchell/weeder/tree/v0.1.13\n[v0.1.12]: https://github.com/ndmitchell/weeder/tree/v0.1.12\n[v0.1.11]:
  https://github.com/ndmitchell/weeder/tree/v0.1.11\n[v0.1.10]: https://github.com/ndmitchell/weeder/tree/v0.1.10\n[v0.1.9
  ]: https://github.com/ndmitchell/weeder/tree/v0.1.9\n[v0.1.8 ]: https://github.com/ndmitchell/weeder/tree/v0.1.8\n[v0.1.7
  ]: https://github.com/ndmitchell/weeder/tree/v0.1.7\n[v0.1.6 ]: https://github.com/ndmitchell/weeder/tree/v0.1.6\n[v0.1.5
  ]: https://github.com/ndmitchell/weeder/tree/v0.1.5\n[v0.1.4 ]: https://github.com/ndmitchell/weeder/tree/v0.1.4\n[v0.1.3
  ]: https://github.com/ndmitchell/weeder/tree/v0.1.3\n[v0.1.2 ]: https://github.com/ndmitchell/weeder/tree/v0.1.2\n[v0.1.1
  ]: https://github.com/ndmitchell/weeder/tree/v0.1.1\n[v0.1   ]: https://github.com/ndmitchell/weeder/tree/v0.1\n"
changelog-type: markdown
description: "# Weeder\n\nWeeder is an application to perform whole-program dead-code
  analysis. Dead code\nis code that is written, but never reachable from any other
  code. Over the\nlifetime of a project, this happens as code is added and removed,
  and leftover\ncode is never cleaned up. While GHC has warnings to detect dead code
  is a single\nmodule, these warnings don't extend across module boundaries - this
  is where\nWeeder comes in.\n\nWeeder uses HIE files produced by GHC - these files
  can be thought of as source\ncode that has been enhanced by GHC, adding full symbol
  resolution and type\ninformation. Weeder builds a dependency graph from these files
  to understand how\ncode interacts. Once all analysis is done, Weeder performs a
  traversal of this\ngraph from a set of roots (e.g., your `main` function), and determines
  which\ncode is reachable and which code is dead.\n\n# Using Weeder\n\n## Preparing
  Your Code for Weeder\n\nTo use Weeder, you will need to generate `.hie` files from
  your source code.\n\n### Cabal\n\nIf you use Cabal, this is easily done by adding
  one line to your\n`cabal.project.local` file:\n\n``` cabal\nprogram-options\n  ghc-options:
  -fwrite-ide-info\n```\n\nOnce this has been added, perform a full rebuild of your
  project:\n\n``` shell\ncabal clean\ncabal build all\n```\n\n### Stack\n\nIf you
  use `stack`, add the following to your `stack.yaml`:\n\n``` yaml\nghc-options:\n
  \ \"$locals\": -fwrite-ide-info\n```\n\nand rebuild:\n\n``` shell\nstack clean\nstack
  build\n```\n\n### Nix\n\nSee [`weeder-nix`](https://github.com/NorfairKing/weeder-nix)
  for `weeder <-> nixpkgs` integration.\n\n## Calling Weeder\n\nTo call Weeder, you
  first need to provide a configuration file, `weeder.toml`. Weeder uses\n[TOML](https://toml.io/en/)
  as its configuration format.\n\n`roots` is a list of regular expressions of symbols
  that are considered as\nalive. If you're building an executable, the pattern `^Main.main$`
  is a\ngood starting point - specifying that `main` is a root. Weeder currently doesn't\nadd
  all exported functions as roots automatically but in many cases `main` from a\ntest
  suite could be a good workaround for that\n\n`type-class-roots` configures whether
  or not Weeder should consider all instances\nof type classes as roots. Defaults
  to `false`.\n\n``` toml\nroots = [ \"^Main.main$\" ]\ntype-class-roots = true\n```\n\nNow
  invoke the `weeder` executable, and - if your project has weeds - you will\nsee
  something like the following:\n\n``` shell\n$ weeder\nsrc/Dhall/TH.hs:187: toDeclaration\nsrc/Dhall/TH.hs:196:
  toNestedHaskellType\n```\n\n… which indicates the location of two unused symbols.\n(Please
  note these warnings are just for demonstration and not necessarily weeds\nin the
  Dhall project).\n\n## Configuration options\n\n| Name             | Default value
  \                       | Description |\n| ---------------- | ------------------------------------
  | --- |\n| roots            | `[ \"Main.main\", \"^Paths_weeder.*\" ]` | Any declarations
  matching these regular expressions will be considered as alive. |\n| type-class-roots
  | `false`                              | Consider all instances of type classes
  as roots. Overrides `root-instances`. |\n| root-instances   | `[ {class = '\\.IsString$'},
  {class = '\\.IsList$'} ]` | Type class instances that match on all specified fields
  will be considered as roots. Accepts the fields `instance` matching on the pretty-printed
  type of the instance (visible in the output), `class` matching on its parent class
  declaration, and `module` matching on the module the instance is defined in. |\n|
  root-modules     | `[]`                                 | The exports of all matching
  modules will be considered as alive. This does not include type class instances
  implicitly exported by the module.\n| unused-types     | `false`                              |
  Enable analysis of unused types. |\n\n`root-instances` can also accept string literals
  as a shorthand for writing a table\ncontaining only the `instance` field. See the
  following example from the test suite:\n\n``` toml\nroot-instances = [ { module
  = \"Spec.ConfigInstanceModules.Module1\", instance = \"Bounded T\" }\n                 ,
  \"Read T\" \n                 , { module = \"Spec.ConfigInstanceModules.Module3\"
  }\n                 , { class = '\\.Enum$' }\n                 , { module = \"Spec.ConfigInstanceModules.Module2\",
  class = '\\.Show$' }\n                 ]\n```\n\n## Exit codes\n\nWeeder emits the
  following exit codes:\n\n| Exit code | Cause |\n| --- | --- |\n|  0  | No weeds
  were found |\n| 228 | One or more weeds found |\n|  1  | Generic failing exit code
  |\n|  2  | Failure to read HIE file due to GHC version mismatch |\n|  3  | Failure
  to parse config file |\n|  4  | No HIE files found |\n\n# Tips\n\n- You may want
  to add `^Paths_.*` to the roots in `weeder.toml` to ignore the\n  `Paths_packageName`
  module automatically generated by Cabal.\n\n- You can automatically write and use
  a default configuration file by calling \n  Weeder with the `--write-default-config`
  flag, if no configuration file is\n  found.\n\n- You can mandate explicitly specifying
  every option in the configuration by \n  calling Weeder with the `--no-default-fields`
  flag. This can prevent being\n  caught off guard by new configuration options or
  changes to default values.\n\n- To mark all instances in a module `M` as roots,
  add `{ module = \"^M$\" }`\n  to `root-instances`.\n\n# Limitations\n\nWeeder currently
  has a few limitations:\n\n## Overloaded syntax\n\nOn some versions of GHC, Weeder
  might report various type classes that are used\nfor syntax extensions as weeds.
  For example, `Num` and `IsString` classes might be\nflagged as weeds if they are
  only used for overloaded literal syntax (that is,\nthe `fromInteger` and `fromString`
  methods).\n\nYou can add instances of specific type classes as roots with the `root-instances`
  \nfield, or toggle whether Weeder considers all type class instances as roots with
  \nthe `type-class-roots` configuration option.\n\n## Type families\n\nWeeder cannot
  yet analyse uses of type family instances. For this reason type\nfamily instances
  will be marked as implicit roots if analysis of types is\nenabled via `unused-types`.\n\n##
  Template Haskell\n\nWeeder is currently unable to parse the result of a Template
  Haskell splice. If\nsome Template Haskell code refers to other source code, this
  dependency won't be\ntracked by Weeder, and thus Weeder might end up with false
  positives.\n"
description-type: markdown
hash: 84db7d4d1efd3f2a92831084bbda77b6575c31677f549c5884e4c3c01f574046
homepage: https://github.com/ocharles/weeder#readme
latest: 2.10.0
license-name: BSD-3-Clause
maintainer: Ollie Charles <ollie@ocharles.org.uk>
synopsis: Detect dead code
test-bench-deps:
  aeson: '>=0'
  algebraic-graphs: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  directory: '>=0'
  filepath: '>=0'
  ghc: '>=0'
  hspec-expectations: '>=0'
  process: '>=0'
  tasty: '>=0'
  tasty-golden: '>=0'
  tasty-hunit-compat: '>=0'
  text: '>=0'
  toml-reader: '>=0'
  weeder: '>=0'
