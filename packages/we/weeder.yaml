homepage: https://github.com/ocharles/weeder#readme
changelog-type: markdown
hash: 42f4d6591b7e5989b04047f1dda4940b2bfe708a9ebcc2335d2e74eae39f47a4
test-bench-deps: {}
maintainer: Ollie Charles <ollie@ocharles.org.uk>
synopsis: Detect dead code
changelog: |
  ## Changelog for Weeder

  ### [`2.2.0`][v2.2.0] - *2021-08-28*

  This will likely be the last Weeder release before GHC 9.

  - Allow configuration of the HIE file extension using the `--hie-extension` command-line flag
  - Add `--require-hs-files` switch. If supplied, this switch means Weeder will only consider `.hie` files where a corresponding `.hs` file can be found. ([#50](https://github.com/ocharles/weeder/pull/50))
  - Pattern synonyms are now considered ([#79](https://github.com/ocharles/weeder/pull/79))
  - Weeder's output format is now one-line-per-weed ([#62](https://github.com/ocharles/weeder/pull/62))
  - `--hie-extension` can be used to change the extension used for `.hie` files ([#64](https://github.com/ocharles/weeder/pull/64))

  ### [`2.1.3`][v2.1.3] - *2020-12-11*

  - Support `dhall-1.35`, `dhall-1.36` and `dhall-1.37`.
  - Support `bytestring-0.11`.

  ### [`2.1.2`][v2.1.2] - *2020-09-09*

  - Correctly support optparse-applicative 0.16.0.0. While this was meant to be resolved 2.1.1, 2.1.1 only changed the version for the library and not the executable.

  ### [`2.1.1`][v2.1.1] - *2020-09-09*

  - Support Dhall 1.34
  - Support optparse-applicative 0.16.0.0

  ### [`2.1.0`][v2.1.0] - *2020-06-30*

  - Support regex-tdfa ^>= 1.2 (#13)
  - Handle mismatched hie file version explicitly (fixes #8). (#16)
  - Implement --help and --version (#36)
  - Make search directory configurable (#37)
  - Support GHC 8.10

  ### [`2.0.1`][v2.0.1] - *2020-03-15*

  - PR #7: Support optparse-applicative-0.15.1.0 and algebraic-graphs-0.5. Thanks
    to @robx for contribuiting this fix!


  ### [`2.0.0`][v2.0.0] - *2020-03-15*

  - Weeder 2.0 is a ground up rewrite of Weeder using `.hie` files. It is now
  maintained by Ollie Charles (@ocharles on GitHub).

  - **Note:**

    Issue numbers *before* this version reference to the original repository here:

      - https://github.com/ndmitchell/weeder

    Issue numbers *after*  this version reference to the new repository here:

      - https://github.com/ocharles/weeder


  ### [`1.0.8`][v1.0.8] - *2018-08-26*

  - #42, make paths case-insensitive on MacOS


  ### [`1.0.7`][v1.0.7] - *2018-08-23*

  - Don't warn on base as it is used by Paths_ modules

  - #42, make --verbose print out the version number

  - #41, make the --help output clear you can pass a stack.yaml


  ### [`1.0.6`][v1.0.6] - *2018-06-16*

  - Don't fail with an error if stack setup is necessary

  - If you fail to find stack.yaml give a better error message


  ### [`1.0.5`][v1.0.5] - *2018-05-05*

  - #39, provide weeder as a library


  ### [`1.0.4`][v1.0.4] - *2018-05-02*

  - #38, make sure you parse bracketed version ranges properly


  ### [`1.0.3`][v1.0.3] - *2018-03-04*

  - #35, support ^>= operator in Cabal


  ### [`1.0.2`][v1.0.2] - *2018-03-01*

  - Add lower bounds for Yaml and Aeson


  ### [`1.0.1`][v1.0.1] - *2018-02-23*

  - #34, support -any for version numbers


  ### [`1.0`][v1.0] - *2018-01-22*

  - #30, bump the version number to 1.0


  ### [`0.1.13`][v0.1.13] - *2018-01-17*

  - #32, find .hi files in more places

  - #32, always disable color when running stack


  ### [`0.1.12`][v0.1.12] - *2018-01-16*

  - Make available on Mac


  ### [`0.1.11`][v0.1.11] - *2017-12-29

  - #29, deal with case-insensitive FilePath on Windows


  ### [`0.1.10`][v0.1.10] - *2017-12-28*

  - Make --verbose print out the directory when running commands

  - Don't report semigroups as unused on any platforms


  ### [`0.1.9`][v0.1.9] - *2017-12-07*

  - Don't report Win32/unix as unused on the alternate platform


  ### [`0.1.8`][v0.1.8] - *2017-12-06*

  - Follow both branches for if/else containing dependencies/modules


  ### [`0.1.7`][v0.1.7] - *2017-08-09*

  - #21, detect dependencies that are only required transitively

  - #13, respect the STACK_YAML environment variable

  - #20, add verbosity messages in a lot of places

  - #15, tone down unused import if exporting a cross-package type

  - #11, optimise execution speed (~3x faster)


  ### [`0.1.6`][v0.1.6] - *2017-06-18*

  - #10, find files generated by alex/happy


  ### [`0.1.5`][v0.1.5] - *2017-06-02*

  - If --yaml and no hints give no output


  ### [`0.1.4`][v0.1.4] - *2017-05-27*

  - #9, allow --dist-dir to set the stack dist-dir

  - Deal with operators including | in them

  - Allow arrays of arrays of strings in the .weeder.yaml


  ### [`0.1.3`][v0.1.3] - *2017-05-08*

  - #5, document how to install weeder

  - #8, detect unused imports, even import Foo()

  - #7, don't say modules with only instances are always redundant

  - #6, don't give partial pattern matches when reading .weeder.yaml


  ### [`0.1.2`][v0.1.2] - *2017-04-29*

  - #3, deal with space-separated hs-source-dirs


  ### [`0.1.1`][v0.1.1] - *2017-04-29*

  - #2, use "stack query" rather than parsing stack.yaml


  ### [`0.1`][v0.1] - *2017-04-28*

  - Initial version


  [v2.2.0 ]: https://github.com/ocharles/weeder/releases/tag/2.2.0
  [v2.1.3 ]: https://github.com/ocharles/weeder/releases/tag/2.1.3
  [v2.1.2 ]: https://github.com/ocharles/weeder/releases/tag/2.1.2
  [v2.1.1 ]: https://github.com/ocharles/weeder/releases/tag/2.1.1
  [v2.1.0 ]: https://github.com/ocharles/weeder/releases/tag/2.1.0
  [v2.0.1 ]: https://github.com/ocharles/weeder/releases/tag/2.0.1
  [v2.0.0 ]: https://github.com/ocharles/weeder/releases/tag/2.0.0
  [v1.0.8 ]: https://github.com/ndmitchell/weeder/tree/v1.0.8
  [v1.0.7 ]: https://github.com/ndmitchell/weeder/tree/v1.0.7
  [v1.0.6 ]: https://github.com/ndmitchell/weeder/tree/v1.0.6
  [v1.0.5 ]: https://github.com/ndmitchell/weeder/tree/v1.0.5
  [v1.0.4 ]: https://github.com/ndmitchell/weeder/tree/v1.0.4
  [v1.0.3 ]: https://github.com/ndmitchell/weeder/tree/v1.0.3
  [v1.0.2 ]: https://github.com/ndmitchell/weeder/tree/v1.0.2
  [v1.0.1 ]: https://github.com/ndmitchell/weeder/tree/v1.0.1
  [v1.0   ]: https://github.com/ndmitchell/weeder/tree/v1.0
  [v0.1.13]: https://github.com/ndmitchell/weeder/tree/v0.1.13
  [v0.1.12]: https://github.com/ndmitchell/weeder/tree/v0.1.12
  [v0.1.11]: https://github.com/ndmitchell/weeder/tree/v0.1.11
  [v0.1.10]: https://github.com/ndmitchell/weeder/tree/v0.1.10
  [v0.1.9 ]: https://github.com/ndmitchell/weeder/tree/v0.1.9
  [v0.1.8 ]: https://github.com/ndmitchell/weeder/tree/v0.1.8
  [v0.1.7 ]: https://github.com/ndmitchell/weeder/tree/v0.1.7
  [v0.1.6 ]: https://github.com/ndmitchell/weeder/tree/v0.1.6
  [v0.1.5 ]: https://github.com/ndmitchell/weeder/tree/v0.1.5
  [v0.1.4 ]: https://github.com/ndmitchell/weeder/tree/v0.1.4
  [v0.1.3 ]: https://github.com/ndmitchell/weeder/tree/v0.1.3
  [v0.1.2 ]: https://github.com/ndmitchell/weeder/tree/v0.1.2
  [v0.1.1 ]: https://github.com/ndmitchell/weeder/tree/v0.1.1
  [v0.1   ]: https://github.com/ndmitchell/weeder/tree/v0.1
basic-deps:
  ghc: '>=8.8.1 && <8.9 || ==8.10.*'
  weeder: -any
  bytestring: '>=0.10.9.0 && <0.11 || >=0.11.0.0 && <0.12'
  base: '>=4.13.0.0 && <4.14 || >=4.14.0.0 && <4.15'
  dhall: ^>=1.30.0 || ^>=1.31.0 || ^>=1.32.0 || ^>=1.33.0 || ^>=1.34.0 || ^>=1.35.0
    || ^>=1.36.0 || ^>=1.37.0 || ^>=1.40.0
  text: ^>=1.2.3.0
  filepath: '>=1.4.2.1 && <1.5'
  containers: '>=0.6.2.1 && <0.7'
  lens: ^>=4.18.1 || ^>=4.19 || ^>=5.0.1
  regex-tdfa: ^>=1.2.0.0 || ^>=1.3.1.0
  mtl: ^>=2.2.2
  generic-lens: ^>=1.1.0.0 || ^>=1.2.0.0 || ^>=2.0.0.0 || ^>=2.2.0.0
  transformers: '>=0.5.6.2 && <0.7'
  optparse-applicative: '>=0.14.3.0 && <0.15 || >=0.15.1.0 && <0.16 || >=0.16.0.0
    && <0.17'
  algebraic-graphs: ^>=0.4 || ^>=0.5
  directory: '>=1.3.3.2 && <1.4'
all-versions:
- '0.1'
- 0.1.1
- 0.1.2
- 0.1.3
- 0.1.4
- 0.1.5
- 0.1.6
- 0.1.7
- 0.1.8
- 0.1.9
- 0.1.10
- 0.1.11
- 0.1.12
- 0.1.13
- '1.0'
- 1.0.1
- 1.0.2
- 1.0.3
- 1.0.4
- 1.0.5
- 1.0.6
- 1.0.7
- 1.0.8
- 1.0.9
- 2.0.0
- 2.0.1
- 2.1.0
- 2.1.1
- 2.1.2
- 2.1.3
- 2.2.0
author: Ollie Charles <ollie@ocharles.org.uk>
latest: 2.2.0
description-type: markdown
description: "# Weeder\n\nWeeder is an application to perform whole-program dead-code
  analysis. Dead code\nis code that is written, but never reachable from any other
  code. Over the\nlifetime of a project, this happens as code is added and removed,
  and leftover\ncode is never cleaned up. While GHC has warnings to detect dead code
  is a single\nmodule, these warnings don't extend across module boundaries - this
  is where\nWeeder comes in.\n\nWeeder uses HIE files produced by GHC - these files
  can be thought of as source\ncode that has been enhanced by GHC, adding full symbol
  resolution and type\ninformation. Weeder builds a dependency graph from these files
  to understand how\ncode interacts. Once all analysis is done, Weeder performs a
  traversal of this\ngraph from a set of roots (e.g., your `main` function), and determines
  which\ncode is reachable and which code is dead.\n\n# Using Weeder\n\n## Preparing
  Your Code for Weeder\n\nTo use Weeder, you will need to generate `.hie` files from
  your source code. \n\n### Cabal \n\nIf you use Cabal, this is easily done by adding
  one line to your\n`cabal.project.local` file:\n\n``` cabal\npackage *\n  ghc-options:
  -fwrite-ide-info\n```\n\nOnce this has been added, perform a full rebuild of your
  project:\n\n``` shell\ncabal clean\ncabal build all\n```\n\n### Stack\n\nIf you
  use `stack`, add the following to your `stack.yaml`:\n\n``` yaml\nghc-options:\n
  \ \"$locals\": -fwrite-ide-info\n```\n\nand rebuild:\n\n``` shell\nstack clean\nstack
  build\n```\n\n## Calling Weeder\n\nTo call Weeder, you first need to provide a configuration
  file, `weeder.dhall`. Weeder uses\n[Dhall](https://dhall-lang.org) as its configuration
  format, and configuration\nfiles have the type:\n\n``` dhall\n{ roots : List Text,
  type-class-roots : Bool }\n```\n\n`roots` is a list of regular expressions of symbols
  that are considered as\nalive. If you're building an executable, the pattern `^Main.main$`
  is a\ngood starting point - specifying that `main` is a root. Weeder currently doesn't\nadd
  all exported functions as roots automatically but in many cases `main` from a\ntest
  suite could be a good workaround for that\n\n`type-class-roots` configures whether
  or not Weeder should consider anything in\na type class instance as a root. Weeder
  is currently unable to add dependency\nedges into type class instances, and without
  this flag may produce false\npositives. It's recommended to initially set this to
  `True`:\n\n``` dhall\n{ roots = [ \"^Main.main$\" ], type-class-roots = True }\n```\n\nNow
  invoke the `weeder` executable, and - if your project has weeds - you will\nsee
  something like the following:\n\n``` shell\n$ weeder\n\nsrc/Dhall/TH.hs:187:1: error:
  toDeclaration is unused\n\n     185 ┃     -> HaskellType (Expr s a)\n     186 ┃
  \    -> Q Dec\n     187 ┃ toDeclaration haskellTypes MultipleConstructors{..} =
  do\n     188 ┃     case code of\n     189 ┃         Union kts -> do\n\n    Delete
  this definition or add ‘Dhall.TH.toDeclaration’ as a root to fix this error.\n\n\nsrc/Dhall/TH.hs:106:1:
  error: toNestedHaskellType is unused\n\n     104 ┃     -- ^ Dhall expression to
  convert to a simple Haskell type\n     105 ┃     -> Q Type\n     106 ┃ toNestedHaskellType
  haskellTypes = loop\n     107 ┃   where\n     108 ┃     loop dhallType = case dhallType
  of\n\n    Delete this definition or add ‘Dhall.TH.toNestedHaskellType’ as a root
  to fix this error.\n```\n\n(Please note these warnings are just for demonstration
  and not necessarily weeds\nin the Dhall project).\n\n# Tips\n\n- You may want to
  add `^Paths_.*` to the roots in `weeder.dhall` to ignore the\n  `Paths_packageName`
  module automatically generated by Cabal.\n\n# Limitations\n\nWeeder currently has
  a few limitations:\n\n## Type Class Instances\n\nWeeder is not currently able to
  analyse whether a type class instance is used.\nFor this reason, Weeder adds all
  symbols referenced to from a type class\ninstance to the root set, keeping this
  code alive. In short, this means Weeder\nmight not detect dead code if it's used
  from a type class instance which is\nnever actually needed.\n\nYou can toggle whether
  Weeder consider type class instances as roots with the\n`type-class-roots` configuration
  option.\n\n## Template Haskell\n\nWeeder is currently unable to parse the result
  of a Template Haskell splice. If\nsome Template Haskell code refers to other source
  code, this dependency won't be\ntracked by Weeder, and thus Weeder might end up
  with false positives.\n"
license-name: BSD-3-Clause
