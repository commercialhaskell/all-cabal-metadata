all-versions:
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.1.0.0
author: John Walker, Adrian Glouftsis
basic-deps:
  aeson: '>=1.4 && <2.3'
  aeson-pretty: '>=0.8 && <0.9'
  base: '>=4.16 && <5'
  bytestring: '>=0.10 && <0.12.3'
  containers: '>=0.6 && <0.9'
  text: '>=2.1 && <2.2'
  vector: '>=0.12 && <0.14'
changelog: |-
  # webdriver-precore-??.??.??.?? (????-??-??) - Unreleased

  # webdriver-precore-0.1.0.0 (2025-04-27)

  Downgrade `cabal-version:` from  `3.12` => `3.8` for Stackage compatibility

  # webdriver-precore-0.0.0.4 (2025-04-21)

  Fix another typo (bad repo examples link)

  # webdriver-precore-0.0.0.3 (2025-04-21)

  A few documentation typos an bump version of Vector dependencies

  # webdriver-precore-0.0.0.2 (2025-04-21)

  The initial release of this library.

  See [README](README.md) for details
changelog-type: markdown
description: "# webdriver-precore\n\n[![Hackage](https://img.shields.io/hackage/v/webdriver-precore.svg)](https://hackage.haskell.org/package/webdriver-precore)\n![build](https://github.com/pyrethrum/webdriver/actions/workflows/cicd.yaml/badge.svg?branch=main)\n\n\n<!--
  \nAdapt and move when ready\n![CI](https://github.com/commercialhaskell/path/workflows/CI/badge.svg?branch=master)\n[![Stackage
  LTS](http://stackage.org/package/path/badge/lts)](http://stackage.org/lts/package/path)\n[![Stackage
  Nightly](http://stackage.org/package/path/badge/nightly)](http://stackage.org/nightly/package/path)
  \n-->\n\n- [webdriver-precore](#webdriver-precore)\n  - [What is This Library?](#what-is-this-library)\n
  \ - [Why This Library?](#why-this-library)\n    - [Core Principles](#core-principles)\n
  \   - [Library Non-Goals](#library-non-goals)\n    - [Acknowledgements](#acknowledgements)\n-
  [Minimal Example](#minimal-example)\n  - [1. Implementing a runner](#1-implementing-a-runner)\n
  \     - [Main Types (Used in the Runner)](#main-types-used-in-the-runner)\n        -
  [W3Spec](#w3spec)\n        - [HttpResponse](#httpresponse)\n      - [The Runner](#the-runner)\n
  \   - [1.1 Convert W3Spec to params for req](#11-convert-w3spec-to-params-for-req)\n
  \   - [1.2 Call the WebDriver](#12-call-the-webdriver)\n    - [1.3 Parse HttpResponse
  Using the Parser Provided in the W3Spec](#13-parse-httpresponse-using-the-parser-provided-in-the-w3spec)\n
  \   - [2. Applying the Runner to the W3Spec Functions](#2-applying-the-runner-to-the-w3spec-functions)\n
  \   - [3. Install a Vendor Provided WebDriver](#3-install-a-vendor-provided-webdriver)\n
  \   - [4. Launch WebDriver From the Terminal](#4-launch-webdriver-from-the-terminal)\n
  \   - [5. Drive the Browser Via the IO API](#5-drive-the-browser-via-the-io-api)\n\n##
  What is This Library?\n\nThis library provides a minimal abstraction over the [WebDriver
  W3C Protocol endpoints](https://www.w3.org/TR/webdriver2/) without providing any
  implementation. It provides a description of the W3C API as a list of functions
  that return a [W3Spec type](#w3spec). The intention is that other libraries will
  provide the actual implementation.\n\nYou can not use this library directly to drive
  a browser. If you are looking for a fully featured library to drive a browser, you
  may be interested in an alternative library such as [haskell-webdriver](https://hackage.haskell.org/package/webdriver),
  a Selenium 2 client that is actively maintained.\n\n## Why This Library?\n\nSeveral
  libraries provide WebDriver bindings for Haskell. However, when development on this
  library began, the existing options were either unmaintained, dependent on Selenium,
  or tightly coupled with larger \"batteries included\" testing frameworks.\n\nWe,
  the authors of this library, are building our own standalone test framework. To
  support browser based testing within this framework we're first creating a series
  of independent low-level libraries. This library is the first in that series. Our
  aim is to make each of our low level libraries broadly useful to others, outside
  its use within our own framework. \n\n### Core Principles\n- **Direct W3C WebDriver
  Implementation**  \n  - No Selenium dependency  \n  - Full control over protocol
  handling  \n  *Note: the [W3C WebDriver standard](https://www.w3.org/TR/webdriver2/)
  is an initiative driven largely by the core Selenium contributors. It provides a
  uniform HTTP API to drive browsers, and can be leveraged by any library, including
  Selenium.*\n\n- **Minimalist Design**  \n  - Boring Haskell\n  - Few external dependencies
  \ \n\n- **Enable a Layered Architecture**  \n  - Provide an unopinionated WebDriver
  client for use in higher level libraries\n\n### Library Non-Goals\n  \n  * Any convenience
  or utility functions, that do not directly correspond to an endpoint on the WC3
  spec. Such functions belong in downstream libraries.\n  * Any transformers, effects
  or similar abstractions. These too belong downstream.\n\n### Acknowledgements\n\nThis
  library would not have been possible without the prior work in: \n\n**Haskell (particularly)**:\n*
  [haskell-webdriver](https://hackage.haskell.org/package/webdriver)\n* [webdriver-w3c](https://hackage.haskell.org/package/webdriver-w3c)\n\n**Selenium
  and WebDriver Standards**:\n\nThe decade+ efforts of the [Selenium](https://www.selenium.dev/)
  maintainers, both in forging the way with Selenium and their ongoing work in the
  development of the [W3C standards](https://www.w3.org/TR/webdriver2/) \n\n\n# Minimal
  Example\n\n*TLDR ~ bring your own HTTP client and use it to implement the endpoints
  as defined in this library.*\n\nDriving a browser using this library requires the
  following:\n1. Implement a `runner` that takes a [W3Spec](#w3spec) and makes HTTP
  calls an active WebDriver instance\n2. Create an IO API by applying the `runner`
  to each of the endpoint functions in this library\n3. Install the desired browser
  and browser driver\n4. Run the driver\n5. Drive the browser via the IO API\n\nThe
  full source can be found in the [example project repo](https://github.com/pyrethrum/webdriver/blob/main/webdriver-examples/README.md).\n\n\n##
  1. Implementing a runner\n\nThe first step in writing a WebDriver implementation
  is to choose an HTTP library. In this example, the chosen library is [req](https://hackage.haskell.org/package/req).\n\nThen
  to implement a run function requires the following:\n\n1. Transform a [W3Spec](#w3spec)
  to RequestParams compatible with the chosen HTTP library.\n2. Make an HTTP call
  to WebDriver as per the RequestParams and return a simplified [HttpResponse](#httpresponse).\n3.
  Use the parser provided by the [W3Spec](#w3spec) to parse the [HttpResponse](#httpresponse)
  and handle any errors.\n\n#### Main Types (Used in the Runner)\n\nThe two most important
  types in this library are:\n\n##### W3Spec\n\nThe `W3Spec` returned by each of this
  library's endpoint functions. This type represents a driver endpoint.\n\n```haskell\ndata
  W3Spec a\n  = Get\n      { description :: Text,\n        path :: UrlPath,\n        parser
  :: HttpResponse -> Result a\n      }\n  | Post\n      { description :: Text,\n        path
  :: UrlPath,\n        body :: Value,\n        parser :: HttpResponse -> Result a\n
  \     }\n  | PostEmpty\n      { description :: Text,\n        path :: UrlPath,\n
  \       parser :: HttpResponse -> Result a\n      }\n  | Delete\n      { description
  :: Text,\n        path :: UrlPath,\n        parser :: HttpResponse -> Result a\n
  \     }\n```\n\n##### HttpResponse\n\n`HttpResponse` is consumed by the `parser`
  provided by this library and needs to be constructed by the `runner`\n\n```haskell\ndata
  HttpResponse = MkHttpResponse\n  { -- | HTTP status code.\n    statusCode :: Int,\n
  \   -- | HTTP status message.\n    statusMessage :: Text,\n    -- | Response body
  in JSON format.\n    body :: Value\n  }\n```\n\n#### The Runner\n\n[source](https://github.com/pyrethrum/webdriver/blob/main/webdriver-examples/driver-demo-e2e/IORunner.hs)\n\n\n```haskell\nrun
  :: W3Spec a -> IO a\nrun spec = do\n  -- 1. Convert W3Spec to params for req\n  let
  request = mkRequest spec\n  -- 2. Call WebDriver server (via req) and return a simplified
  HttpResponse \n  response <- callReq request\n  -- 3. Apply the W3Spec parser to
  the HttpResponse get result type and handle errors  \n  parseResponse spec response
  \ \n```\n\n### 1.1 Convert W3Spec to params for req\n\n*W3Spec -> ReqRequestParams*\n\n```haskell\n--
  A custom data type specific to req\ndata ReqRequestParams where\n  MkRequestParams
  ::\n    (HttpBodyAllowed (AllowsBody method) (ProvidesBody body), HttpMethod method,
  HttpBody body) =>\n    { url :: Url 'Http,\n      method :: method,\n      body
  :: body,\n      port :: Int\n    } ->\n    ReqRequestParams\n\n-- W3Spec -> ReqRequestParams\n--
  the url and port would not normally be hard coded\nmkRequest :: forall a. W3Spec
  a -> ReqRequestParams\nmkRequest spec = case spec of\n  Get {} -> MkRequestParams
  url GET NoReqBody 4444 \n  Post {body} -> MkRequestParams url POST (ReqBodyJson
  body) 4444\n  PostEmpty {} -> MkRequestParams url POST (ReqBodyJson $ object [])
  4444\n  Delete {} -> MkRequestParams url DELETE NoReqBody 4444\n  where\n    url
  =  foldl' (/:) (http \"127.0.0.1\") spec.path.segments\n```\n\n### 1.2 Call the
  WebDriver\n\n*ReqRequestParams -> HttpResponse*\n\n```haskell\ncallReq :: ReqRequestParams
  -> IO HttpResponse\ncallReq MkRequestParams {url, method, body, port = prt} =\n
  \ runReq defaultHttpConfig {httpConfigCheckResponse = \\_ _ _ -> Nothing} $ do\n
  \   r <- req method url body jsonResponse $ port prt\n    pure $\n      MkHttpResponse\n
  \       { statusCode = responseStatusCode r,\n          statusMessage = responseStatusText
  r,\n          body = responseBody r :: Value\n        }\n  where\n    responseStatusText
  = decodeUtf8Lenient . responseStatusMessage\n```\n\n### 1.3 Parse HttpResponse Using
  the Parser Provided in the [W3Spec](#w3spec)\n\n*HttpResponse -> Return Type*\n\n```haskell\n--
  in this implementation we are just throwing exceptions on failure\nparseResponse
  :: W3Spec a -> HttpResponse -> IO a\nparseResponse spec r =\n  spec.parser r\n    &
  \\case\n      Error msg -> fail $ parseWebDriverError r & \\case\n          e@NotAnError
  {} -> unpack spec.description <> \"\\n\" <> \n                            \"Failed
  to parse response:\\n \" <> msg <> \"\\nin response:\" <> show e\n          e@UnrecognisedError
  {} -> \"UnrecognisedError:\\n \" <> \"\\nin response:\" <> show e\n          e@WebDriverError
  {} -> \"WebDriver error thrown:\\n \" <> show e\n      Success a -> pure a\n```\n\n###
  2. Applying the Runner to the W3Spec Functions\n\n*Create an IO API by applying
  run to each endpoint definition exposed by this library*\n\nThe full source for
  can be found in the [example project repo](https://github.com/pyrethrum/webdriver/blob/main/webdriver-examples/driver-demo-e2e/IOAPI.hs).\n```haskell\nmodule
  IOAPI where \n\nimport Data.Aeson (Value)\nimport Data.Text  as T (Text)\nimport
  WebDriverPreCore (DriverStatus, ElementId, Selector, SessionId)\nimport WebDriverPreCore
  qualified as W\nimport Prelude hiding (log)\nimport IOUtils (sleepMs, encodeFileToBase64)\nimport
  IORunner (run)\n\nstatus :: IO DriverStatus\nstatus = run W.status\n\nnewSession
  :: W.FullCapabilities -> IO SessionId\nnewSession = run . W.newSession\n\ngetTimeouts
  :: SessionId -> IO W.Timeouts\ngetTimeouts = run . W.getTimeouts\n\nsetTimeouts
  :: SessionId -> W.Timeouts -> IO ()\nsetTimeouts s = run . W.setTimeouts s\n\ngetCurrentUrl
  :: SessionId -> IO Text\ngetCurrentUrl = run . W.getCurrentUrl\n\ngetTitle :: SessionId
  -> IO Text\ngetTitle = run . W.getTitle\n\nmaximizeWindow :: SessionId -> IO W.WindowRect\nmaximizeWindow
  = run . W.maximizeWindow\n\n-- ... and 50+ more API functions\n```\n\n### 3. Install
  a Vendor Provided WebDriver\n\n*Once all the required endpoints are implemented
  you will be able to interact with browsers via WebDriver*\n\nExamples:\n  1. [Firefox](https://github.com/mozilla/geckodriver/releases)\n
  \ 2. [Chrome](https://googlechromelabs.github.io/chrome-for-testing/)\n  3. [Edge](https://developer.microsoft.com/en-us/microsoft-edge/tools/webdriver?form=MA13LH)\n
  \ 4. [Opera](https://github.com/operasoftware/operachromiumdriver?tab=readme-ov-file)\n
  \ 5. [Safari](https://developer.apple.com/documentation/webkit/testing-with-webdriver-in-safari)\n\n*Ensure
  the corresponding browser is installed on your system*\n\n### 4. Launch WebDriver
  From the Terminal\n\ne.g. For Firefox and geckodriver on Linux or WSL you could
  start geckodriver from the terminal as follows: \n\n*Note: we are setting the port
  to 4444, which is the hard coded port in our example.*\n\n```bash\n> pkill -f geckodriver
  || true  && geckodriver --port=4444 &\n```\nor with logging:\n\n```bash\n> pkill
  -f geckodriver || true  && geckodriver --log trace --port=4444 &\n```\n\nor similarly
  for Chrome and chromedriver:\n\n```bash\n> pkill -f chromedriver || true && chromedriver
  --port=4444 &\n```\n\nor with logging:\n\n```bash\n> pkill -f chromedriver || true
  && chromedriver --log-level=ALL --port=4444 &\n```\n\n### 5. Drive the Browser Via
  the IO API\n\n*With the driver running you can now run code that interacts with
  the browser:*\n\nFull source file can be found in the [example project repo](https://github.com/pyrethrum/webdriver/blob/main/webdriver-examples/driver-demo-e2e/WebDriverE2EDemoTest.hs).\n\n```haskell\ndemoForwardBackRefresh
  :: IO ()\ndemoForwardBackRefresh = do\n  ses <- newSession $ minFullCapabilities
  Firefox\n  navigateTo ses \"https://the-internet.herokuapp.com/\"\n  link findElement
  ses $ CSS \"#content ul:nth-child(4) > li:nth-child(6) > a:nth-child(1)\"\n  elementClick
  ses link\n  back ses\n  forward ses\n  refresh ses\n  deleteSession ses\n```\n\n*This
  is a minimal API. There is plenty of scope to build on this to provide more constrained
  types, user-friendly functions and capabilities such as retries, and session and
  driver management.*"
description-type: markdown
hash: cbfcaaf915661805d0022d5a95fad1e5a73dcac8af9dcd6b38b88f361c121621
homepage: https://github.com/pyrethrum/webdriver-precore#readme
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: theghostjw@gmail.com
synopsis: A typed wrapper for W3C WebDriver protocol. A base for other libraries.
test-bench-deps:
  aeson: '>=0'
  base: '>=0'
  containers: '>=0'
  falsify: '>=0'
  ghc: '>=0'
  pretty-show: '>=0'
  raw-strings-qq: '>=0'
  tasty: '>=0'
  tasty-discover: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  text: '>=0'
  webdriver-precore: '>=0'
