all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
- 0.1.0
- 0.1.1
- 0.2.0
- 0.3.0
- 0.3.1
- 0.4.0
- 0.4.1
- 0.5.0
- 0.5.1
- 0.6.0
- 0.7.0
author: Athan Clark
basic-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  async: '>=0'
  base: '>=4.10 && <5.0'
  bytestring: '>=0'
  containers: '>=0'
  exceptions: '>=0'
  hashable: '>=0'
  monad-control: '>=0'
  mtl: '>=0'
  stm: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  uuid: '>=0'
  wai-transformers: '>=0'
  websockets: '>=0.12'
  websockets-simple: '>=0.1.0'
changelog: ''
changelog-type: ''
description: |
  websockets-rpc
  ===============

  A simple message-based streaming RPC mechanism built using WebSockets

  ## Usage

  The idea is pretty simple:

  - A client initiates the RPC call to a server with a `Subscription`
  - the client may send additional data at any time with `Supply`, who can also cancel the RPC call
  - the server may respond incrementally with `Reply`
  - the server finishes the RPC call with a `Complete`

  ```
  client                                                         server
      ------------------------subscribe--------------------------->
      - - - - - - - - - - - - -supply - - - - - - - - - - - - - - >
      < - - - - - - - - - - - -reply- - - - - - - - - - - - - - - -
      <-----------------------complete-----------------------------
  ```

  if the `supply` and `reply` parts were ommitted, it would be identical to a traditional RPC mechanism.


  ### Example

  ```haskell
  import Network.WebSockets.RPC
  import Data.Aeson

  -- subscriptions from client to server
  data MySubDSL = Foo
    deriving (FromJSON, ToJSON) -- you should figure this part out :)

  -- supplies from client to server
  data MySupDSL = Bar
    deriving (FromJSON, ToJSON)

  -- replies from server to client
  data MyRepDSL = Baz
    deriving (FromJSON, ToJSON)

  -- onCompletes from server to client
  data MyComDSL = Qux
    deriving (FromJSON, ToJSON)
  ```


  Server:

  ```haskell
  {-# LANGUAGE NamedFieldPuns, ScopedTypeVariables #-}


  myServer :: (MonadIO m, MonadThrow m) => ServerAppT (WebSocketServerRPCT MySubDSL MySupDSL m)
  myServer = rpcServer $ \RPCServerParams{reply,complete} eSubSup -> case eSubSup of
    Left Foo -> do
      forM_ [1..5] $ \_ -> do
        liftIO $ threadDelay 1000000
        reply Baz
      complete Qux
    Right Bar -> reply Baz
  ```

  Client:

  ```haskell
  {-# LANGUAGE NamedFieldPuns #-}


  myClient :: (MonadIO m, MonadThrow m) => ClientAppT (WebSocketClientRPCT MyRepDSL MyComDSL m) ()
  myClient = rpcClient $ \dispatch ->
    -- only going to make one RPC call for this example
    dispatch RPCClient
      { subscription = Foo
      , onReply = \RPCClientParams{supply,cancel} Baz -> do
          liftIO $ threadDelay 1000000
          supply Bar
          (q :: Bool) <- liftIO getRandom
          if q then cancel else pure ()
      , onComplete = \Qux -> liftIO $ putStrLn "finished"
      }
  ```

  > the `threadDelay` calls are just to exemplify the asynchronisity of the system, nothing to do with avoiding race conditions >.>


  To turn the `ServerAppT` and `ClientAppT` into natural [WebSockets](https://hackage.haskell.org/package/websockets)
  types, use the morphisms from [Wai-Transformers](https://hackage.haskell.org/package/wai-trasformers).


  ## Contributing

  this is my swamp
description-type: markdown
hash: 8d0e6d32cf3a3e217c359f180f934dce787a377ae9759b0eda379e14fc8afef6
homepage: https://github.com/athanclark/websockets-rpc#readme
latest: 0.7.0
license-name: BSD-3-Clause
maintainer: athan.clark@gmail.com
synopsis: Simple streaming RPC mechanism using WebSockets
test-bench-deps:
  QuickCheck: '>=0'
  aeson: '>=0'
  async: '>=0'
  base: '>=0'
  bytestring: '>=0'
  containers: '>=0'
  exceptions: '>=0'
  hashable: '>=0'
  monad-control: '>=0'
  mtl: '>=0'
  quickcheck-instances: '>=0'
  stm: '>=0'
  tasty: '>=0'
  tasty-quickcheck: '>=0'
  text: '>=0'
  transformers: '>=0'
  unordered-containers: '>=0'
  uuid: '>=0'
  wai-transformers: '>=0'
  websockets: '>=0.12'
  websockets-rpc: '>=0'
  websockets-simple: '>=0.1.0'
