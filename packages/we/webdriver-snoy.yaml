all-versions:
- 0.6.0.2
- 0.6.0.3
- 0.6.0.4
author: Adam Curtis
basic-deps:
  aeson: '>=0.6.2.0 && <0.9'
  attoparsec: <0.13
  base: '>=4 && <5'
  base64-bytestring: '>=1.0 && <1.1'
  bytestring: '>=0.9 && <0.11'
  cond: '>=0.3 && <0.5'
  data-default: '>=0.2 && <1.0'
  directory: '>=1 && <2'
  directory-tree: '>=0.11 && <0.13'
  exceptions: '>=0.4 && <0.7'
  filepath: '>=1 && <2'
  http-client: '>=0.3 && <0.5'
  http-types: '>=0.8 && <0.9'
  lifted-base: '>=0.1 && <0.3'
  monad-control: '>=0.3 && <0.4'
  mtl: '>=2.0 && <2.3'
  network: '>=2.4 && <2.7'
  scientific: '>=0.2 && <0.4'
  temporary: '>=1.0 && <2.0'
  text: '>=0.11.3 && <1.3.0.0'
  time: '>=1 && <2'
  transformers: '>=0.2 && <0.5'
  transformers-base: '>=0.1 && <1.0'
  unordered-containers: '>=0.1.3 && <0.4'
  vector: '>=0.3 && <0.11'
  zip-archive: '>=0.1.1.8 && <0.3'
changelog: "#Change Log\n##0.6\n* Rather than WDSession serving dual roles as configuration
  and state, its functionality has been split into 2 respective types: WDConfig and
  WDSession.\n* runSession now takes a WDConfig instead of WDSession and Capabilities
  parameters.\n* runSession no longer closes its session on successful completion;
  use finallyClose or closeOnException for this behavior\n* The old Test.WebDriver.Classes
  module has been split into Test.WebDriver.Session and Test.WebDriver.Class\n* SessionState
  typeclass renamed to WDSessionState\n* We now use the http-client package instead
  of HTTP. This is reflected in the addition of Manager fields in both WDConfig and
  WDSession\n\n##0.5.5\n* Added optional HTTP history tracking for debugging purposes.\n\n##0.5.4\n*
  MonadCatchIO is deprecated in favour of exceptions.\n* Relaxed dependencies on mtl,
  network and scientific.\n\n##0.5.3.3\n* Relaxed text dependency up to 1.2\n\n##0.5.3.2\n###bug
  fixes\n* fixed remaining compilation problems with aeson. now supports aeson >=
  0.6.2.0 && < 0.8\n* now depends on directory-tree instead of filesystem-trees. this
  fixes several problems with firefox/chrome profile support.\n\n##0.5.3.1\n###bug
  fixes\n* fixed compilation error with aeson 0.7 and greater\n\n##0.5.3\n\n###new
  features\n* SessionNotCreated constructor added to FailedCommandType\n* new command
  deleteCookieByName added\n\n###bug fixes\n* asyncJS now properly distinguishes between
  a null return and a script timeout\n* fixed a change in waitWhile causing the opposite
  of expected behavior\n\n##0.5.2\n###API changes\n* added many new Internet Explorer
  capabilities\n* added additionalCaps to Capabilities, which allows support for non-standard
  capabilities\n* Browser type now supports non-standard browsers via the new Browser
  constructor\n* added support for the new unexpectedAlertBehaviour capability\n\n###new
  features\n* new command getApplicationCacheStatus supported\n* error reporting for
  unknown commands now slightly improved\n\n###bug fixes\n* internal request URIs
  are now properly percent-encoded\n* improved handling of browser-specific capabilities\n*
  fixed incompatability with new session creation protocol changes introduced in selenium
  2.35\n* updated to work with Aeson 0.6.2 and onward\n\n##hs-webdriver 0.5.1\n###API
  changes\n* Test.WebDriver.Internal.FailedCommandInfo now stores screenshots as lazy
  bytestrings\n* Test.WebDriver.Common.Profile now stores PreparedProfile as a lazy
  bytestring\n* Test.WebDriver.Chrome.Extension now stores ChromeExtension as a lazy
  bytestring\n* The LogPref type has been renamed to LogLevel to reflect its use within
  the new log interface\n\n###new features\n* a new log interface as specified by
  the webdriver standard. This includes the functions getLogs and getLogTypes, and
  the types LogType and LogEntry. \n* waitWhile and waitUntil now show more detailed
  information about why an explicit wait timed out.\n\n##hs-webdriver 0.5.0.1\n###bug
  fixes\n* hs-webdriver now correctly handles a wider variety of server-specific responses
  when a webdriver command expects no return value.\n* An issue with the redirect
  status codes used during session creation has been fixed.\n* As a result of the
  above fixes, hs-webdriver should now work with chromedriver. Note that, prior to
  this version, you can still use chromedriver if you use the selenium standalone
  server jar as a proxy.\n\n\n##hs-webdriver 0.5\n###API changes\n* Test.WebDriver.Commands.Wait.unexpected
  now accepts a String argument, which is used as an error message\n* screenshot and
  uploadZipEntry from Test.WebDriver.Commands now use lazy bytestrings\n* wdBasePath
  field added to WDSession. This allows you to specify a custom base path for all
  WebDriver requests. The default, as specified in the WebDriver standard, is \"/wd/hub\"\n\n###new
  features\n* added Test.WebDriver.Commands.screenshotBase64\n\n##hs-webdriver 0.4\n\n###API
  changes\n* finallyClose and closeOnException are now overloaded on the WebDriver
  class.\n* NoSessionId and doSessCommand were moved from Test.WebDriver.Classes to
  Test.WebDriver.Commands.Internal\n\n###bug fixes\n* fixed a typo in the export list
  of Firefox.Profile; deleteFile is now correctly exported instead of removeFile from
  System.Directory \n* fixed an error in the JSON representation of MouseButton\n\n###new
  features\n* A new module, Test.WebDriver.Commands.Internal, which exports some low-level
  functions used to implement the high-level interface. This makes it possible for
  library users to extend hs-webdriver with nonstandard or unimplemented features.\n\n##
  hs-webdriver 0.3.3\n\n###API changes\n* The representation of profile files has
  been changed to use a HashMap instead of an association list. This ensures that
  destination paths are always unique.\n\n###bug fixes\n* The default preferences
  used by Selenium are now merged into the preferences of Firefox profiles loaded
  from disk.\n* addExtension will now correctly add extension directories to a profile.\n\n###known
  issues\n* Because of the way loadProfile currently adds directories to the profileFiles
  HashMap, it's possible for extensions added via addExtension to be overriden by
  the extensions originally listed in the on-disk extensions directory.\n\n###new
  features \n* It's now possible to add entire directories to a profile in pure code
  using addFile and addExtension.\n* new functions in Common.Profile: unionProfiles,
  onProfileFiles, onProfilePrefs\n* new function in Commands.Wait: onTimeout\n* the
  WD monad now has a MonadCatchIO instance, as an alternative to lifted-base for exception
  handling\n\n\n## hs-webdriver 0.3.2.1\n\n###bug fixes\n* Removed a bug in waitWhile'
  that resulted in an infinite loop\n* Fixed the incorrect representation of JSON
  profiles\n* Fixed relative path issues when zipping profile directories from disk\n\n##
  hs-webdriver 0.3.2\n\n###bug fixes\n* Changed the constraint on filesystrem-trees
  to avoid a broken version\n* Added the missing exports for addFile and deleteFile
  in Common.Profile and Firefox.Profile\n\n###new features\n* new Common.Profile functions:
  hasExtension, hasFile\n\n## hs-webdriver 0.3.1 \n\n###API changes\n* The representation
  of Profiles has changed, allowing it to store arbitrary files as well as extensions.
  The functional API for working with preferences and extensions ismostly unchanged,
  except for the behavior of calling addExtension consecutively with the same filepath
  argument.\n* The old <&&> and <||> operators in Test.WebDriver.Commands.Wait have
  been removed and replaced with the ones exported from Control.Conditional from the
  cond package.\n\n###bug fixes\n* Fixed memory leak resulting from an infinite recursion
  in the FromJSON instance of PreparedProfile.\n* loadProfile now properly loads an
  entire Firefox profile from disk, rather than just the extensions and preferences.\n\n###known
  issues\n* An issue involving lazy bytestring IO in the zip-archive package means
  that unusually large profiles might exceed the OSes open file limit.\n\n###new features\n*
  several new functions for working with Firefox/Opera profiles have been added. This
  includes functions for loading large profiles from disk, functions for working with
  zipped profiles, and functions for adding arbitrary files to a profile in pure code.
  \n* new helper functions were added to Test.WebDriver.Commands.Wait, exported from
  the cond package.\n\n## hs-webdriver 0.3.0.1\n\n###bug fixes\n* due to a nonconformance
  in the spec from the Grid server, wire responses were being received that contained
  no sessionId key, which subsequently resulted in a parse error from our JSON parser.
  This has been fixed, so that an omitted sessionId defaults to Nothing.\n* major
  bux fixes in the Firefox profile code. Note that loadProfile is unlikely\nto work
  as expected, but prepareTempProfile should.\n\n## hs-webdriver 0.3 \n\n### API changes\n*
  2 typeclasses were introduced. All WebDriver commands are now overloaded on WebDriver
  class, so that monad transformers with a WD base can be used conveniently.\n* The
  MonadState instance of WD has been removed and replaced by SessionState.\n* The
  Firefox profile code has been generalized to work with either Opera or Firefox profiles.
  A phantom type parameter is used to create a distinction between the two. See documentation
  on Common.Profile and Firefox.Profile to learn about the specific changes that were
  made.\n* FFLogPref is now removed and replaced by the LogPref type, because both
  Firefox and Opera config use the same logging preference values.\n* Several new
  modules have been created, including: Capabilities, Monad, Classes, Exceptions.
  Many of the definitions have been moved around, but the export lists of the pre-existing
  modules are the same.\n\n### bug fixes\n* Various issues with the serialization
  of capabilities meant that Chrome, IE, and Opera weren't able to startup correctly
  with default capabilities. This is now fixed.\n\n### new features\n* General documentation
  improvements.\n* Opera configuration is now implemented.\n\n## hs-webdriver 0.2\n\n###
  API changes\n* FailedCommandInfo changed so that it stores a WDSession rather than
  just a Maybe SessionId, thus providing server host and port information as well
  as the session ID.\n* As a result, mkFailedCommandInfo is now String -> WD FailedCommandInfo,
  since it requires access to the WDSession state.\n* HTML5StorageType changed to
  the more accurate WebStorageType\n\n### new features\n* general documentation improvements\n*
  the uploadFile, uploadRawFile, and uploadZipEntry functions, which support uploading
  file contents to the remote server\n\n## hs-webdriver 0.1\n\n### API changes\n*
  getWindowSize, setWindowSize, getWindowPos, and setWindowPos have all been deprived
  of their WindowHandle argument. This is due to the fact that using unfocused windows
  with those commands causes undefined behavior. \n\n### new features\n* the mkCookie
  function for convenient cookie construction\n* the focusFrame function for focusing
  to individual frames\n* the setPageLoadTimeout function\n* the maximize function
  for maximizing windows\n* support for HTML 5 web storage\n"
changelog-type: markdown
description: "# About\nhs-webdriver is a Selenium WebDriver client for the Haskell
  programming language. You can use it to automate browser sessions for testing, system
  administration, etc.\n\nFor more information about Selenium itself, see http://seleniumhq.org/\n\n#
  Installation\nhs-webdriver uses the Cabal build system to configure, build, install,
  and generate documentation on multiple platforms.\n\nFor more information on using
  Cabal and its various installation options, see the Cabal User's Guide at http://www.haskell.org/cabal/users-guide/index.html\n\n##
  Installation from Hackage\nhs-webdriver is hosted on Hackage under the name webdriver.
  Thus, the simplest way to download and install the most recent version of hs-webdriver
  is to run:\n\n```sh\ncabal install webdriver\n```\nThere are also options to do
  system-wide installation, version selection, and other build options; see cabal-install
  documentation.\n\n## Installation from this repository\n\nTo build and install a
  git revision for a single user on your system, run these commands from within the
  repository directory\n\n\n### Using cabal-install\n\n```sh\ncabal install\n```\n\n###
  Using Cabal\n\nFor systems without cabal-install available, you can also run the
  Setup.hs\nscript, as such:\n\n```sh\nrunhaskell Setup.hs configure --user\nrunhaskell
  Setup.hs build\nrunhaskell Setup.hs install\n```\n\nFor more build options, please
  refer to the Cabal documentation.\n\n\n#Getting Started\nWebDriver is a client-server
  protocol. Since hs-webdriver only implements a WebDriver client, in order to make
  use of this library you must have a WebDriver server that you can connect to.\n\n##Using
  the Selenium stand-alone server\nWhile you can use any WebDriver server out there,
  probably the simplest server to use with hs-webdriver is the Java stand-alone server.
  This server is cross-platform and works with every major browser. Head over to http://docs.seleniumhq.org/download/
  and download the latest version of Selenium Server. Next, run the Java jar; in a
  POSIX shell, this should look something like:\n\n    java -jar selenium-server-standalone-X.X.X.jar\n\nThe
  server should now be up and running at localhost on port 4444.\n\n##Hello, World!\nWith
  the Selenium server running locally, you're ready to write browser automation scripts
  in Haskell. Let's start with a simple example.\n```hs\n    {-# LANGUAGE OverloadedStrings
  #-}\n    import Test.WebDriver\n    \n    myConfig :: WDConfig\n    myConfig = defaultConfig\n
  \   \n    main :: IO ()\n    main = runSession myConfig $ do\n      openPage \"http://google.com\"\n
  \     searchInput <- findElem (ByCSS \"input[type='text']\")\n      sendKeys \"Hello,
  World!\" searchInput\n```\nhs-webdriver uses a very simple EDSL implemented within
  a state monad. Interacting with the remote browser is done via a sequence of commands
  within this monad. The state monad maintains implicit information about the WebDriver
  session between commands, so that individual commands only need to specify parameters
  relevant to the action they perform. If you're new to monads, there are plenty of
  resources available for learning on the web, but for now you can think of the  `WD`
  monad as a very simple imperative language operating on an implicitly defined session
  object.\n\nLet's take a closer look at each piece of this example.\n\n###Demonic
  invocations: a bit of boilerplate\n\n    {-# LANGUAGE OverloadedStrings #-}\n\nhs-webdriver
  uses the `Text` type to represent Unicode character sequences, which is significantly
  more efficient than the standard Haskell implementation for Unicode strings. This
  directive tells GHC to overload string literals so that they can be used to represent
  `Text` values.\n\n    import Test.WebDriver\n\nThis line is fairly straightforward;
  we need to import the library so that we can use it! Most of the basic API is available
  through the `Test.WebDriver` module, so this is the only import you should need
  for most tests. There are other modules that may be of interest for advanced usage;
  in particular, `Test.WebDriver.Commands.Wait` provides so-called \"implicit waits\"
  as defined by other WebDriver libraries.\n\n###Configuring a WebDriver session\n\n
  \   myConfig :: WDConfig\n    myConfig = defaultConfig\n   \nTo configure a new
  WebDriver session, we use the `WDConfig` type; this is a record type with various
  configuration fields. To connect to the Selenium server that we spawned earlier,
  the `defaultConfig` is sufficient. By default, the browser is set to Firefox, but
  that can be changed; the following configuration will use Google Chrome instead
  of Firefox for our test:\n\n    myConfig :: WDConfig\n    myConfig = defaultConfig
  { wdCapabilities = defaultCaps { browser = chrome } }\n \n###Initializing tests\n\n
  \   main :: IO ()\n    main = runSession myConfig $ do\n\n`main` is the standard
  entry point for a Haskell program, defined as a value of type `IO a`. In order to
  transform our `WD` action into an `IO` action, we use the `runSession` function,
  which has the type:\n\n    runSession :: WDConfig -> WD a -> IO a\n \nSo we pass
  to `runSession` our configuration record along with a WebDriver \"script\" to perform,
  and it transforms the script into a side-effectful `IO` action. The `WDConfig` record
  is used to automatically initialize our session with the remote server.\n\nNOTE:
  `runSession` does not automatically close the session it creates. This is intentional,
  as you may want to manually inspect the browser state after your code executes.
  If you want to have the session automatically close, you can use the `finallyClose`
  function to provide this behavior.\n\n    main = runSession myConfig . finallyClose
  $ do\n\n\n###Actually writing tests!\n\n      openPage \"http://google.com\"\n      searchInput
  <- findElem (ByCSS \"input[type='text']\")\n      sendKeys \"Hello, World!\" searchInput\n\nInteraction
  with the browser is accomplished via WebDriver \"commands\", which are just function
  calls within the `WD` monad. Most of these commands are defined in the `Test.WebDriver.Commands`
  modules, and are fairly self-explanatory. In this example, `openPage` opens a new
  URL, and `findElem` searches for a DOM element on the current page which matches
  the given selector (possible selectors include `ById`, `ByName`, `ByClass`, `ByTag`,
  `ByLinkText`, `ByCSS`, and `ByXPath`). The DOM Element found by the result of the
  search is bound to the local variable `searchInput`, and `sendKeys` sends a sequence
  of emulated keystrokes to the given element.\n\nThis example contains all of the
  basic elements of a simple WebDriver test. For complete documentation on each command,
  check out the documentation for `Test.WebDriver.Commands` (see [#Documentation](Documentation)).\n\n\n#Documentation\n\nDocumentation
  for hs-webdriver is available on Hackage at <http://hackage.haskell.org/package/webdriver>.
  However, here's how to generate local HTML documentation from this source revision:\n\n```sh\nrunhaskell
  Setup.hs haddock\n```\n\nHaddock will generate documentation and save it in dist/doc/html/webdriver\n\n"
description-type: markdown
hash: 7cc952e84c8ff09b8d032df7d8089bd4d5167b32834bda67c79c62a34b12d52a
homepage: https://github.com/kallisti-dev/hs-webdriver
latest: 0.6.0.4
license-name: BSD-3-Clause
maintainer: acurtis@spsu.edu
synopsis: a Haskell client for the Selenium WebDriver protocol (deprecated)
test-bench-deps:
  base: '>=0'
  parallel: '>=0'
  text: '>=0'
  webdriver-snoy: '>=0'
