homepage: https://gitlab.com/NH000/weatherhs#readme
changelog-type: ''
hash: be15586333d9fc72b1a3e4d8f8e2bc96a5f78d19dde74e36216c0f488a89a565
test-bench-deps: {}
maintainer: nikola.hadzic.000@protonmail.com
synopsis: Weather and related data info command-line tool
changelog: ''
basic-deps:
  http-client: ^>=0.5.14
  regex-pcre: ^>=0.94.4
  bytestring: ^>=0.10.8.2
  extra: ^>=1.6.14
  setlocale: ^>=1.0.0.8
  base: ^>=4.11.1.0
  time: ^>=1.8.0.2
  h-gpgme: ^>=0.5.1.0
  text: ^>=1.2.3.1
  hgettext: ^>=0.1.31.0
  xml: ^>=1.3.14
  terminal-size: ^>=0.3.2.1
  http-client-tls: ^>=0.3.5.3
  scientific: ^>=0.3.6.2
  http-types: ^>=0.12.2
  aeson: ^>=1.3.1.1
  directory: ^>=1.3.1.5
all-versions:
- 1.0.0
author: Nikola Hadžić
latest: 1.0.0
description-type: markdown
description: "# weatherhs\n\n## Description\nCommand-line tool that retrieves and
  nicely outputs weather and related data from [Weather API](https://www.weatherapi.com/).\n\nWritten
  in Haskell.\n\n## Dependencies\n\n#### Building & installing\n+ stack\n+ msgfmt\n+
  make\n\n#### Running\n+ gettext\n+ gpgme\n+ pcre\n\n## Installation\nUse Stack to
  build and Make to install this project:\nEnter the project's root directory and
  run:\n\n```\nstack build weatherhs --ghc-options=-U__MESSAGE_CATALOG_DIR__\nmake
  install\n```\n\nYou'll need to change `__MESSAGE_CATALOG_DIR__` value to point to
  your locale directory; the default (when undefined externally) is \"/usr/share/locale\".\n\nYou
  can pass `--ghc-options=-dynamic` to Stack to link with dynamic libraries; note
  that then you'll need to have those libraries installed to run the program.\n\nRun
  `make help` for more installation options.\n\n## Uninstallation\nEnter the project's
  root directory and run:\n\n```\nmake uninstall\n```\n\nMake sure that Make variables
  are set to the values used for the installation.\n\n## Translations\nDefault language
  of this program (in effect when `C` or `POSIX` is set as locale) is US English.
  \ \nThe following translations are available:\n\n| **Language**       | **Translator**
  \                                          | **For versions** |\n|--------------------|----------------------------------------------------------|------------------|\n|
  Serbian (Cyrillic) | [Nikola Hadžić](mailto:nikola.hadzic.000@protonmail.com) |
  1.0.0            |\n| Serbian (Latin)    | [Nikola Hadžić](mailto:nikola.hadzic.000@protonmail.com)
  | 1.0.0            |\n\n### Translation process\nThis program is written to be easily
  translatable into multiple languages, and it achieves that through the use of [`gettext`](https://www.gnu.org/software/gettext/)
  library.\nTranslations are located in `po` directory. Files in that directory contain
  translations, each PO file corresponding to one locale.\n\nTo add a new or update
  existing translation, enter the project's `po` directory and run the following command:\n\n```\nmake
  %.po  # Generate/update PO file; \"%\" should be replaced with a language code.\n```\n\nAfterwards,
  you can edit created/updated PO file (see [`gettext` manual](https://www.gnu.org/software/gettext/manual/gettext.html)
  for details),\ntranslating the program that way.\n\nYou could also run `make messages.pot`
  to just generate the template file, but this will be done automatically by the previously
  described rule.\n\n**NOTE:** You need to have hgettext tool, msgcat and sed installed
  in order to generate the template file.\n\n**NOTE:** Make sure to use hgettext tool
  with this commit: <https://github.com/NH002/hgettext/commit/a7ba5f7bc2624b91ddbbeeff7846947f56605c45>.\n\nIt
  would also be good to translate the manual page, you will find it in \"man\" project
  subdirectory.\nIn that case also update .cabal file to include new manual page translation.\n"
license-name: GPL-3.0-or-later
