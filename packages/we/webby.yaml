all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1
- 0.1.2
- 0.1.3
- 0.2.0
- 0.3.0
- 0.3.1
- 0.4.0
- 1.0.0
- 1.0.1
- 1.0.2
- 1.1.0
- 1.1.1
author: ''
basic-deps:
  aeson: '>=1.4 && <2.2'
  base: '>=4.7 && <5'
  binary: '>=0.8 && <1'
  bytestring: '>=0.10 && <1'
  formatting: '>=6.3.7 && <7.2'
  http-api-data: '>=0.4 && <0.6'
  http-types: '>=0.12 && <0.13'
  mime-types: '>=0.1 && <0.2'
  relude: '>=0.7'
  resourcet: '>=1.2 && <1.3'
  text: '>=1.2 && <2.1'
  unliftio: '>=0.2.13 && <0.3'
  unliftio-core: '>=0.2 && <0.3'
  unordered-containers: '>=0.2.9 && <0.3'
  wai: '>=3.2 && <3.3'
  warp: '>=0'
  webby: '>=0'
changelog: |
  # Change log

  ## v1.1.1

  - Ensure support for GHC 9.4

  ## Older releases

  Please see commits in the repository.
changelog-type: markdown
description: |
  # Webby

  An easy to use Haskell web-server inspired by Scotty.

  # Build

  Clone the repo and run `stack build`

  # Example

  ``` haskell
  {-# LANGUAGE OverloadedStrings #-}
  {-# LANGUAGE ScopedTypeVariables #-}
  {-# LANGUAGE NoImplicitPrelude #-}

  module Main where

  import qualified Data.Text as T
  import Network.HTTP.Types (status500)
  import qualified Network.Wai as W
  import qualified Network.Wai.Handler.Warp as W
  import Relude hiding (get, put)
  import Relude.Print (putTextLn)
  import UnliftIO (liftIO)
  import qualified UnliftIO.Exception as E
  import Webby

  -- An example exception handler web-applications can install with webby
  appExceptionHandler :: T.Text -> (E.SomeException -> WebbyM appEnv ())
  appExceptionHandler appName = \(exception :: E.SomeException) -> do
    setStatus status500
    let msg = appName <> " failed with " <> show exception
    putTextLn msg
    text msg

  newtype AppEnv = AppEnv Text
    deriving (Eq, Show)

  -- To demonstrate that appEnv is avaliable via MonadReader interface without any
  -- additional boiler-plate
  class HasAppName env where
    getAppName :: env -> Text

  instance HasAppName AppEnv where
    getAppName (AppEnv name) = name

  main :: IO ()
  main = do
    -- Define the API routes handled by your web-application
    let routes =
          [ get "/api/a" (text "a\n"),
            get "/api/b" (text "b\n"),
            post
              "/api/capture/:id"
              ( do
                  idVal :: Int <- getCapture "id"
                  text $ (T.pack (show idVal) `T.append` "\n")
              ),
            get
              "/api/isOdd/:val"
              ( do
                  val :: Integer <- getCapture "val"
                  -- if val is odd return the number else we short-circuit the handler
                  unless (odd val) finish
                  text $ show val
              ),
            get
              "/api/appName"
              ( do
                  appName <- asks getAppName --appEnv is only an `ask` away
                  text appName
              ),
            get "/aaah" (liftIO $ E.throwString "oops!")
          ]
        -- Set the routes definition and exception handler for your
        -- web-application
        webbyConfig =
          setExceptionHandler (appExceptionHandler "MyApp") $
            setRoutes routes $
              defaultWebbyServerConfig
        -- Application environment in this example is a simple Text literal.
        -- Usually, application environment would contain database connections
        -- etc.
        appEnv = AppEnv "test-webby"

    webbyApp <- mkWebbyApp appEnv webbyConfig
    putStrLn "Starting webserver..."
    W.runEnv 7000 webbyApp

  ```

  You can try the example above, by cloning the repo and running the
  example:

  ``` shell
  $ examples/Basic.hs
  ```

  In another shell, let's `curl` the server:

  ``` shell
  $ curl http://localhost:7000/api/a
  a

  $ curl http://localhost:7000/api/b
  b

  $ curl -XPOST http://localhost:7000/api/capture/32
  32

  $ curl http://localhost:7000/api/appName
  test-webby

  $ curl http://localhost:7000/aaah
  MyApp failed with Control.Exception.Safe.throwString called with:

  oops!
  Called from:
    throwString (examples/Basic.hs:55:42 in main:Main)
  ```
description-type: markdown
hash: 324e90666127936160ba49bc111a22cd95e40887d1983f6b3a5f70e54bedf4af
homepage: https://github.com/donatello/webby
latest: 1.1.1
license-name: Apache-2.0
maintainer: |-
  aditya.mmy@gmail.com,
  krishnan.parthasarathi@gmail.com
synopsis: A super-simple web server framework
test-bench-deps:
  aeson: '>=1.4 && <2.2'
  base: '>=4.7 && <5'
  binary: '>=0.8 && <1'
  bytestring: '>=0.10 && <1'
  formatting: '>=6.3.7 && <7.2'
  http-api-data: '>=0.4 && <0.6'
  http-types: '>=0.12 && <0.13'
  mime-types: '>=0.1 && <0.2'
  relude: '>=0.7'
  resourcet: '>=1.2 && <1.3'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-quickcheck: '>=0'
  text: '>=1.2 && <2.1'
  unliftio: '>=0.2.13 && <0.3'
  unliftio-core: '>=0.2 && <0.3'
  unordered-containers: '>=0.2.9 && <0.3'
  wai: '>=3.2 && <3.3'
  webby: '>=0'
