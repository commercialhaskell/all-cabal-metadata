homepage: https://gitlab.utc.fr/gsabbagh/sets
changelog-type: markdown
hash: 56ac486e15b5f1115f5ffa5af2719f88619fb688d8405afc124b11538df99730
test-bench-deps:
  base: '>=4 && <5'
  WeakSets: -any
maintainer: guillaumesabbagh@protonmail.com
synopsis: Simple set types. Useful to create sets of arbitrary types and nested sets.
changelog: "# Revision history for Sets\r\n\r\n## 0.1.0.0 -- 2022-07-12\r\n\r\n* First
  version. Released on an unsuspecting world.\r\n\r\n## 1.0.0.0 -- 2022-07-17\r\n\r\n*
  Data.WeakSet and Data.WeakMap are now valid alternatives to Data.Set and Data.Map.\r\n\r\n#
  1.1.0.0 -- 2022-07-19\r\n\r\n* Correction of wrong function declaration of (|^|)\r\n\r\n#
  1.1.1.0 -- 2022-07-19\r\n\r\n* Implementation of drop, take and splitAt\r\n\r\n#
  1.1.2.0 -- 2022-07-19\r\n\r\n* Addition of weakMapFromSet and correction of WeakMap
  Show instance.\r\n\r\n# 1.1.3.0 -- 2022-07-20\r\n\r\n* Addition of inverse and pseudoInverse
  functions.\r\n\r\n# 1.1.4.0 -- 2022-07-20\r\n\r\n* Major bug correction : instance
  Eq for Data.WeakMap\r\n\r\n# 1.2.0.0 -- 2022-07-20\r\n\r\n* Major bug correction
  : instance Foldable removed for Data.WeakMap and Data.WeakSet\r\n\r\n# 1.2.1.0 --
  2022-07-23\r\n\r\n* Adding anElement function\r\n\r\n# 1.2.2.0 -- 2022-07-24\r\n\r\n*
  Adding enumerateMaps function\r\n\r\n# 1.2.3.0 -- 2022-07-25\r\n\r\n* Adding all
  functions from Foldable\r\n\r\n# 1.2.4.0 -- 2022-07-26\r\n\r\n* Adding Alternative
  instance\r\n\r\n# 1.3.0.0 -- 2022-07-28\r\n\r\n* Correction of cartesianProductOfSet\r\n\r\n#
  1.3.1.0 -- 2022-08-29\r\n\r\n* Addition of first and second functions for PureSet.\r\n\r\n#
  1.3.2.0 -- 2022-08-30\r\n\r\n* Bug correction in formatPureSet.\r\n\r\n# 1.3.3.0
  -- 2022-08-30\r\n\r\n* Bug correction in pairs.\r\n\r\n# 1.4.0.0 -- 2022-08-30\r\n\r\n*
  Bug correction in maybeSecond.\r\n\r\n# 1.4.0.1 -- 2023-09-23\r\n\r\n* Base update
  to 4.18.0.0\r\n\r\n# 1.5.0.0 -- 2023-10-10\r\n\r\n* Better bounds"
basic-deps:
  base: '>=4 && <5'
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 1.0.0.0
- 1.1.0.0
- 1.1.1.0
- 1.1.2.0
- 1.1.3.0
- 1.1.4.0
- 1.2.0.0
- 1.2.2.0
- 1.2.3.0
- 1.2.4.0
- 1.3.0.0
- 1.3.1.0
- 1.3.2.0
- 1.3.3.0
- 1.4.0.0
- 1.4.0.1
- 1.5.0.0
author: Guillaume Sabbagh
latest: 1.5.0.0
description-type: markdown
description: "# WeakSets\n\nThis is a Haskell package which defines sets and maps
  in a more general way than Data.Set and Data.Map of the containers package.\n\nThis
  package answers three problems : \n\n* how to make sets of types which do not implement
  the Ord typeclass (which is required by Data.Set), this problem is solved by `Data.WeakSet`;\n*
  how to make maps of types which do not implement the Ord typeclass, this problem
  is solved by `Data.WeakMap`;\n* how to make arbitrarily nested sets as set theory
  allows. This problem is resolved thanks to `Math.PureSet`.\n\nData.WeakSet and Data.WeakMap
  are (almost) backward compatible with Data.Set and Data.Map. Therefore you can replace
  your imports of Data.Set to Data.WeakSet and Data.Map.Strict to Data.WeakMap safely.
  There a a few functions which require to add an Eq typeclass as a requirement. Some
  functions are not implemented as they really need the Ord typeclass, if you use
  them you should use Data.Set or Data.Map.\n\n## General info\n\nA `WeakSet` is a
  list where duplicates elements and the order of elements are disregarded. Its stronger
  counterpart is Data.Set. Most of the functions related to `WeakSet` require the
  Eq typeclass.\n\nA `WeakMap` is an association list where duplicates entries and
  the order of pairs are disregarded. Its stronger counterpart is Data.Map. Most of
  the functions related to `WeakMap` require the Eq typeclass.\n\nA `PureSet` is a
  tree-like structure where duplicate branches and the order of branches is disregarded.\n\n\n\n##
  Installation\n\n`cabal install WeakSets`\n\n## Usage\n\nExample usage of weak sets
  :\n\n```haskell\nghci> import Data.WeakSet.Safe\nghci> data Foo = Foo Int Char deriving
  (Eq, Show) -- an arbitrary type which is not required to implement Ord typeclass\nghci>
  s1 = set [Foo 3 'a', Foo 2 'c', Foo 3 'a']\nghci> s2 = set [Foo 2 'c', Foo 3 'a']\nghci>
  s1 == s2\nTrue\nghci> s3 = set [Foo 2 'c', Foo 3 'a']\nghci> s4 = s1 ||| s3\nghci>
  s4\n(set [Foo 3 'a',Foo 2 'c',Foo 3 'a',Foo 2 'c',Foo 3 'a'])\nghci> cardinal s4\n2\n```\n\nExample
  usage of weak maps :\n\n```haskell\nghci> import Data.WeakMap.Safe\nghci> data Foo
  = Foo Int Char deriving (Eq) -- an arbitrary type which is not required to implement
  Ord typeclass\nghci> m1 = weakMap [(Foo 3 'a',1), (Foo 2 'c',5), (Foo 3 'a',3)]\nghci>
  m1 |!| (Foo 2 'c')\n5\n```\n\nExample usage of pure sets :\n\n```haskell\nghci>
  import PureSet\nghci> numberToSet 3\n(pureSet [(pureSet []),(pureSet [(pureSet [])]),(pureSet
  [(pureSet []),(pureSet [(pureSet [])])])])\nghci> putStrLn.prettify $ numberToSet
  3\n{{}, {{}}, {{}, {{}}}}\n```\n\n## Contribution\n\nAny input is appreciated !
  Send an email for any remark or question.\nThe git repository : https://gitlab.utc.fr/gsabbagh/sets\n\n"
license-name: LGPL-3.0-or-later
