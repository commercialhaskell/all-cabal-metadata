homepage: https://github.com/kallisti-dev/hs-webdriver
changelog-type: markdown
hash: a1c5ed6089e32b2b1a3bd7ccf80ac3000341e19678abb4ed50848490fd287411
test-bench-deps: {}
maintainer: kallisti.dev@gmail.com
synopsis: a Haskell client for the Selenium WebDriver protocol
changelog: "# Change Log\n\n##0.9.0.1\n* Fixed build errors when building against
  aeson-1.4.3.0\n\n## 0.9\n\n### Breaking API changes\n* Changed the type of the `cookExpiry`
  field of `Cookie` from `Maybe Integer` to `Maybe Double`. This fixes parsing issues
  with some Selenium server implementations\n* Changed `elemPos` and `elemSize` to
  return `Float` pairs instead of `Int` pairs. This fixes parsing issues with some
  Selemium server implementations.\n* Removed the `Element` argument from the `sendRawKeys`
  function. This argument is not used in modern Selenium versions.\n\n### New API
  features\n* Added a `LogDebug` constructor to the `LogLevel` type.\n* Added `ffAccpetInsecureCerts`
  capability for `Firefox` geckodriver.\n* The constructor for `ExpectFailed` is now
  exported so that it can be caught properly by exception handlers\n* Added GHC callstack
  support. `BadJSON` exceptions are now caught and rethrown with `error` calls to
  improve stack traces.\n\n### W3C standard compatibility fixes\n* Fixed `ToJSON Element`
  instance so that it accepts both old OSS and new W3C element format (fixes compatibility
  issue with Selenium 3+ versions)\n* Changed the `maximize` API call to use POST
  instead of GET\n\n### Other Selenium compatibility fixes\n* Fixed an error with
  some versions of chromedriver when using `closeWindow`\n\n## 0.8.5\n* Added support
  for experimental Chrome options that are not part of the API\n* Added a Phantomjs
  constructor for the Browser type\n* Changed the type of StackFrame line numbers
  from Word to Int to avoid parse errors in newer Aeson versions (sometimes the server
  returns negative line numbers)\n* Fixed support for http-client > 0.5\n\n## 0.8.4\n*
  Added a new `Test.WebDriver.Common.Keys` module with named constants for use with
  `sendKeys`\n* Updated old URLs in documentation\n* Introduced support for http-client
  5.0\n\n## 0.8.3\n* Removed most upper bounds on dependencies in our cabal file to
  avoid stackage version madness.\n\n## 0.8.2\n* Added a `saveScreenshot` command,
  for conenience, which writes the results of the `screenshot` command directly to
  a given file path.\n* Added new `WebDriver` instance for `ExceptT`.\n\n## 0.8.1\n*
  Previously internal convenience functions `noReturn` and `ignoreReturn` are now
  exported in Test.WebDriver.JSON\n* `elemInfo` is now deprecated due to it being
  phased out in the Marionette (Firefox) driver. It will likely be removed once Selenium
  4 is released.\n* Fixed an issue causing PAC settings to not work.  \n\n## 0.8.0.4\n*
  Quick fix to parse \"unsupported command\" errors when using Marionette driver (Selenium
  + Marionette has nonstandard behavior when reporting that error type)\n\n## 0.8.0.3\n*
  Fixed build errors for GHC < 7.10. webdriver now builds with GHC stable releases
  7.4.2, 7.6.3, and 7.8.4\n* Fixed support for bytestring 0.9.*\n\n## 0.8.0.2\n* Fixed
  issue introduced in 0.8 that caused build failure when using aeson < 0.10\n\n##
  0.8.0.1\n* findElems and and findElemsFrom were accidentally changed to return a
  single Element in the last release. This has been fixed. \n\n## 0.8\n\n### Command
  changes\n* All commands that previously accepted a list parameter now accepts any
  instance of `Foldable` instead.\n\n### Overloadable configuration\nIt is now possible
  to define custom configuration types that can be used to initialize webdriver sessions.\n\n`runSession`
  now has the following type:\n```hs\n  runSession :: WebDriverConfig conf => conf
  -> WD a -> IO a\n```\nAnd the typeclass to create new config types looks like this:\n\n```hs\n
  \ -- |Class of types that can configure a WebDriver session.\n  class WebDriverConfig
  c where\n    -- |Produces a 'Capabilities' from the given configuration.\n    mkCaps
  :: MonadBase IO m => c -> m Capabilities\n\n    -- |Produces a 'WDSession' from
  the given configuration.\n    mkSession :: MonadBase IO m => c -> m WDSession\n```\n\nOf
  course you can still use `WDConfig`, as it is now an instance of `WebDriverConfig`.\n\n###
  Reworked custom HTTP headers interface\n* Support for custom request headers was
  added rather hastily, resulting in several functions having explicit `RequestHeaders`
  parameters. The interface has been reworked now so that custom request headers are
  stored inside `WDSession` and explicit `RequestHeaders` parameters have been removed.\n*
  There's also now a distinction in configuration between `wdAuthHeaders` which are
  used only during initial session creation, and `wdRequestHeaders`, which are used
  with all other HTTP requests\n* Two new utility functions were added to make working
  with custom HTTP headers easier: `withRequestHeaders` and `withAuthHeaders`\n\n###
  Clean-up and dependency changes\n* Removed a whole mess of unusued import and deprecation
  warnings when building with GHC 7.10\n* We now enforce an attoparsec lower bound
  of 0.10 (there was no lower bound before)\n* The unnecessary dependency on mtl is
  now removed.\n* Added some monad transformer instances for WebDriver and WDSessionState
  that were mysteriously missing: strict WriterT, ReaderT, ListT\n* data-default dependency
  was changed to data-default-class\n\n## 0.7\n\nBecause this is a fairly major update,
  changes have been described in detail and organized into categories. Most of the
  potentially breaking changes are to the \"intermediate\" API that might affect library
  code or advanced applications; changes that are not entirely \"user-facing\" but
  also not quite \"internal\".\n\nBasic web test code only has to contend with a few
  additional symbol exports, overloading of type signatures on some existing functions,
  and the reworked session history API.\n\n### Top-level API (exposed by`Test.WebDriver`
  module)\n  * `withSession` is now overloaded over the new constraint alias `WDSessionStateControl`
  ([see below](#typeclass-api)). This means that it can be used with monad transformer
  stacks over `WD` without any lifting required.\n  * Added several new `WDConfig`
  convenience functions: `modifyCaps`, `useBrowser`, `useVersion`, `usePlatform`,
  `useProxy`; these functions are overloaded over the new `HasCapabilities` constraint
  alias ([see below](#typeclass-api))\n  * Reworked and improved session history API\n
  \   * Added a `SessionHistory` record type to replace the old `(Request, Response
  ByteString)` type. The new type has the same data as the previous tuple, but additionally
  records the number of attempted HTTP retries, and instead of `Response ByteString`
  uses `Either SomeException (Response ByteString)` so that HTTP request errors can
  be logged.\n    * Removed `wdKeepSessHist` field from `WDConfig` and replaced it
  with `wdHistoryConfig`, which uses a new `SessionHistoryConfig` type.\n      \n
  \     ```hs\n        -- |A function used to append new requests/responses to session
  history.\n        type SessionHistoryConfig = SessionHistory -> [SessionHistory]
  -> [SessionHistory]\n      ```\n    * The new field can be configured using several
  new constants: `noHistory`, `onlyMostRecentHistory`, and `unlimitedHistory`. Note:
  `unlimitedHistory` is now the default configuration for history. For the old behavior,
  use `onlyMostRecentHistory`.\n    * New top-level functions for accessing session
  history\n      \n      ```hs\n        -- |Gets the command history for the current
  session.\n        getSessionHistory :: WDSessionState wd => wd [SessionHistory]\n
  \       \n        -- |Prints a history of API requests to stdout after computing
  the given action\n        --  or after an exception is thrown\n        dumpSessionHistory
  :: WDSessionStateControl wd => wd a -> wd a\n      ```\n\n### Implicit waits API
  (`Test.WebDriver.Commands.Wait`)\n* Added functions for checking some expected conditions
  in explicit waits: `expectNotStale`, `expectAlertOpen`, `catchFailedCommand`\n\n###
  Typeclass API\n* `WDSessionState` is now a superclass of `Monad` and `Applicative`
  instead of `MonadBaseControl IO`. This makes the class significantly more flexible
  in how it can be used, as it no longer requires `IO` as a base monad.\n  * For convenience
  the following constraint aliases were added (requires `ConstraintKinds` extension
  to use). Several existing API functions have been updated to use these new constraints
  where appropriate.\n    \n    ```hs\n      type WDSessionStateIO s = (WDSessionState
  s, MonadBase IO s)\n      type WDSessionStateControl s = (WDSessionState s, MonadBaseControl
  IO s)\n    ```\n    \n  * The `WDSessionStateControl` constraint is equivalent to
  the previous `WDSessionState` constraint.\n  * The `WebDriver` class is unaffected
  (it is now a superclass of `WDSessionStateControl`), so code using the basic `Test.WebDriver`
  API will not be affected.\n\n* New typeclasses added to `Test.WebDriver.Capabilities`:
  `GetCapabilities` and `SetCapabilities`; for convenience a constraint alias `HasCapabilities`
  has been added to work with both of these classes (requires `ConstraintKinds` extension
  to use)\n      \n      ```hs\n        -- |A typeclass for readable 'Capabilities'\n
  \       class GetCapabilities t where\n          getCaps :: t -> Capabilities\n
  \       \n        -- |A typeclass for writable 'Capabilities'\n        class SetCapabilities
  t where\n          setCaps :: Capabilities -> t -> t\n        \n        -- |Read/write
  'Capabilities'\n        type HasCapabilities t = (GetCapabilities t, SetCapabilities
  t)\n      ```\n      \n### Minor API changes (not exposed to `Test.WebDriver` module)\n*
  `Test.WebDriver.Session` changes\n  * new function `mostRecentHistory` added\n  *
  `lastHTTPRequest` renamed to `mostRecentHTTPRequest` (for consistency)\n  * `mkSession`
  moved from `Test.WebDriver.Config` to `Test.WebDriver.Session`\n* `Test.WebDriver.Internal`
  changes\n  * `sendHTTPRequest` now returns `(Either SomeException (Response ByteString))`
  and catches any exceptions that occur during the request. When using default configuration,
  the exceptions are also saved in 'wdSessHist'.\n  * `Test.WebDriver.Internal` no
  longer defines and exports exception types. All exception defined here previously
  have been moved to an unexposed `Test.WebDriver.Exceptions.Internal` module. These
  types are still exported in the usual places.\n\n### Dependencies\n* Now supports
  http-types up to 0.9\n\n## 0.6.3.1\n* Fixed an issue with aeson 0.10 support\n\n##
  0.6.3\n* Support aeson 0.10\n* Added support for multiple HTTP attempts per command
  request, using the new WDConfig field wdHTTPRetryCount\n\n## 0.6.2.1\n* Supports
  vector 0.11, aeson 0.9, attoparsec 0.13\n\n## 0.6.2\n* Supports GHC 7.10\n* Supports
  reworked Chrome capabilities used by newer versions of WebDriver\n* Servers that
  return empty JSON strings for commands with no return value will no longer cause
  parse errors \n\n## 0.6.1\n* Added the ability to pass HTTP request headers at session
  creation\n* Fixed an issue involving an obsolete JSON representation of Chrome capabilities\n*
  Relax upper bound on exceptions dependency\n\n## 0.6.0.4\n* Support for monad-control
  1.0\n\n## 0.6.0.3\n* Relaxed upper bounds on text and http-client versions \n\n##
  0.6.0.2\n* Added support for aeson > 0.8 and network > 2.6\n* Added support for
  the \"X-Response-Body-Start\" HTTP header used for error responses in newer http-client
  versions\n\n## 0.6.0.1\n* Fixed Haddock parse errors. No code changes introduced
  in this version.\n\n## 0.6\n* Rather than WDSession serving dual roles as configuration
  and state, its functionality has been split into 2 respective types: WDConfig and
  WDSession.\n* runSession now takes a WDConfig instead of WDSession and Capabilities
  parameters.\n* runSession no longer closes its session on successful completion;
  use finallyClose or closeOnException for this behavior\n* The old Test.WebDriver.Classes
  module has been split into Test.WebDriver.Session and Test.WebDriver.Class\n* SessionState
  typeclass renamed to WDSessionState\n* We now use the http-client package instead
  of HTTP. This is reflected in the addition of Manager fields in both WDConfig and
  WDSession\n\n## 0.5.5\n* Added optional HTTP history tracking for debugging purposes.\n\n##
  0.5.4\n* MonadCatchIO is deprecated in favour of exceptions.\n* Relaxed dependencies
  on mtl, network and scientific.\n\n## 0.5.3.3\n* Relaxed text dependency up to 1.2\n\n##
  0.5.3.2\n### bug fixes\n* fixed remaining compilation problems with aeson. now supports
  aeson >= 0.6.2.0 && < 0.8\n* now depends on directory-tree instead of filesystem-trees.
  this fixes several problems with firefox/chrome profile support.\n\n## 0.5.3.1\n###
  bug fixes\n* fixed compilation error with aeson 0.7 and greater\n\n## 0.5.3\n\n###
  new features\n* SessionNotCreated constructor added to FailedCommandType\n* new
  command deleteCookieByName added\n\n###b ug fixes\n* asyncJS now properly distinguishes
  between a null return and a script timeout\n* fixed a change in waitWhile causing
  the opposite of expected behavior\n\n## 0.5.2\n### API changes\n* added many new
  Internet Explorer capabilities\n* added additionalCaps to Capabilities, which allows
  support for non-standard capabilities\n* Browser type now supports non-standard
  browsers via the new Browser constructor\n* added support for the new unexpectedAlertBehaviour
  capability\n\n### new features\n* new command getApplicationCacheStatus supported\n*
  error reporting for unknown commands now slightly improved\n\n### bug fixes\n* internal
  request URIs are now properly percent-encoded\n* improved handling of browser-specific
  capabilities\n* fixed incompatability with new session creation protocol changes
  introduced in selenium 2.35\n* updated to work with Aeson 0.6.2 and onward\n\n##
  hs-webdriver 0.5.1\n### API changes\n* Test.WebDriver.Internal.FailedCommandInfo
  now stores screenshots as lazy bytestrings\n* Test.WebDriver.Common.Profile now
  stores PreparedProfile as a lazy bytestring\n* Test.WebDriver.Chrome.Extension now
  stores ChromeExtension as a lazy bytestring\n* The LogPref type has been renamed
  to LogLevel to reflect its use within the new log interface\n\n### new features\n*
  a new log interface as specified by the webdriver standard. This includes the functions
  getLogs and getLogTypes, and the types LogType and LogEntry. \n* waitWhile and waitUntil
  now show more detailed information about why an explicit wait timed out.\n\n## hs-webdriver
  0.5.0.1\n### bug fixes\n* hs-webdriver now correctly handles a wider variety of
  server-specific responses when a webdriver command expects no return value.\n* An
  issue with the redirect status codes used during session creation has been fixed.\n*
  As a result of the above fixes, hs-webdriver should now work with chromedriver.
  Note that, prior to this version, you can still use chromedriver if you use the
  selenium standalone server jar as a proxy.\n\n\n## hs-webdriver 0.5\n### API changes\n*
  Test.WebDriver.Commands.Wait.unexpected now accepts a String argument, which is
  used as an error message\n* screenshot and uploadZipEntry from Test.WebDriver.Commands
  now use lazy bytestrings\n* wdBasePath field added to WDSession. This allows you
  to specify a custom base path for all WebDriver requests. The default, as specified
  in the WebDriver standard, is \"/wd/hub\"\n\n### new features\n* added Test.WebDriver.Commands.screenshotBase64\n\n##
  hs-webdriver 0.4\n\n### API changes\n* finallyClose and closeOnException are now
  overloaded on the WebDriver class.\n* NoSessionId and doSessCommand were moved from
  Test.WebDriver.Classes to Test.WebDriver.Commands.Internal\n\n### bug fixes\n* fixed
  a typo in the export list of Firefox.Profile; deleteFile is now correctly exported
  instead of removeFile from System.Directory \n* fixed an error in the JSON representation
  of MouseButton\n\n### new features\n* A new module, Test.WebDriver.Commands.Internal,
  which exports some low-level functions used to implement the high-level interface.
  This makes it possible for library users to extend hs-webdriver with nonstandard
  or unimplemented features.\n\n## hs-webdriver 0.3.3\n\n### API changes\n* The representation
  of profile files has been changed to use a HashMap instead of an association list.
  This ensures that destination paths are always unique.\n\n### bug fixes\n* The default
  preferences used by Selenium are now merged into the preferences of Firefox profiles
  loaded from disk.\n* addExtension will now correctly add extension directories to
  a profile.\n\n### known issues\n* Because of the way loadProfile currently adds
  directories to the profileFiles HashMap, it's possible for extensions added via
  addExtension to be overriden by the extensions originally listed in the on-disk
  extensions directory.\n\n### new features \n* It's now possible to add entire directories
  to a profile in pure code using addFile and addExtension.\n* new functions in Common.Profile:
  unionProfiles, onProfileFiles, onProfilePrefs\n* new function in Commands.Wait:
  onTimeout\n* the WD monad now has a MonadCatchIO instance, as an alternative to
  lifted-base for exception handling\n\n\n## hs-webdriver 0.3.2.1\n\n### bug fixes\n*
  Removed a bug in waitWhile' that resulted in an infinite loop\n* Fixed the incorrect
  representation of JSON profiles\n* Fixed relative path issues when zipping profile
  directories from disk\n\n## hs-webdriver 0.3.2\n\n### bug fixes\n* Changed the constraint
  on filesystrem-trees to avoid a broken version\n* Added the missing exports for
  addFile and deleteFile in Common.Profile and Firefox.Profile\n\n### new features\n*
  new Common.Profile functions: hasExtension, hasFile\n\n## hs-webdriver 0.3.1 \n\n###
  API changes\n* The representation of Profiles has changed, allowing it to store
  arbitrary files as well as extensions. The functional API for working with preferences
  and extensions ismostly unchanged, except for the behavior of calling addExtension
  consecutively with the same filepath argument.\n* The old <&&> and <||> operators
  in Test.WebDriver.Commands.Wait have been removed and replaced with the ones exported
  from Control.Conditional from the cond package.\n\n### bug fixes\n* Fixed memory
  leak resulting from an infinite recursion in the FromJSON instance of PreparedProfile.\n*
  loadProfile now properly loads an entire Firefox profile from disk, rather than
  just the extensions and preferences.\n\n### known issues\n* An issue involving lazy
  bytestring IO in the zip-archive package means that unusually large profiles might
  exceed the OSes open file limit.\n\n### new features\n* several new functions for
  working with Firefox/Opera profiles have been added. This includes functions for
  loading large profiles from disk, functions for working with zipped profiles, and
  functions for adding arbitrary files to a profile in pure code. \n* new helper functions
  were added to Test.WebDriver.Commands.Wait, exported from the cond package.\n\n##
  hs-webdriver 0.3.0.1\n\n### bug fixes\n* due to a nonconformance in the spec from
  the Grid server, wire responses were being received that contained no sessionId
  key, which subsequently resulted in a parse error from our JSON parser. This has
  been fixed, so that an omitted sessionId defaults to Nothing.\n* major bux fixes
  in the Firefox profile code. Note that loadProfile is unlikely\nto work as expected,
  but prepareTempProfile should.\n\n## hs-webdriver 0.3 \n\n### API changes\n* 2 typeclasses
  were introduced. All WebDriver commands are now overloaded on WebDriver class, so
  that monad transformers with a WD base can be used conveniently.\n* The MonadState
  instance of WD has been removed and replaced by SessionState.\n* The Firefox profile
  code has been generalized to work with either Opera or Firefox profiles. A phantom
  type parameter is used to create a distinction between the two. See documentation
  on Common.Profile and Firefox.Profile to learn about the specific changes that were
  made.\n* FFLogPref is now removed and replaced by the LogPref type, because both
  Firefox and Opera config use the same logging preference values.\n* Several new
  modules have been created, including: Capabilities, Monad, Classes, Exceptions.
  Many of the definitions have been moved around, but the export lists of the pre-existing
  modules are the same.\n\n### bug fixes\n* Various issues with the serialization
  of capabilities meant that Chrome, IE, and Opera weren't able to startup correctly
  with default capabilities. This is now fixed.\n\n### new features\n* General documentation
  improvements.\n* Opera configuration is now implemented.\n\n## hs-webdriver 0.2\n\n###
  API changes\n* FailedCommandInfo changed so that it stores a WDSession rather than
  just a Maybe SessionId, thus providing server host and port information as well
  as the session ID.\n* As a result, mkFailedCommandInfo is now String -> WD FailedCommandInfo,
  since it requires access to the WDSession state.\n* HTML5StorageType changed to
  the more accurate WebStorageType\n\n### new features\n* general documentation improvements\n*
  the uploadFile, uploadRawFile, and uploadZipEntry functions, which support uploading
  file contents to the remote server\n\n## hs-webdriver 0.1\n\n### API changes\n*
  getWindowSize, setWindowSize, getWindowPos, and setWindowPos have all been deprived
  of their WindowHandle argument. This is due to the fact that using unfocused windows
  with those commands causes undefined behavior. \n\n### new features\n* the mkCookie
  function for convenient cookie construction\n* the focusFrame function for focusing
  to individual frames\n* the setPageLoadTimeout function\n* the maximize function
  for maximizing windows\n* support for HTML 5 web storage\n"
basic-deps:
  http-client: '>=0.3'
  exceptions: '>=0.4'
  zip-archive: '>=0.1.1.8'
  bytestring: '>=0.9'
  base: '>=4.9 && <4.15'
  data-default-class: -any
  time: '>1.0'
  base64-bytestring: '>=1.0'
  unordered-containers: '>=0.1.3'
  text: '>=0.11.3'
  monad-control: '>=0.3'
  filepath: '>1.0'
  network: '>=2.6'
  lifted-base: '>=0.1'
  directory-tree: '>=0.11'
  network-uri: '>=2.6'
  transformers-base: '>=0.1'
  attoparsec: '>=0.10'
  transformers: '>=0.4'
  temporary: '>=1.0'
  scientific: '>=0.2'
  http-types: '>=0.8'
  aeson: '>=0.6.2.0 && <1.6'
  call-stack: -any
  vector: '>=0.3'
  directory: '>1.0'
all-versions:
- '0.6'
- 0.6.0.1
- 0.6.0.2
- 0.6.0.3
- 0.6.0.4
- 0.6.1
- 0.6.2
- 0.6.2.1
- 0.6.3.1
- '0.7'
- 0.8.0.3
- 0.8.0.4
- 0.8.1
- 0.8.2
- 0.8.3
- 0.8.4
- 0.8.5
- '0.9'
- 0.9.0.1
author: Adam Curtis
latest: 0.9.0.1
description-type: markdown
description: |
  [![Build Status](https://travis-ci.org/kallisti-dev/hs-webdriver.svg?branch=master)](https://travis-ci.org/kallisti-dev/hs-webdriver)

  hs-webdriver is a Selenium WebDriver client for the Haskell programming language. You can use it to automate browser sessions for testing, system administration, etc.

  For more information about Selenium itself, see http://seleniumhq.org/

  # Contents
  * [Installation](#installation)
      * [Installation from Hackage](#installation-from-hackage)
      * [Installation from This Repository](#installation-from-this-repository)
  * [Getting Started](#getting-started)
      * [Using the Selenium Server](#using-the-selenium-server)
      * [Hello, World!](#hello-world)
  * [Integration with Haskell Testing Frameworks](#integration-with-haskell-testing-frameworks)
  * [Documentation](#documentation)

  # Installation
  hs-webdriver uses the Cabal build system to configure, build, install, and generate documentation on multiple platforms.

  For more information on using Cabal and its various installation options, see the Cabal User's Guide at http://www.haskell.org/cabal/users-guide/index.html

  ## Installation from Hackage
  hs-webdriver is hosted on Hackage under the name webdriver. Thus, the simplest way to download and install the most recent version of hs-webdriver is to run:

  ```sh
  cabal install webdriver
  ```
  There are also options to do system-wide installation, version selection, and other build options; see cabal-install documentation.

  ## Installation from this repository

  To build and install a git revision for a single user on your system, run these commands from within the repository directory


  ### Using cabal-install

  ```sh
  cabal install
  ```

  ### Using Cabal

  For systems without cabal-install available, you can also run the Setup.hs
  script, as such:

  ```sh
  runhaskell Setup.hs configure --user
  runhaskell Setup.hs build
  runhaskell Setup.hs install
  ```

  For more build options, please refer to the Cabal documentation.


  # Getting Started

  WebDriver is a client-server protocol. Since hs-webdriver only implements a WebDriver client, you must have a WebDriver server to which you can connect in order to make use of this library.

  ## Using the Selenium Server
  While you can use any WebDriver server out there, probably the simplest server to use with hs-webdriver is [Selenium Server](http://docs.seleniumhq.org/download/). You'll need an installation of the Java runtime to use this server. Once you've downloaded Selenium Server to your current working directory, you can start the server with this shell command:

      java -jar selenium-server-standalone-*.jar

  The server should now be listening at localhost on port 4444.

  Currently, `hs-webdriver` only supports selenium version 2.
  The [beginner example](/examples/readme-example-beginner.md) was
  tested with `selenium-server-standalone-2.53.1`.

  ## Hello, World!
  With the Selenium server running locally, you're ready to write browser automation scripts in Haskell.

  A [simple example can be found here](/examples/readme-example-beginner.md), written in literate Haskell so that you can compile it with GHC yourself. It is very beginner friendly and assumes no prior knowledge of Haskell. For other examples see the [examples](examples/) and [test/etc](test/etc/) directory.


  # Integration with Haskell Testing Frameworks

  This package does not provide utilities to integrate with popular Haskell testing frameworks. However, other packages exist for this purpose:

  * [hspec-webdriver](https://hackage.haskell.org/package/hspec-webdriver)
  * [quickcheck-webdriver](https://hackage.haskell.org/package/quickcheck-webdriver)

  # Documentation

  Documentation for hs-webdriver is available on Hackage at <http://hackage.haskell.org/package/webdriver>. You can also generate local HTML documentation from this source revision with the following shell command:

  ```sh
  runhaskell Setup.hs haddock
  ```

  Haddock will generate documentation and save it in `dist/doc/html/webdriver`
license-name: BSD-3-Clause
