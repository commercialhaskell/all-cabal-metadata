homepage: https://github.com/tweag/webauthn
changelog-type: markdown
hash: e0816d7ad2f4ef5ca44d5c5e9c50d8d9297464f2f41c43ea9b747c5d71e84537
test-bench-deps:
  hspec-expectations-json: -any
  serialise: -any
  bytestring: -any
  hourglass: -any
  base: -any
  unordered-containers: -any
  hspec: -any
  text: -any
  uuid: -any
  pem: -any
  filepath: -any
  x509-store: -any
  memory: -any
  containers: -any
  singletons: -any
  x509: -any
  quickcheck-instances: -any
  cryptonite: -any
  mtl: -any
  asn1-encoding: -any
  QuickCheck: -any
  validation: -any
  webauthn: -any
  aeson: -any
  directory: -any
maintainer: Silvan Mosberger <contact@infinisil.com>
synopsis: Relying party (server) implementation of the WebAuthn 2 specification
changelog: |
  ### 0.5.0.1

  * [#159](https://github.com/tweag/webauthn/pull/159) Allow mtl-2.3.1 and support GHC 9.4

  ### 0.5.0.0

  * [#157](https://github.com/tweag/webauthn/pull/157) Add support for the [credProps](https://www.w3.org/TR/webauthn-2/#sctn-authenticator-credential-properties-extension) extension
  * [#158](https://github.com/tweag/webauthn/pull/158) Update root certificates

  ### 0.4.1.2
  * [#155](https://github.com/tweag/webauthn/pull/155) Increase cabal bounds for aeson and monad-time to support latest versions from Hackage

  ### 0.4.1.1
  * [#153](https://github.com/tweag/webauthn/pull/153) Increase cabal bounds to support up to GHC 9.2

  ### 0.4.1.0

  * [#148](https://github.com/tweag/webauthn/pull/148) Allow authentication on Safari even though it violates the specification with an empty user handle
  * [#149](https://github.com/tweag/webauthn/pull/149) Export constructors for `Crypto.WebAuthn.Encoding.WebAuthnJson` types and derive `FromJSON` for all of them
  * [#151](https://github.com/tweag/webauthn/pull/151) Fix decoding of packed attestations without a `x5c` CBOR key. This fixes attestation on MacBook Pros with Chrome and TouchID.

  ### 0.4.0.0

  * [#129](https://github.com/tweag/webauthn/pull/129) Rename and expand
    documentation for authentication/registration errors.
  * [#136](https://github.com/tweag/webauthn/pull/136) Improve the safety and
    remove duplication of the public key interface. More checks are being done
    now, preventing invalid public keys from being constructed.
  * [#140](https://github.com/tweag/webauthn/pull/140) Introduction of new
    serialization-related modules, all reexported via `Crypto.WebAuthn`:
    - `Crypto.WebAuthn.Model.Defaults` for defaults of optional fields
    - `Crypto.WebAuthn.Encoding.Strings` for string serializations of enumerations
    - `Crypto.WebAuthn.Encoding.Binary` for binary serializations
  * [#140](https://github.com/tweag/webauthn/pull/140) Backwards-incompatible
    changes/fixes regarding serialization:
    - Fix unknown `AuthenticatorTransport` values being ignored. This breaks
      backwards compatibility when the received `AuthenticatorTransport`s are
      inspected and stored in the database. Users are encouraged to serialize
      individual `AuthenticatorTransport`s to strings using the new
      `encodeAuthenticatorTransport`. The [example
      server](https://github.com/tweag/webauthn/tree/master/server) has been
      updated to store all encoded `AuthenticatorTransport`s as a CBOR-encoded
      bytestring in the database, but other schemes to store multiple transports
      can also be employed.
    - Rename webauthn-json decoding/encoding functions to have a "wj" prefix like
      `wjEncodeCredentialOptionsRegistration`. The types they interact with have
      changed their prefix from `IDL` to `WJ` as well
    - Introduce `wjDecodeCredentialRegistration'` (with a tick) to take a
      `SupportedAttestationStatementFormats` argument, while the unticked version
      doesn't take such an argument anymore. In the future only the unticked
      version is expected to stay backwards-compatible.
    - `ccdCrossOrigin`s type was corrected from `Bool` to `Maybe Bool`, where
      `Nothing` has the same semantics as `Just False`. This is necessary for
      compatibility with WebAuthn Level 1 clients, which don't set this field


  ### 0.3.0.0

  * [#125](https://github.com/tweag/webauthn/pull/125) Some small metadata type
    simplifications involving `msUpv` and `SomeMetadataEntry`
  * [#126](https://github.com/tweag/webauthn/pull/126) Decrease lower bounds of
    many dependencies including `base`, adding compatibility with GHC 8.8

  ### 0.2.0.0

  * [#115](https://github.com/tweag/webauthn/pull/115) Increase the upper bound
    of the supported Aeson versions, allowing the library to be built with Aeson
    2.0. Drop the deriving-aeson dependency.
  * [#117](https://github.com/tweag/webauthn/pull/117) Rename and expand
    documentation for attestation statement format errors. Some unused errors
    were removed.

  ### 0.1.1.0

  * [#111](https://github.com/tweag/webauthn/pull/111) Support the
    [`transports`](https://www.w3.org/TR/webauthn-2/#dom-authenticatorattestationresponse-transports-slot)
    field, allowing servers to store information from the browser on how
    authenticators were communicated with (e.g. internal, NFC, etc.). When users
    log in, this information can then be passed along in [Credential
    Descriptors](https://www.w3.org/TR/webauthn-2/#dictdef-publickeycredentialdescriptor),
    ensuring that only the transports initially registered as supported by the
    authenticator may be used. This is recommended by the standard.
  * [#112](https://github.com/tweag/webauthn/pull/112) Decrease lower bounds for
    aeson and unordered-containers.
basic-deps:
  serialise: '>=0.2.3 && <0.3'
  bytestring: '>=0.10.10 && <0.12'
  x509-validation: '>=1.6.12 && <1.7'
  hourglass: '>=0.2.12 && <0.3'
  base: '>=4.13.0 && <4.18'
  time: '>=1.9.3 && <1.12'
  base64-bytestring: '>=1.2.1 && <1.3'
  unordered-containers: '>=0.2.11 && <0.3'
  text: '>=1.2.4 && <2.1'
  uuid: '>=1.3.13 && <1.4'
  cborg: '>=0.2.4 && <0.3'
  asn1-types: '>=0.3.4 && <0.4'
  jose: '>=0.8.5 && <0.11'
  x509-store: '>=1.6.7 && <1.7'
  monad-time: '>=0.3.1 && <0.5'
  memory: '>=0.15.0 && <0.19'
  containers: '>=0.6.2 && <0.7'
  singletons: '>=2.6 && <3.2'
  x509: '>=1.7.5 && <1.8'
  lens: '>=4.18.1 && <5.3'
  binary: '>=0.8.7 && <0.9'
  cryptonite: '>=0.27 && <0.31'
  mtl: '>=2.2.2 && <2.4'
  asn1-parse: '>=0.9.5 && <0.10'
  hashable: '>=1.3.0 && <1.5'
  base16-bytestring: '>=1.0.0 && <1.1'
  file-embed: '>=0.0.11 && <0.1'
  asn1-encoding: '>=0.9.6 && <0.10'
  validation: '>=1.1 && <1.2'
  aeson: '>=1.4.7 && <2.2'
all-versions:
- '0'
- 0.1.0.0
- 0.1.1.0
- 0.2.0.0
- 0.3.0.0
- 0.4.0.0
- 0.4.1.0
- 0.4.1.1
- 0.4.1.2
- 0.5.0.0
- 0.5.0.1
author: |-
  Silvan Mosberger <contact@infinisil.com>,
  Erin van der Veen <erin@erinvanderveen.nl>,
  Arian van Putten <arian.vanputten@gmail.com>,
  Laurens Duijvesteijn <git@duijf.io>
latest: 0.5.0.1
description-type: markdown
description: |
  # Haskell WebAuthn Library

  [![Hackage](https://img.shields.io/hackage/v/webauthn.svg)](https://hackage.haskell.org/package/webauthn)

  This library implements the server-side
  [Web Authentication Relying Party specification Level 2][spec]. The goal of Web
  Authentication (WebAuthn) is to bring passwordless login/second factor
  authentication to the web, logging in using a FIDO U2F Security Key, finger
  print scanner and some other authenticator.

  This project was originally developed in 2020 as a [Zurihac project](https://wire.engineering/haskell/events/2020/06/18/wire-goes-zurihac.html) by
  [@arianvp](https://github.com/arianvp/) and [@duijf](https://github.com/duijf).
  Starting September 2021 a team at [Tweag](https://www.tweag.io/) was sponsored
  by [Mercury](https://mercury.com/) to create a production-ready open-source
  implementation of this standard, which was done by
  [@infinisil](https://github.com/infinisil/) and
  [@ErinvanderVeen](https://github.com/ErinvanderVeen/).

  ## Setting up the environment
  We assume Nix is used for the development of this library. If not using Nix,
  take a look at `default.nix` for the dependencies and GHC version. All
  instructions below assume the use of Nix.

  ### Nix Caches
  Tweag provides a Cachix cache for the library itself and all
  non-Haskell dependencies, setting up the `tweag-webauthn` cache can be
  done using the [instructions][cachix] provided by Cachix.

  ### Nix Shell
  The Nix shell provides all libraries and tools required to build the library,
  tests, and example server. Simply call `nix-shell` to enter a shell. If the
  binary caches have been configured properly, this should take little time. If
  they have not been properly configured, entering the Nix shell will take
  multiple hours.

  All further instructions in this README assume that you are in a Nix shell.

  ## Getting Started
  To get started with the library it is best to read the documentation of the
  `Crypto.WebAuthn` module. An example of how to use this library to implement a
  relying party can be found in the `server` directory, particularly the
  `server/src/Main.hs` module. Additionally, we highly recommend reading the
  [relying party section](https://www.w3.org/TR/webauthn-2/#sctn-security-considerations-rp)
  of the
  [WebAuthn security considerations chapter](https://www.w3.org/TR/webauthn-2/#sctn-security-considerations)
  before implementing a relying party.

  ## Developing the Library
  The [Haskell Language Server (hls)][hls] and [Ormolu][ormolu] are highly
  recommended for the development of this library. The hls
  [documentation][hls-editor] describes how to configure your editor to use it.
  We also recommend enabling auto-format using Ormolu for your editor. We do,
  however, also provide a bash script in `bin/autoformat.sh` that uses Ormolu to
  format all Haskell source files in the repository.

  Code not formatted using Ormolu will be rejected in CI.

  ## Running the tests
  Tests are provided in the `tests` directory. Running these tests is done via
  cabal:
  ```bash
  cabal run test-suite:tests
  ```

  ## Running the demo
  The library comes with an example implementation for a server that makes use of
  it, which can be found in the `server` directory. All dependencies required to
  build the example server are included in the Nix shell.
  ```bash
  cd server
  ./run.sh
  ```

  Changes to the server's source files automatically trigger a rebuild of the
  server.

  ## Testing with an Authenticator
  The easiest way to test the server, or your own application, is to use the
  Chrome WebAuthn development tool. Simply open the Chrome DevTools, click on the
  three dots in the top right, select "More tools -> WebAuthn", and then enable
  the virtual environment.

  Testing with a physical authenticator is easiest using an Android or iOS phone
  supporting it, or a dedicated token like a [YubiKey][yubikey] or the
  open-source [SoloKey][solokey]. Testing with a phone requires setting up a
  certificate for the domain of the relying party as WebAuthn only works via
  https, with an exception being made for `localhost`.

  ## Acknowledgements
  The test files in `tests/responses/` were not created by Tweag, but
  were instead copied from existing WebAuthn libraries. Notably the
  [.NET][dotnet] and [python][python] libraries by the .NET foundation and Duo
  Labs respectively.

  ## LICENSES
  ```text
  Copyright
    2020 - 2021 Arian van Putten
    2021 -      Tweag I/O

  Licensed under the Apache License, Version 2.0 (the "License"); you may not use
  this file except in compliance with the License. You may obtain a copy of the
  License at

    http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software distributed
  under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
  CONDITIONS OF ANY KIND, either express or implied. See the License for the
  specific language governing permissions and limitations under the License.
  ```

  [cache]: https://input-output-hk.github.io/haskell.nix/tutorials/getting-started.html#setting-up-the-binary-cache
  [cachix]: https://app.cachix.org/cache/tweag-webauthn
  [dotnet]: https://github.com/passwordless-lib/fido2-net-lib
  [hls-editor]: https://haskell-language-server.readthedocs.io/en/latest/configuration.html#configuring-your-editor
  [hls]: https://github.com/haskell/haskell-language-server
  [ormolu]: https://github.com/tweag/ormolu
  [python]: https://github.com/duo-labs/py_webauthn
  [solokey]: https://solokeys.com/
  [spec]: https://www.w3.org/TR/webauthn-2/
  [yubikey]: https://www.yubico.com/
license-name: Apache-2.0
