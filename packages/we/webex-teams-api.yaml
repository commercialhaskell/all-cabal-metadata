all-versions:
- 0.2.0.0
- 0.2.0.1
author: Naoto Shimazaki
basic-deps:
  aeson: '>=0'
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  bitset-word8: '>=0'
  bytestring: '>=0'
  conduit: '>=0'
  data-default: '>=0'
  http-conduit: '>=0'
  network-uri: '>=0'
  optparse-applicative: '>=0'
  text: '>=0'
  utf8-string: '>=0'
  webex-teams-api: '>=0'
changelog: |
  ## Webex-teams-api 0.2.0.1

  * Include .cabal file in source repo.
  * Migrate CI from Travis to GitHub Actions.
  * Build and test for multiple platforms and GHC versions.

  ## Webex-teams-api 0.2.0.0

  * First release of webex-teams-api.
  * Module name was changed but most of functions remain same.
  * Some key type classes with type families changed.
  * Streaming API is moved to separate packages.
  * Old streaming API is still available but deprecated.

  ## Cisco-spark-api 0.1.0.4

  * Final release of cisco-spark-api package.

  ## Cisco-spark-api 0.1.0.3

  * Cisco Spark is now Cisco Webex Teams.

  ## Cisco-spark-api 0.1.0.2

  * Catch up to conduit-1.3.0.

  ## Cisco-spark-api 0.1.0.1

  * Put explicit upper bound for conduit.

  ## Cisco-spark-api 0.1.0.0

  * Initial release.
changelog-type: markdown
description: |
  # webex-teams-api

  [![License: MIT](https://img.shields.io/badge/License-MIT-brightgreen.svg)](https://opensource.org/licenses/MIT)
  [![Build Status](https://github.com/nshimaza/webex-teams-api/workflows/build/badge.svg)](https://github.com/nshimaza/webex-teams-api/actions?query=workflow%3Abuild)
  [![Hackage](https://img.shields.io/hackage/v/webex-teams-api.svg?style=flat)](https://hackage.haskell.org/package/webex-teams-api)
  [![Stackage Nightly](http://stackage.org/package/webex-teams-api/badge/nightly)](http://stackage.org/nightly/package/webex-teams-api)
  [![Stackage LTS](http://stackage.org/package/webex-teams-api/badge/lts)](http://stackage.org/lts/package/webex-teams-api)

  A Haskell bindings for Cisco Webex Teams (formerly Cisco Spark) API

  Webex-teams-api (formerly cisco-spark-api) package provides types and functions
  for accessing Cisco Webex Teams REST API.  Details of the API is available
  from [developer site of Cisco Webex](https://developer.webex.com/)

  This package is designed to improve type safety over the API.  Each entity is
  separately typed.  JSON messages contained in REST responses are decoded into
  appropriate type of Haskell record.  JSON messages sent in REST requests are
  encoded only from correct type of record.

  Some Webex Teams REST API return list of objects.  Those APIs require HTTP Link
  Header based pagination.  Haskell functions for those APIs automatically request
  subsequent pages as needed.  This repo provides optional packages for streaming
  response of list API.  Webex-teams-conduit and webex-teams-pipes are thin
  wrappers of list API.  They transform chunky response from list API into
  seamless stream of elements.

  This package also provides some sample usage in command line application style.
  See source under app directory of the source package.

  ### Sample Usage

  Sending a message to a Room.

  ```haskell
      let auth        = Authorization "your authorization token"
          roomId      = RoomId "Room ID your message to be sent"
          messageText = MessageText "your message"
          message     = CreateMessage (Just roomId) Nothing Nothing (Just messageText) Nothing Nothing
      createEntity auth def createMessage >>= print . getResponseBody
  ```

  Following example is calling List Membership API which returns membership between
  Rooms and users (Person).  You can extract each Membership from
  Conduit pipe.  The `streamListWithFilter`, provided by webex-teams-conduit,
  automatically performs pagenation when it is asked more element and last
  response had link of subsequent page in HTTP Link Header.

  ```haskell
      let auth   = Authorization "your authorization token"
          filter = MembershipFilter yourRoomId Nothing Nothing
      runConduit $ streamListWithFilter auth def filter .| takeC 200 .| mapM_C print
  ```

  You can find more examples in app/Main.hs under webex-teams-pipes or
  webex-teams-conduit.

  ### Support for Lens

  This package provides many of records representing objects communicated via
  Webex Teams REST API.  Those records are designed to allow create lenses by
  Control.Lens.TH.makeFields.

  Following example creates overloaded accessors for 'Person', 'Room' and 'Team'.

  ```haskell
  makeFields ''Person
  makeFields ''Room
  makeFields ''Team
  ```

  You can access 'personId', 'roomId' and 'teamId' via overloaded accessor
  function 'id' like this.

  ```haskell
      let yourPersonId = yourPerson ^. id
          yourRoomId = yourRoom ^. id
          yourTeamId = yourTeam ^. id
  ```

  This package does not provide pre-generated lenses for you because not everyone
  need it but you can make it by yourself so easily as described.

  ### Limitation

  - WebHook API is not yet implemented.
  - Relative reference in Link Header is not recognized as next page
description-type: markdown
hash: e895a46b2f4e64b0f7030061b4a19d467bc7d3fab0a0f6d2a62a905d0432dc04
homepage: https://github.com/nshimaza/webex-teams-api#readme
latest: 0.2.0.1
license-name: MIT
maintainer: Naoto.Shimazaki@gmail.com
synopsis: A Haskell bindings for Webex Teams API
test-bench-deps:
  aeson: '>=0'
  async: '>=0'
  attoparsec: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  data-default: '>=0'
  hspec: '>=0'
  http-conduit: '>=0'
  http-types: '>=0'
  network-uri: '>=0'
  text: '>=0'
  wai: '>=0'
  warp: '>=0'
  webex-teams-api: '>=0'
