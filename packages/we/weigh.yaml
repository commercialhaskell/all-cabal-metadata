homepage: https://github.com/fpco/weigh#readme
changelog-type: text
hash: cfd5dd99d3e0a18ff3156050f7696e55b51b95832e88554a7a3161f15cb8e178
test-bench-deps:
  base: -any
  weigh: -any
  deepseq: -any
maintainer: chrisdone@fpcomplete.com
synopsis: Measure allocations of a Haskell functions/values
changelog: "0.0.16:\n\t* Add MaxOS parameter to indicate memory in use by RTS\n\t*
  Add haddock docmentation to the 'Column' type\n\t* Fix bug in treating words as
  int, use only Word as reported by GHC.\n\n0.0.14:\n\t* Use the correct data source
  for final live bytes total\n\n0.0.13:\n\t* Forward arguments to the child process\n\n0.0.12:\n\t*
  Fix bug in non-unique groupings\n\n0.0.10:\n\t* Export Grouped\n\n0.0.9:\n\t* Support
  markdown output\n\n0.0.8:\n\t* Support grouping\n\n0.0.6:\n\t* Support GHC 8.2\n\t*
  Use more reliable calculations\n\n0.0.4:\n        * Added more system-independent
  word size calculation\n\n0.0.3:\n\t* Added more docs to haddocks\n\t* Export more
  internal combinators\n\n0.0.2:\n\t* Remove magic numbers from weighing code, better
  accuracy\n\t* Add additional `io` combinator\n\n0.0.1:\n\t* Support GHC 8.\n\n0.0.0:\n\t*
  First release.\n"
basic-deps:
  ghc: '>=8.2.1'
  split: -any
  base: '>=4.7 && <5'
  process: -any
  mtl: <2.3
  temporary: -any
  deepseq: -any
all-versions:
- 0.0.0
- 0.0.1
- 0.0.2
- 0.0.3
- 0.0.4
- 0.0.5
- 0.0.6
- 0.0.7
- 0.0.8
- 0.0.9
- 0.0.10
- 0.0.11
- 0.0.12
- 0.0.13
- 0.0.14
- 0.0.16
author: Chris Done
latest: 0.0.16
description-type: markdown
description: |
  # weigh [![Build Status](https://travis-ci.org/fpco/weigh.svg)](https://travis-ci.org/fpco/weigh)

  Measures the memory usage of a Haskell value or function

  # Limitations

  *  :warning: Turn off the `-threaded` flag, otherwise it will cause inconsistent results.

  ## Example use

  ``` haskell
  import Weigh

  main :: IO ()
  main =
    mainWith
      (do func "integers count 0" count 0
          func "integers count 1" count 1
          func "integers count 10" count 10
          func "integers count 100" count 100)
    where
      count :: Integer -> ()
      count 0 = ()
      count a = count (a - 1)
  ```

  Output results:

  |Case|Allocated|GCs|
  |:---|---:|---:|
  |integers count 0|16|0|
  |integers count 1|88|0|
  |integers count 10|736|0|
  |integers count 100|7,216|0|

  Output by default is plain text table; pass `--markdown` to get a
  markdown output like the above.
license-name: BSD-3-Clause
