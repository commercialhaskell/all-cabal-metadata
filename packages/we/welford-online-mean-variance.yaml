all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.4
- 0.2.0.0
author: Manuel Schneckenreither
basic-deps:
  base: '>=4.7 && <5'
  cereal: '>=0'
  deepseq: '>=0'
  vector: '>=0'
changelog: |
  # Changelog for `welford`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: |
  # Welford: Online mean and variance computation


  Example

      example :: [Double] -> IO ()
      example vals = do
        let n = fromIntegral (length vals)
            mean = sum vals / n
            var = sum (map (\x -> (x - mean) ^ 2) vals) / (n - 1)
            (wMean, _, wVarSample) = finalize $ foldl' addValue WelfordExistingAggregateEmpty vals
        print (mean, var)
        print (wMean, wVarSample)


  `WelfordExistingAggregate` is used to save the state. Use the function `finalize` to retrieve the current estimates for the mean, variance and sample variance.
description-type: markdown
hash: 989467b58d2fddae56e000533a2a9b9934cd696a7319ff632a4d154d1757b578
homepage: https://github.com/schnecki/welford-online-mean-variance#readme
latest: 0.2.0.0
license-name: BSD-3-Clause
maintainer: manuel.schnecki@gmail.com
synopsis: Online computation of mean and variance using the Welford algorithm.
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  cereal: '>=0'
  deepseq: '>=0'
  tasty: '>=0'
  tasty-discover: '>=0'
  tasty-quickcheck: '>=0'
  vector: '>=0'
  welford-online-mean-variance: '>=0'
