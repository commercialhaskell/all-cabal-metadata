homepage: https://github.com/schnecki/welford-online-mean-variance#readme
changelog-type: markdown
hash: 9cbd827aea7ab062d49a7c777be529fe9dc6c4a5d9d689612a3e3cee67589c70
test-bench-deps:
  cereal: -any
  base: '>=4.7 && <5'
  tasty-discover: -any
  tasty-quickcheck: -any
  tasty: -any
  deepseq: -any
  QuickCheck: -any
  welford-online-mean-variance: -any
  vector: -any
maintainer: manuel.schnecki@gmail.com
synopsis: Online computation of mean and variance using the Welford algorithm.
changelog: |
  # Changelog for `welford`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 0.1.0.0 - YYYY-MM-DD
basic-deps:
  cereal: -any
  base: '>=4.7 && <5'
  deepseq: -any
  vector: -any
all-versions:
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.0.4
author: Manuel Schneckenreither
latest: 0.1.0.4
description-type: markdown
description: |
  # Welford: Online mean and variance computation


  Example

      example :: [Double] -> IO ()
      example vals = do
        let n = fromIntegral (length vals)
            mean = sum vals / n
            var = sum (map (\x -> (x - mean) ^ 2) vals) / (n - 1)
            (wMean, _, wVarSample) = finalize $ foldl' addValue WelfordExistingAggregateEmpty vals
        print (mean, var)
        print (wMean, wVarSample)


  `WelfordExistingAggregate` is used to save the state. Use the function `finalize` to retrieve the current estimates for the mean, variance and sample variance.
license-name: BSD-3-Clause
