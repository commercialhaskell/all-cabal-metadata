all-versions:
- 0.1.0
author: Diogo Castro
basic-deps:
  base: '>=4.7 && <5'
  mtl: '>=2.0 && <3.0'
  safe-exceptions: '>=0.1 && <1.0'
  stm: '>=2.0 && <3.0'
changelog: ''
changelog-type: ''
description: |
  # safe-buffer-monad

  A monadic buffer resilient to exceptions.

  The `SafeBufferMonad` typeclass models a buffer that you can write things to. If an exception is thrown,
  you'll still be able to proccess the contents of the buffer up to the point where the computation was interrupted.

  ```haskell
  class Monad m => SafeBufferMonad s m | m -> s where
    readBuffer   :: m s
    writeBuffer  :: s -> m ()
    clearBuffer  :: m s
    modifyBuffer :: (s -> s) -> m ()
  ```

  The buffer can be run using one of these 6 functions:

  * `runBuffer` / `runBufferConcurrently`
  * `tryRunBuffer` / `tryRunBufferConcurrently`
  * `execBuffer` / `execBufferConcurrently`

  ```haskell
  {-# LANGUAGE FlexibleContexts #-}

  import SafeBuffer
  import Data.List (intercalate)

  go :: (SafeBufferMonad [String] m, MonadIO m) => m String
  go = do
    writeBuffer ["line 1"]
    writeBuffer ["line 2"]
    liftIO $ putStrLn "brace for impact!"
    liftIO $ throwIO $ userError "boom"
    writeBuffer ["line 3"]
    pure "done!"

  main = runBuffer (appendFile "log.txt" . intercalate "\n") go
  ```

  ```plain
  λ> main
  brace for impact!
  *** Exception: user error (boom)

  λ> :! tail log.txt
  line 1
  line 2
  ```
description-type: markdown
hash: 4807ac725dc6547a6c64a994d7bc68f7d427627956b361e1298be1b283ed50fe
homepage: https://github.com/dcastro/safe-buffer-monad#readme
latest: 0.1.0
license-name: BSD-3-Clause
maintainer: dc@diogocastro.com
synopsis: A monadic buffer resilient to exceptions
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: '>=0'
  mtl: '>=2.0 && <3.0'
  safe-buffer-monad: '>=0'
  safe-exceptions: '>=0.1 && <1.0'
  stm: '>=2.0 && <3.0'
  unliftio: '>=0'
