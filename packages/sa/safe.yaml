homepage: https://github.com/ndmitchell/safe#readme
changelog-type: text
hash: 0910dafb8898f52bde4c646e560228a0fd08b1fca5457f222d2f5c0fad6d2039
test-bench-deps:
  base: -any
  deepseq: -any
  QuickCheck: -any
  safe: -any
maintainer: Neil Mitchell <ndmitchell@gmail.com>
synopsis: Library of safe (exception free) functions
changelog: |
  Changelog for Safe

  0.3.19, released 2020-05-24
      #30, undeprecate maximumDef and friends, fold*1Def
  0.3.18, released 2019-12-04
      #27, deprecate maximumDef and friends, fold*1Def
      #27, add maximumBounded and friends
      Stop supporting GHC 7.4 to 7.8
  0.3.17, released 2018-03-09
      Improve the display of errors, less internal callstack
      Add a few missing Partial constraints
  0.3.16, released 2018-01-06
      #22, add Safe index
  0.3.15, released 2017-06-18
      Support QuickCheck 2.10
  0.3.14, released 2017-02-15
      #20, fix for GHC 7.10.1
  0.3.13, released 2017-02-09
      #20, require GHC 7.4 or above
  0.3.12, released 2017-02-05
      #19, add Safe.Partial exposing a Partial typeclass
      #19, add support for GHC call stacks
  0.3.11, released 2017-01-22
      #16, add Safe succ and pred
      #16, add readEitherSafe for better errors than readEither
      #14, add Safe zip3Exact
  0.3.10, released 2016-11-08
      #15, add Safe cycle
  0.3.9, released 2015-05-09
      #9, add Safe toEnum
  0.3.8, released 2014-08-10
      #8, remove unnecessary Ord constraints from Foldable functions
  0.3.7, released 2014-07-16
      Add Def variants of the Exact functions
  0.3.6, released 2014-07-12
      #6, remove unnecessary Ord constraints from maximumBy/minimumBy
  0.3.5, released 2014-06-28
      Add Safe elemIndexJust/findIndexJust functions
      Add Safe scan functions
      Add Safe minimumBy/maximumBy functions
      Add a module of Exact functions
      Add Foldable minimum functions
      Clean up the Foldable module, deprecate the Safe variants
  0.3.4, released 2014-01-30
      #1, improve the string clipping in readNote
  0.3.3, released 2011-11-15
      #494, add foldl1' wrappings
  0.3.2, released 2011-11-13
      Add a Safe.Foldable module
  0.3.1, released 2011-11-09
      Add findJust, safe wrapping of fromJust/find
  0.3, released 2010-11-10
      Start of changelog
basic-deps:
  base: '>=4.8 && <5'
all-versions:
- '0.2'
- '0.3'
- 0.3.1
- 0.3.2
- 0.3.3
- 0.3.4
- 0.3.5
- 0.3.6
- 0.3.7
- 0.3.8
- 0.3.9
- 0.3.10
- 0.3.11
- 0.3.12
- 0.3.13
- 0.3.14
- 0.3.15
- 0.3.16
- 0.3.17
- 0.3.19
author: Neil Mitchell <ndmitchell@gmail.com>
latest: 0.3.19
description-type: markdown
description: |
  # Safe [![Hackage version](https://img.shields.io/hackage/v/safe.svg?label=Hackage)](https://hackage.haskell.org/package/safe) [![Stackage version](https://www.stackage.org/package/safe/badge/nightly?label=Stackage)](https://www.stackage.org/package/safe) [![Build status](https://img.shields.io/travis/ndmitchell/safe/master.svg?label=Build)](https://travis-ci.org/ndmitchell/safe)

  A library wrapping `Prelude`/`Data.List` functions that can throw exceptions, such as `head` and `!!`. Each unsafe function has up to four variants, e.g. with `tail`:

  * <tt>tail :: [a] -> [a]</tt>, raises an error on `tail []`.
  * <tt>tailMay :: [a] -> <i>Maybe</i> [a]</tt>, turns errors into `Nothing`.
  * <tt>tailDef :: <i>[a]</i> -> [a] -> [a]</tt>, takes a default to return on errors.
  * <tt>tailNote :: <i>String</i> -> [a] -> [a]</tt>, takes an extra argument which supplements the error message.
  * <tt>tailSafe :: [a] -> [a]</tt>, returns some sensible default if possible, `[]` in the case of `tail`.

  This package is divided into three modules:

  * `Safe` contains safe variants of `Prelude` and `Data.List` functions.
  * `Safe.Foldable` contains safe variants of `Foldable` functions.
  * `Safe.Exact` creates crashing versions of functions like `zip` (errors if the lists are not equal) and `take` (errors if there are not enough elements), then wraps them to provide safe variants.
license-name: BSD-3-Clause
