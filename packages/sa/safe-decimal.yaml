homepage: https://github.com/fpco/safe-decimal#readme
changelog-type: markdown
hash: cba4e9873698fa6ad6f59163f84d02063848ae05324e310679f108e7f0554c03
test-bench-deps:
  base: '>=4.7 && <5'
  hspec: -any
  doctest: '>=0.16'
  safe-decimal: -any
  deepseq: -any
  scientific: -any
  QuickCheck: -any
maintainer: alexey@kuleshevi.ch
synopsis: Safe and very efficient arithmetic operations on fixed decimal point numbers
changelog: |
  # Changelog for safe-decimal

  ## 0.2.1

  * Add `arithError`
  * Add `RoundHalfToZero` and `RoundHalfFromZero` rounding strategies.
  * Conversion from `Scientific` normalizes the input and is more resilient to unbounded
    computation for bounded `Decimal` result.

  ## 0.2.0

  * Add `Arith` monad and corresponding functions.
  * Make rounding dependent on precision type (extra type argument to the `Round` type class)
  * Rename `RoundFloor` to `RoundDown` (with `Floor` as synonym)
  * Rename `Truncate` to `RoundToZero` (with `Truncate` as synonym)
  * Fix conversion `fromRational` to throw `Underflow` instead of rounding. Without this fix
    there was unexpected behavior on negative numbers.
  * Addition of `scaleUp` and `scaleUpBounded`
  * Addition of `toFixedDecimal`, `fromFixedDecimal` and `fromFixedDecimalBounded`
  * Many function renames, just to make sure they all follow the same convention.
  * Fix `RoundHalfUp` algorithm
  * Addition of `RoundHalfDown` and `RoundHalfEven`

  ## 0.1.0

  Initial release
basic-deps:
  exceptions: -any
  base: '>=4.8 && <5'
  deepseq: -any
  scientific: -any
all-versions:
- 0.1.0.0
- 0.2.0.0
- 0.2.1.0
author: Alexey Kuleshevich
latest: 0.2.1.0
description-type: markdown
description: |
  # safe-decimal

  | Language | Travis |
  |:--------:|:------:|
  | ![GitHub top language](https://img.shields.io/github/languages/top/fpco/safe-decimal.svg) | [![Travis](https://img.shields.io/travis/fpco/safe-decimal/master.svg?label=Linux%20%26%20OS%20X)](https://travis-ci.org/fpco/safe-decimal) |

  |      Package       | Hackage | Nightly | LTS |
  |:-------------------|:-------:|:-------:|:---:|
  |  [`safe-decimal`](https://github.com/fpco/safe-decimal/tree/master/safe-decimal)|                                       [![Hackage](https://img.shields.io/hackage/v/safe-decimal.svg)](https://hackage.haskell.org/package/safe-decimal)|                                                                                                        [![Nightly](https://www.stackage.org/package/safe-decimal/badge/nightly)](https://www.stackage.org/nightly/package/safe-decimal)|                                                                                         [![Nightly](https://www.stackage.org/package/safe-decimal/badge/lts)](https://www.stackage.org/lts/package/safe-decimal)|


  An implementation of a decimal point data type, that is backed by any custom integral
  type. It is safe, because things like integer overflows, underflows, division by zero
  etc. are checked for during the runtime and are prevented in pure code.
license-name: BSD-3-Clause
