homepage: https://github.com/nikivazou/safe-coupling
changelog-type: markdown
hash: 9db7fe3d9f1de77188adf738fdbd712668491da42471494b71b3f1f98f4e913a
test-bench-deps:
  liquid-base: -any
  probability: '>=0.2.7 && <0.3'
  HUnit: '>=1.6.1 && <1.7'
  sort: '>=1.0.0 && <1.1'
  tasty-hunit: '>=0.10.0 && <1.11'
  tasty: '>=1.2.3 && <1.5'
  safe-coupling: -any
maintainer: Lisa Vasilenko <vasilliza@gmail.com>
synopsis: Relational proof system for probabilistic algorithms
changelog: ''
basic-deps:
  liquid-base: '>=4.14.0 && <4.16'
  probability: '>=0.2.7 && <0.3'
  liquid-containers: '>=0.6.2 && <0.7'
  liquidhaskell: '>=0.8.10 && <0.9'
  liquid-prelude: '>=0.8.10 && <0.9'
all-versions:
- 0.1.0.0
author: Lisa Vasilenko, Niki Vazou
latest: 0.1.0.0
description-type: markdown
description: "# safe-coupling\nLibrary for relational verification of probabilistic
  algorithms.\n\nSupports two proving methods:\n - Upper bound _Kantorovich distance_
  between two distributions\n - Establish a _boolean relation_ on samples from two
  distributions (this is stronger)\n\nIncludes two larger examples of verification:\n
  - Stability of stochastic gradient descent (src/SGD) using Kantorovich distance\n
  - Convergence of temporal difference learning (src/TD0) using boolean relations\n\n##
  A smaller example (src/Bins/Bins.hs)\n\nThis function recursively counts how many
  times the ball hit the bin after n attempted throws:\n\n    bins :: Double -> Nat
  -> PrM Nat\n    bins _ 0 = ppure 0\n    bins p n = liftA2 (+) (bernoulli p) (bins
  p (n - 1)) \n\nThrows succeed with probability _p_ which is simulated by `bernoulli
  p`. The function returns a distribution over natural numbers. When comparing results
  of two throwers with respective chances of success _p_ and _q > p_, we expect the
  second thrower to score notably better with the increase of _n_. Formally, we can
  show that Kantorovich distance between `bins p n` and `bins q n` is upper bounded
  by _(q - p)·n_.\n\n## Proof (src/Bins/Theorem.hs)\n\nThe proof uses four definitions
  from the library:\n * In the first case, no throws were made. Axiom `pureDist` allows
  deriving Kantorovich distance between pure expressions. In our case, _0_ and _0_.\n
  * In the second case, axiom `liftA2Dist` derives Kantorovich distance between the
  inductive cases. Numeric arguments specify the expected bound in format _a·x + b·y
  + c_ where _x_ and _y_ are bounds for the second and third arguments of `liftA2`
  respectively. As the last argument, the axiom requires proof of linearity of plus.
  It is empty since it can be automatically constructed by an SMT-solver.\n * Axiom
  `bernoulliDist` upper bounds the distance between calls to `bernoulli` with _q -
  p_ — this is our _x_. The second upper bound _y_ is provided by a recursive call
  to our theorem. \n * A function `distInt` is used to measure the distance between
  arguments of `liftA2`. In this case, all of them provide integer values. A pre-defined
  distance between _n_ and _m_ is _|n - m|_ but this allows customization.\n\n```\n{-@
  binsDist :: p:Prob -> {q:Prob|p <= q} -> n:Nat \n             -> {dist (kant distInt)
  (bins p n) (bins q n) <= n * (q - p)} / [n] @-}\nbinsDist :: Prob -> Prob -> Nat
  -> ()\nbinsDist p q 0 = pureDist distInt 0 0 \nbinsDist p q n\n= liftA2Dist d d
  d 1 (q - p) 1 ((n - 1) * (q - p)) 0\n    (+) (bernoulli p) (bins p (n - 1)) \n    (+)
  (bernoulli q) (bins q (n - 1))\n    (bernoulliDist d p q)\n    (binsDist p q (n
  - 1))\n    (\\_ _ _ _ -> ())\nwhere \n    d = distInt\n```\n\nThis concludes the
  mechanized proof of the boundary _(q-p)·n_.\n\n## Installation\n1. Install stack
  https://docs.haskellstack.org/en/stable/install_and_upgrade/\n\n2. Compile the library
  and case studies\n\n        $ cd safe-coupling\n        $ stack install --fast\n
  \       ...\n        Registering library for safe-coupling-0.1.0.0..\n\n\n3. Run
  unit tests on executable case studies\n\n        $ stack test\n        ...                          \n
  \       test/Spec.hs\n        Spec\n            Bins\n            mockbins 1 it:
  \    OK\n            mockbins 2 it:     OK\n            bins 1 it:         OK\n
  \           bins 2 it:         OK (0.02s)\n            exp dist mockbins: OK (0.12s)\n
  \           SGD\n            sgd:               OK\n            TD0\n            td0
  base:          OK\n            td0 simple:        OK\n\n        All 8 tests passed
  (0.12s)\n\n        safe-coupling> Test suite safe-coupling-test passed\n        Completed
  2 action(s).\n\n\nIn case of errors try\n\n    $ stack clean\n\n"
license-name: BSD-3-Clause
