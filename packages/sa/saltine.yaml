all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
- 0.0.0.6
- 0.0.1.0
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.1.1
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
- 0.2.2.0
author: Joseph Abrahamson
basic-deps:
  base: '>=4.5 && <5'
  bytestring: '>=0.10.8 && <0.13'
  deepseq: '>=1.4 && <1.6'
  hashable: '>=0'
  profunctors: '>=5.3 && <5.7'
  text: ^>=1.2 || >=2.0 && <2.2
changelog: |
  # Changelog
  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)

  ## [Unreleased]
  ### Added
  ### Changed

  ## [0.2.2.0] - 2025-02-22
  ### Added
  - SHA256 support, thanks [@jmazon](https://github.com/jmazon)
  - Ed25519 to Curve25519 conversion support, thanks [@jmazon](https://github.com/jmazon)
  ### Changed
  - Version bounds relaxed

  ## [0.2.1.0] - 2023-02-17
  ### Changed
  - Fix Show instances formatting, and add instances for Keypairs, thanks [@NicolasT](https://github.com/NicolasT)

  ## [0.2.0.1] - 2022-04-30
  ### Changed
  - Relax version bounds on text and bytestring, thanks [@ysangkok](https://github.com/ysangkok)

  ## [0.2.0.0] - 2021-05-27
  ### Added
  - All AEAD variants are now in saltine
  - Key comparisons now use sodium_memcmp to prevent timing attacks
  - Liberal use of Internal modules
  - Benchmarks added
  - Export Key/Nonce/… constructors from Internal module
  - New password hashing module
  - Show instances for most (all?) relevant data types
  - Signature types for detached functions

  ### Changed
  - newtype accessor functions added, keypairs are separate data types now instead
  of tuples

  ## [0.1.1.1] - 2021-01-15
  ### Changed
  - Fix for running tests in `cabal repl` (thanks [@timds])
  - Allow newer profunctors

  ## [0.1.1.0] - 2020-02-29
  ### Added
  - bindings to generichash (Blake2), thanks [@donatello](https://github.com/donatello)

  ### Changed
  - Don't use `fail` in tests to fix compilation with GHC 8.8
  - Windows install instructions added, thanks [@tmcl](https://github.com/tmcl)
changelog-type: markdown
description: |
  # Saltine 0.2.2.0 [![Hackage version](https://img.shields.io/hackage/v/saltine.svg?colorB=4FB900)](https://hackage.haskell.org/package/saltine)

  A Haskell binding for @jedisct1's portable binding for djb's
  NaCl. **This is an early release.** Please try it out, but don't just
  yet stake your life or job on it.

  It is imperative you call `sodiumInit` before using any other function.

  ``` haskell
  import           Crypto.Saltine
  import           Crypto.Saltine.Core.SecretBox
  import qualified Data.ByteString.Char8 as BSC8

  main = do
    sodiumInit
    k <- newKey
    n <- newNonce
    let ciphertext = secretbox k n (BSC8.pack "foobar")
    print $ secretboxOpen k n ciphertext

  -- Just "foobar"
  ```

  In
  [*The Security Impact of a New Cryptographic Library*](http://cryptojedi.org/papers/coolnacl-20111201.pdf)
  Bernstein, Lange, and Schwabe argue that high-level cryptographic
  libraries eliminate whole spaces of cryptographic disasters which are
  nigh inevitable whenever programmers use low-level crypto primitives.

  * [Security Stack Exchange: Why Shouldn't We Roll Our Own?](http://security.stackexchange.com/questions/18197/why-shouldnt-we-roll-our-own)
  * [Hacker News on "All the Crypto Code You've Ever Written is Probably Broken"](https://news.ycombinator.com/item?id=4779015)
  * [Stack Overflow: When can you trust yourself to implement cryptography based solutions?](http://stackoverflow.com/questions/1914257/when-can-you-trust-yourself-to-implement-cryptography-based-solutions)
  * [Coding Horror: Why isn't my encryption... encrypting?](http://www.codinghorror.com/blog/2009/05/why-isnt-my-encryption-encrypting.html)

  Crypto is complicated, so pre-rolled solutions are important
  prevention mechanisms.

  [NaCl](http://nacl.cr.yp.to/) is Bernstein, Lange, and Schwabe's
  solution: a high-level, performant cryptography library with a no-fuss
  interface. [Saltine](http://github.com/tel/saltine) is a Haskell
  binding to NaCl (via
  [`libsodium`](https://github.com/jedisct1/libsodium)) which hopes to
  provide even more simplicity and safety to the usage of cryptography.

  Note that it's still possible to shoot yourself in the foot pretty
  easily using Saltine. Nonces must always be unique which must be managed
  by the library user.
  [`Crypto.Saltine.Core.Stream`](https://github.com/tel/saltine/blob/master/src/Crypto/Saltine/Core/Stream.hs)
  produces messages which can beundetectably tampered with in-flight.
  Keys are insecurely read from disk—they may be copied and then paged
  back to disk.

  When uncertain, use [`Crypto.Saltine.Core.SecretBox`](https://github.com/tel/saltine/blob/master/src/Crypto/Saltine/Core/SecretBox.hs)
  and [`Crypto.Saltine.Core.Box`](https://github.com/tel/saltine/blob/master/src/Crypto/Saltine/Core/Box.hs).
  If you can think of ways to use Haskell's type system to enforce
  security invariants, please suggest them.

  To use it on Windows systems, download
  [a prebuild libsodium-\*-stable-mingw.tar.gz file](https://download.libsodium.org/libsodium/releases/)
  and copy the files in `libsodium-win64`  into the equivalent places
  in `C:\Program Files\Haskell Platform\*\mingw`. Then just add saltine
  to your cabal file and watch it go.

  Tested with [`libsodium-1.0.18`](https://download.libsodium.org/libsodium/releases/).

  Inspired by @thoughtpolice's
  [`salt`](http://github.com/thoughtpolice/salt) library. `salt` also
  binds to NaCl, but uses a Haskell managed version of djb's code
  instead of `libsodium`.
description-type: markdown
hash: b6335f2c40aa7c15a87e43ca52487413baf042391e08dd3b6923c1bd0619ea16
homepage: ''
latest: 0.2.2.0
license-name: MIT
maintainer: Max Amanshauser <max@lambdalifting.org>
synopsis: Cryptography that's easy to digest (NaCl/libsodium bindings).
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4.7 && <5'
  bytestring: '>=0'
  criterion: '>=0'
  deepseq: '>=0'
  saltine: '>=0'
  semigroups: '>=0'
  test-framework: '>=0'
  test-framework-quickcheck2: '>=0'
  text: '>=0'
