homepage: ''
changelog-type: markdown
hash: 8d06951dc677f45e25bc1f96b559ee7860e7c355c892bce4db2fbc46f2f7d84d
test-bench-deps:
  bytestring: -any
  test-framework: -any
  base: '>=4.7 && <5'
  text: -any
  saltine: -any
  test-framework-quickcheck2: -any
  criterion: -any
  semigroups: -any
  deepseq: -any
  QuickCheck: -any
maintainer: Max Amanshauser <max@lambdalifting.org>
synopsis: Cryptography that's easy to digest (NaCl/libsodium bindings).
changelog: |
  # Changelog
  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)

  ## [Unreleased]
  ### Added
  ### Changed

  ## [0.2.1.0] - 2023-02-17
  ### Changed
  - Fix Show instances formatting, and add instances for Keypairs, thanks [@NicolasT](https://github.com/NicolasT)

  ## [0.2.0.1] - 2022-04-30
  ### Changed
  - Relax version bounds on text and bytestring, thanks [@ysangkok](https://github.com/ysangkok)

  ## [0.2.0.0] - 2021-05-27
  ### Added
  - All AEAD variants are now in saltine
  - Key comparisons now use sodium_memcmp to prevent timing attacks
  - Liberal use of Internal modules
  - Benchmarks added
  - Export Key/Nonce/… constructors from Internal module
  - New password hashing module
  - Show instances for most (all?) relevant data types
  - Signature types for detached functions

  ### Changed
  - newtype accessor functions added, keypairs are separate data types now instead
  of tuples

  ## [0.1.1.1] - 2021-01-15
  ### Changed
  - Fix for running tests in `cabal repl` (thanks [@timds])
  - Allow newer profunctors

  ## [0.1.1.0] - 2020-02-29
  ### Added
  - bindings to generichash (Blake2), thanks [@donatello](https://github.com/donatello)

  ### Changed
  - Don't use `fail` in tests to fix compilation with GHC 8.8
  - Windows install instructions added, thanks [@tmcl](https://github.com/tmcl)
basic-deps:
  bytestring: '>=0.10.8 && <0.12'
  base: '>=4.5 && <5'
  text: ^>=1.2 || ^>=2.0
  hashable: -any
  deepseq: ^>=1.4
  profunctors: '>=5.3 && <5.7'
all-versions:
- 0.0.0.1
- 0.0.0.2
- 0.0.0.3
- 0.0.0.4
- 0.0.0.5
- 0.0.0.6
- 0.0.1.0
- 0.1.0.0
- 0.1.0.1
- 0.1.0.2
- 0.1.1.0
- 0.1.1.1
- 0.2.0.0
- 0.2.0.1
- 0.2.1.0
author: Joseph Abrahamson
latest: 0.2.1.0
description-type: markdown
description: "# Saltine 0.2.1.0 [![Hackage version](https://img.shields.io/hackage/v/saltine.svg?colorB=4FB900)](https://hackage.haskell.org/package/saltine)\n\nA
  Haskell binding for @jedisct1's portable binding for djb's\nNaCl. **This is an early
  release.** Please try it out, but don't just\nyet stake your life or job on it.\n\nIt
  is imperative you call `sodiumInit` before using any other function.\n\n``` haskell\nimport
  \          Crypto.Saltine\nimport           Crypto.Saltine.Core.SecretBox\nimport
  qualified Data.ByteString.Char8 as BSC8\n\nmain = do\n  sodiumInit\n  k <- newKey\n
  \ n <- newNonce\n  let ciphertext = secretbox k n (BSC8.pack \"foobar\")\n  print
  $ secretboxOpen k n ciphertext\n\n-- Just \"foobar\"\n```\n\nIn\n[*The Security
  Impact of a New Cryptographic Library*](http://cryptojedi.org/papers/coolnacl-20111201.pdf)\nBernstein,
  Lange, and Schwabe argue that high-level cryptographic\nlibraries eliminate whole
  spaces of cryptographic disasters which are\nnigh inevitable whenever programmers
  use low-level crypto primitives.\n\n* [Security Stack Exchange: Why Shouldn't We
  Roll Our Own?](http://security.stackexchange.com/questions/18197/why-shouldnt-we-roll-our-own)\n*
  [Hacker News on \"All the Crypto Code You've Ever Written is Probably Broken\"](https://news.ycombinator.com/item?id=4779015)\n*
  [Stack Overflow: When can you trust yourself to implement cryptography based solutions?](http://stackoverflow.com/questions/1914257/when-can-you-trust-yourself-to-implement-cryptography-based-solutions)\n*
  [Coding Horror: Why isn't my encryption... encrypting?](http://www.codinghorror.com/blog/2009/05/why-isnt-my-encryption-encrypting.html)\n\nCrypto
  is complicated, so pre-rolled solutions are important\nprevention mechanisms.\n\n[NaCl](http://nacl.cr.yp.to/)
  is Bernstein, Lange, and Schwabe's\nsolution: a high-level, performant cryptography
  library with a no-fuss\ninterface. [Saltine](http://github.com/tel/saltine) is a
  Haskell\nbinding to NaCl (via\n[`libsodium`](https://github.com/jedisct1/libsodium))
  which hopes to\nprovide even more simplicity and safety to the usage of cryptography.\n\nNote
  that it's still possible to shoot yourself in the foot pretty\neasily using Saltine.
  Nonces must always be unique which must be managed \nby the library user.\n[`Crypto.Saltine.Core.Stream`](https://github.com/tel/saltine/blob/master/src/Crypto/Saltine/Core/Stream.hs)\nproduces
  messages which can beundetectably tampered with in-flight. \nKeys are insecurely
  read from disk—they may be copied and then paged \nback to disk.\n\nWhen uncertain,
  use [`Crypto.Saltine.Core.SecretBox`](https://github.com/tel/saltine/blob/master/src/Crypto/Saltine/Core/SecretBox.hs)
  \nand [`Crypto.Saltine.Core.Box`](https://github.com/tel/saltine/blob/master/src/Crypto/Saltine/Core/Box.hs).\nIf
  you can think of ways to use Haskell's type system to enforce \nsecurity invariants,
  please suggest them.\n\nTo use it on Windows systems, download \n[a prebuild libsodium-\\*-stable-mingw.tar.gz
  file](https://download.libsodium.org/libsodium/releases/) \nand copy the files in
  `libsodium-win64`  into the equivalent places \nin `C:\\Program Files\\Haskell Platform\\*\\mingw`.
  Then just add saltine \nto your cabal file and watch it go.\n\nTested with [`libsodium-1.0.18`](https://download.libsodium.org/libsodium/releases/).\n\nInspired
  by @thoughtpolice's\n[`salt`](http://github.com/thoughtpolice/salt) library. `salt`
  also\nbinds to NaCl, but uses a Haskell managed version of djb's code\ninstead of
  `libsodium`.\n"
license-name: MIT
