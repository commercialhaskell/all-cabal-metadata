all-versions:
- 0.1.1.0
author: Shae Erisson
basic-deps:
  aeson: '>=1.4.7.1 && <2.2'
  atomic-write: '>=0.2.0 && <0.3'
  base: '>=4.14 && <4.20'
  bytestring: '>=0.11 && <0.12'
  criterion-measurement: '>=0.2 && <0.3'
  directory: '>=1.3 && <1.5'
  process: '>=1.6 && <1.7'
  sandwatch: '>=0'
  text: '>=2.0 && <2.1'
  time: '>=1.12 && <1.13'
changelog: |
  # Revision history for sandwatch

  ## 0.1.0.0 -- YYYY-mm-dd

  * First version. Released on an unsuspecting world.
changelog-type: markdown
description: |
  # sandwatch
  Remember how long commands take, tell me if I have enough time to make a sandwich?

  This is inspired by [arbtt](https://arbtt.nomeata.de/#what), the shell built-in time, and the rust utility [tally](https://crates.io/crates/tally).

  The name was suggested by [qu1j0t3](https://github.com/qu1j0t3/).

  # Why?

  Rather than telling me how long something has taken, I would like to know roughly how long this task will take, based on historical records.

  Sandwatch records the current directory, the command line, and the runtime for a command.

  When running a new command that matches the directory and the first two words of the command line, sandwatch reports expected completion time in sandwich units (five minutes?).

  # How to use it?

  It's a wrapper command. `sandwatch cabal build` or `sandwatch make` or whatever you like. Perhaps one day this will become a shell builtin written in Rust.

  # How to install it?

  I suggest using [ghcup](https://www.haskell.org/ghcup/) to install the Haskell compiler and then `cabal build` in your clone of this git repo.

  # How does it work?

  Sandwatch creates a json file holding entries recording the working directory, the command line, and the execution time.

  When a command matches in the same directory, execution from previous runs is average together to give you a rough idea as to whether you have time to make a sandwich or not!

  # Tell me the root problem?

  I don't have insight into the progress of a running program. I wish all programs would dump some number of percent complete events. I could use that to estimate completion time from start time.

  # Ideas

  * Is there a good way to turn command line arguments into a set? For example, `ls -o -a` is the same as `ls -a -o` but the strings are different. How could they be the same?
  * Is there some good way to automatically figure out how much of a command line to compare for equality?
  * How could I compare command lines for equality across directories? While `make` does different things in different directories, `apt install` is always the same. How do you decide?
description-type: markdown
hash: e8dd633dd4e8489128010b7e14afe69e4cb34f25321cb27e924dddc089a00750
homepage: ''
latest: 0.1.1.0
license-name: BSD-3-Clause
maintainer: shae@scannedinavian.com
synopsis: record historical command runtimes for later prediction
test-bench-deps:
  aeson: '>=1.4.7.1 && <2.2'
  atomic-write: '>=0.2.0 && <0.3'
  base: '>=4.14 && <4.20'
  bytestring: '>=0.11 && <0.12'
  criterion-measurement: '>=0.2 && <0.3'
  directory: '>=1.3 && <1.5'
  process: '>=1.6 && <1.7'
  text: '>=2.0 && <2.1'
  time: '>=1.12 && <1.13'
