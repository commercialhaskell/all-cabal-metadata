all-versions:
- 0.0.1.0
- 0.0.2.0
- 0.0.3.0
- 0.0.4.0
- 0.0.5.0
- 0.0.6.0
author: Luis Pedro Coelho
basic-deps:
  base: '>4.8 && <5'
  bytestring: '>=0'
  conduit: '>=1.0'
  conduit-combinators: '>=0'
  directory: '>=0'
  exceptions: '>=0'
  filepath: '>=0'
  resourcet: '>=0'
  unix: '>=0'
changelog: "Version 0.0.6.0 2023-06-27 by luispedro\n\t* Add compatibility code for
  unix-2.8 (which changed the signature of\n\topenFd)\n\nVersion 0.0.5.0 2018-01-18
  by luispedro\n\t* Deprecate safeSinkFile\n\t* Add fake Windows support\n\nVersion
  0.0.4.0 2017-09-07 by luispedro\n\t* Add atomicConduitUseFile\n\nVersion 0.0.3.0
  2017-07-29 by luispedro\n\t* Fix issue with creating files in separate directories\n\nVersion
  0.0.2.0 2017-05-30 by luispedro\n\t* Add conduit version\n\nVersion 0.0.1.0 2017-05-29
  by luispedro\n\t* First version\n"
changelog-type: text
description: "# SafeIO: Haskell library for safe (atomic) IO\n\n[![Hackage](https://img.shields.io/hackage/v/safeio.svg)](https://hackage.haskell.org/package/safeio)\n[![Hackage-Deps](https://img.shields.io/hackage-deps/v/safeio.svg)](http://packdeps.haskellers.com/feed?needle=safeio)\n[![Stackage
  (LTS)](http://stackage.org/package/safeio/badge/lts)](http://stackage.org/lts/package/safeio)\n[![Travis](https://api.travis-ci.com/luispedro/safeio.png)](https://travis-ci.com/luispedro/safeio)\nAtomic
  IO\n\nThis is a simple module, which enables writing in atomic mode. It\nimplements
  the following 4 step procedure:\n\n1. Open a temporary file in the same directory
  as the final output.\n2. Write to this temporary file.\n3. Close and sync the file.\n4.
  Atomically rename the file to its final destination.\n\n\n## Example\n\nDirect use:\n\n
  \   import System.IO.SafeWrite\n    ...\n    main = do\n        withOutputFile \"output.txt\"
  $ \\hout -> do\n            hPutStrLn hout \"Hello World\"\n\nThrough [conduit](https://www.stackage.org/package/conduit):\n\n
  \   import qualified Data.Conduit as C\n    import           Data.Conduit ((.|))\n
  \   import           Data.Conduit.SafeWrite\n    \n    main = C.runConduitRes $\n
  \       C.yield \"Hello World\" .| safeSinkFile \"hello.txt\"\n\nIn any case, only
  successful termination of the process will result in the\noutput file being written.
  Early termination by throwing an exception will\ncause the temporary file to be
  removed and no output will be produced.\n\n## Author\n\nLuis Pedro Coelho | [Email](mailto:luis@luispedro.org)
  | [Twitter](https://twitter.com/luispedrocoelho)\n"
description-type: markdown
hash: f7137847277aae567219bcc5e14d5c77d703d08641412932e98a85dd56c0c80c
homepage: https://github.com/luispedro/safeio#readme
latest: 0.0.6.0
license-name: MIT
maintainer: Luis Pedro Coelho
synopsis: Write output to disk atomically
test-bench-deps:
  HUnit: '>=0'
  base: '>4.8 && <5'
  bytestring: '>=0'
  conduit: '>=1.0'
  conduit-combinators: '>=0'
  directory: '>=0'
  exceptions: '>=0'
  filepath: '>=0'
  resourcet: '>=0'
  tasty: '>=0'
  tasty-hunit: '>=0'
  tasty-th: '>=0'
  unix: '>=0'
