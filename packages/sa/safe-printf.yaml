all-versions:
- 0.1.0.0
author: Hiromi ISHII
basic-deps:
  base: '>=4 && <5'
  haskell-src-meta: '>=0.6 && <0.7'
  template-haskell: '>=2.9 && <2.11'
  th-lift: '>=0.6 && <0.8'
changelog: ''
changelog-type: ''
description: "safe-printf -- Well-typed, variadic and flexible printf functions for
  Haskell\n=============================================================================\n\n[![Build
  Status](https://travis-ci.org/konn/safe-printf.svg?branch=master)](https://travis-ci.org/konn/safe-printf)
  \n[![loop-effin](http://img.shields.io/hackage/v/safe-printf.svg)](http://hackage.haskell.org/package/safe-printf)\n\n##
  What is this?\nHaskell's standard `Text.Printf` module provides variadic `printf`
  function but not type-safe.\nThis library provides an alternative for this, more
  type-safe version of `printf` function,\ncombinators and quasiquoters.\n\nThe current
  implementation is just a proof-of-concept, so it is not so efficient and provides\nAPIs
  only for `String` value generation. In future, we will support `Text`\ntypes and
  improve the effiiciency.\n\n## Install\n```sh\n$ git clone https://github.com/konn/safe-printf.git\n$
  cd safe-printf\n$ cabal install\n```\n\n<!--\n```sh\n$ cabal install safe-printf\n```\n-->\n\n##
  Usage\nWe provide two interfaces to construct format: smart constructors and quasiquoters.\n\n###
  Smart constructors\nYou need `OverloadedStrings` extension.\n\n```haskell\n{-# LANGUAGE
  OverloadedStrings #-}\nmodule Main where\nimport Text.Printf.Safe             (printf,
  (%), (><))\nimport Text.Printf.Safe.Combinators (b', d, _S)\nmain = do\n  putStrLn
  $ printf (\"1 + 2 = \" %d >< \" and 0 == 1 is \" %_S >< \".\" ) (1 + 2) (0 == 1)\n
  \ putStrLn $ printf (\"42 is \" % b' '0' 10 >< \"in binary.\") 42\n  putStrLn $
  printf (\"48% of people answers that the negation of True is\" %(show . not) ><
  \".\") True\n```\n\n### Quasiquote interface\nQuiasiquote interface provides more
  readable way for generating formats.\n\n```haskell\n{-# LANGUAGE QuasiQuotes #-}\nmodule
  Main where\nimport Text.Printf.Safe    (printf, fmt)\nmain = do\n  putStrLn $ printf
  [fmt|1 + 2 = %d and 0 == 1 is %S.|] (1 + 2) (0 == 1)\n  putStrLn $ printf [fmt|42
  is %010b in binary.|] 42\n  putStrLn $ printf [fmt|48%% of people answers that the
  negation of True is %{show . not}.|] True\n```\n\n## TODO\n* Support `Text` and
  perhaps `Builder`.\n* Improve efficiency.\n* Provide IO functions?\n\n## Licence\n\nBSD3\n\n##
  Copyright\n\n(c) Hiromi ISHII 2015\n"
description-type: markdown
hash: 6f3ce21afc8d7ff80b35f5d938d3907a2c93b10d40f4c93a5596ebdd717b7800
homepage: https://github.com/konn/safe-printf
latest: 0.1.0.0
license-name: BSD-3-Clause
maintainer: konn.jinro_at_gmail.com
synopsis: Well-typed, flexible and variadic printf for Haskell
test-bench-deps:
  QuickCheck: '>=0'
  base: '>=4 && <5'
  doctest: '>=0'
  haskell-src-meta: '>=0.6 && <0.7'
  hspec: '>=0'
  template-haskell: '>=2.9 && <2.11'
  th-lift: '>=0.6 && <0.8'
