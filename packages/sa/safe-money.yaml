homepage: https://github.com/k0001/safe-money
changelog-type: markdown
hash: 400e601b60ee8e6e2ff79cc942124540686e8e97dd50af930b7f675d27a3b132
test-bench-deps:
  safe-money: -any
  bytestring: -any
  base: -any
  text: -any
  vector-space: -any
  constraints: -any
  binary: -any
  tasty-quickcheck: -any
  hashable: -any
  tasty-hunit: -any
  tasty: -any
  deepseq: -any
maintainer: renλren!zone
synopsis: |-
  Type-safe and lossless encoding and manipulation of money, fiat
  currencies, crypto currencies and precious metals.
changelog: "# Version 0.9.1\n\n* Add approximation method `HalfAwayFromZero`, also
  known as “kaufmännisches Runden”\n  in German speaking countries. See issue #55.\n
  \ \n* Fix compilation with GHC 9. See issue #59.\n\n* Added `exchangeRate'`. See
  issue #61.\n\n# Version 0.9\n\n* _BREAKING CHANGE, POSSIBLY REQUIRING HUMAN INTERVENTION_.
  Changed\n  `UnitScale \"BSD\" \"cent\"` from `(1, 1)` to `(100, 1)`, changed\n  `UnitScale
  \"HTG\" \"centime\"` from `(1, 1)` to `(100, 1)`, changed\n  `UnitScale \"MDL\"
  \"leu\"` from `(100, 1)` to `(1, 1)`, and changed\n  `UnitScale \"SBD\" \"dollar\"`
  from `(100, 1)` to `(1, 1)`.  The scales in\n  question were wrong before. If you
  relied on these specific scales,\n  for example, for serializing and storing amounts
  in a database, you\n  will need to rescale your amounts.\n\n# Version 0.8.1\n\n*
  Fix decimal rendering of some small cent values (e.g., `0.02`). See issue #45.\n\n*
  Fixed `xxxToDecimal` docs. See issue #45.\n\n* Add `someXxxToDecimal`. See issue
  #44.\n\n\n# Version 0.8\n\n* _COMPILER ASSISTED BREAKING CHANGE_. Introduced `DecimalConf`,
  which all\n  of the `xxxToDecimal` and `xxxFromDecimal` are now using. This concentrates\n
  \ all decimal rendering and parsing settings in a single place, and more\n  importantly,
  it makes all of the `xxxToDecimal` return a `Text` value\n  directly, rather than
  a `Maybe Text`. In turn, `Separators` has been\n  introduced for configuring decimal
  and thousands separators. See issue #30.\n\n* _COMPILER ASSISTED BREAKING CHANGE_.
  The `Scale` type family was renamed to\n  `UnitScale`.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. Previous instances of the `Scale` type\n  family where the `currency` and
  the `unit` were the same (e.g., `Scale \"USD\"\n  \"USD\"`), intended to convey
  a canonical scale for the currency, are now\n  written as `CurrencyScale currency`
  (e.g., `CurrencyScale \"USD\"`).\n\n* _COMPILER ASSISTED BREAKING CHANGE_. A new
  datatype called `Scale` has been\n  introduced. This datatype replaces term-level
  uses of `Rational` to convey the\n  scale of a discrete monetary amount. The rationale
  for this, beyond improved\n  type errors, is that checking for the scale's validity
  can be done at a single\n  place (namely, the new `scaleFromRational`), rather than
  everywhere a\n  term-level scale was expected as input. See issue #43.\n\n* Added
  new approximation method `HalfEven`, also known as “Bankers rounding”.\n  See issue
  #42.\n\n* New currencies: VES (see issue #33), UYW.\n\n\n# Version 0.7.1\n\n* Fixed
  compilation with GHC 8.6.\n\n* Fixed an issue when rendering decimal values smaller
  than the smallest\n  possible fractional part. See issue #39.\n\n\n# Version 0.7\n\n*
  _IMPORTANT_. All of the changes in this release are fully backwards\n  compatible.
  What happens in this release is that many instances\n  previously exported by `safe-money`
  now live in different libraries so\n  that downstream packages can avoid using Cabal
  flags to specify\n  dependencies.\n\n* _COMPILER ASSISTED BREAKING CHANGE_. `FromJSON`
  and `ToJSON` (from\n  `aeson`) instances are not exported from the `safe-money`
  library\n  anymore. Instead, you are now expected to depend on the vetted\n  `safe-money-aeson`
  library and import `Money.Aeson` to get the\n  relevant instances. These instances
  are exactly the same ones\n  previously exported by `safe-money`. As a consequence
  of this change,\n  the `aeson` Cabal flag in `safe-money` and the optional dependency
  on\n  `aeson` were removed, which simplifies downstream packaging.\n\n* _COMPILER
  ASSISTED BREAKING CHANGE_. `Store` (from `store`) instances\n  are not exported
  from the `safe-money` library anymore. Instead, you\n  are now expected to depend
  on the vetted `safe-money-store` library\n  and import `Money.Store` to get the
  relevant instances. These\n  instances are exactly the same ones previously exported
  by\n  `safe-money`. As a consequence of this change, the `store` Cabal flag\n  in
  `safe-money` and the optional dependency on `serialise` were\n  removed, which simplifies
  downstream packaging.\n\n* _COMPILER ASSISTED BREAKING CHANGE_. `Serialise` (from
  `serialise`)\n  instances are not exported from the `safe-money` library anymore.\n
  \ Instead, you are now expected to depend on the vetted\n  `safe-money-serialise`
  library and import `Money.Serialise` to get the\n  relevant instances. These instances
  are exactly the same ones\n  previously exported by `safe-money`. As a consequence
  of this change,\n  the `serialise` Cabal flag in `safe-money` and the optional dependency\n
  \ on `serialise` were removed, which simplifies downstream packaging.\n\n* _COMPILER
  ASSISTED BREAKING CHANGE_. `Serialize` (from `cereal`)\n  instances are not exported
  from the `safe-money` library anymore.\n  Instead, you are now expected to depend
  on the vetted\n  `safe-money-cereal` library and import `Money.Serialize` to get
  the\n  relevant instances. These instances are exactly the same ones\n  previously
  exported by `safe-money`. As a consequence of this change,\n  the `cereal` Cabal
  flag in `safe-money` and the optional dependency on\n  `cereal` were removed, which
  simplifies downstream packaging.\n\n* _COMPILER ASSISTED BREAKING CHANGE_. `FromXml`
  and `ToXml` (from\n  `xmlbf`) instances are not exported from the `safe-money` library\n
  \ anymore. Instead, you are now expected to depend on the vetted\n  `safe-money-xmlbf`
  library and import `Money.Aeson` to get the\n  relevant instances. These instances
  are exactly the same ones\n  previously exported by `safe-money`. As a consequence
  of this change,\n  the `xmlbf` Cabal flag in `safe-money` and the optional dependency
  on\n  `xmlbf` were removed, which simplifies downstream packaging.\n\n* _COMPILER
  ASSISTED BREAKING CHANGE_. `hashable` and `vector-space` are\n  now mandatory dependencies
  of `safe-money`. `Hashable`, `VectorSpace`\n  and `AdditiveGroup` instances for
  the various `safe-money` datatypes\n  are now exported from `Money`. The `hashable`
  and `vector-space` Cabal\n  flags are now gone.\n\n* `Arbitrary` instances (from
  the `QuickCheck` packages) for the various\n  `safe-money` datatypes are now exported
  from `Money`. `QuickCheck` is\n  now a mandatory dependency of `safe-money`.\n\n\n#
  Version 0.6\n\n* _COMPILER ASSISTED BREAKING CHANGE_. `denseToDecimal` now takes
  a positive\n  `Rational` rather than a `Proxy scale`.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. `denseFromDecimal` and\n  `discreteFromDecimal` now take a positive `Rational`
  scale, like their\n  `xxxToDecimal` counterparts.\n\n* _COMPILE ASSISTED BREAKING
  CHANGE_. `binary`, `deepseq` and `text` are now\n  mandatory dependencies since
  they are included with the standard GHC\n  distribution. Thus, the tags for disabling
  them have been removed.\n\n* _COMPILE ASSISTED BREAKING CHANGE_. `Text` replaced
  the use of `String` in the\n  public API. For example, `denseCurrency` now returns
  `Text`, instead of\n  `String`. This change doesn't break backwards compatibilility
  with binary\n  serializations.\n\n* Introduced a new function `discreteToDecimal`.\n\n*
  Added tests to ensure backwards compatibility of serializations.\n\n\n# Version
  0.5\n\n* _COMPILER ASSISTED BREAKING CHANGE_. The `round`, `floor`, `ceiling` and\n
  \ `truncate` functions were replaced by a single `discreteFromDense` function\n
  \ taking an argument of type `Approximation` (`Round`, `Floor`, `Ceiling` or\n  `Truncate`)
  as an argument.\n\n* _COMPILER ASSISTED BREAKING CHANGE_. The `fromDiscrete` function
  was\n  renamed to `denseFromDiscrete`.\n\n* _COMPILER ASSISTED BREAKING CHANGE_.
  The `fromExchangeRate` function was\n  renamed to `exchangeRateToRational`.\n\n*
  _COMPILER ASSISTED BREAKING CHANGE_. The `flipExchangeRate` function was\n  renamed
  to `exchangeRateRecip`.\n\n* _COMPILER ASSISTED BREAKING CHANGE_. The `Dense` is
  not an instance of\n  `Fractional` anymore because `recip` and `/` could potentially
  crash.\n\n* Introduced new functions for rendering and parsing decimal reperesentations\n
  \ of monetary amounts: `denseCurrency`, `discreteCurrency`, `denseFromDecimal`,\n
  \ `denseToDecimal`, `discreteFromDecimal`, `exchangeRateFromDecimal`,\n  `exchangeRateToDecimal`.\n\n*
  Introduced optional `AdditiveGroup` and `VectorSpace` group instances for\n  `Dense`
  and `Discrete`. These type-classes come from the `vector-space`\n  library and they
  can be enabled or disabled via the `vector-space` Cabal flag,\n  which is enabled
  by default.\n\n* Introduced `discrete` constructor which behaves just like `fromInteger`.\n\n*
  Introduced the `dense'` constructor as an unsafe but convenient version of\n  `dense`.\n\n*
  The `ErrScaleNonCanonical` type is now exported.\n\n* The `Money.Internal` module
  is now exposed, but hidden from the Haddock\n  documentation.\n\n* New scale: `\"BTC\"
  \"millibitcoin\"`.\n\n* Added many tests.\n\n\n# Version 0.4.1\n\n* `ExchangeRate`
  is now a `Category`.\n\n\n# Version 0.4\n\n* **BREAKING CHANGE REQUIRING HUMAN INTERVENTION**.
  The JSON serializations for\n  all of `Dense`, `SomeDense`, `Discrete`, `SomeDiscrete`,
  `ExchangeRate` and\n  `SomeExchangeRate` changed. The `FromJSON` instances are backwards
  compatible\n  with the old serializations, but the `ToJSON` instances will only
  generate the\n  new format, which is the same as the old format except the leading
  strings\n  `\"Dense\"`, `\"Discrete\"` and `\"ExchangeRate\"`, respectively, are
  not present in\n  the rendered JSON array anymore. So, if you were manually relying
  on the\n  `ToJSON` instance, please update your code.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. Changed the `Rep` suffix for a `Some`\n  prefix Everywhere.  For example,
  `DenseRep` was renamed to `SomeDense`.\n\n* _COMPILER ASSISTED BREAKING CHANGE_.
  Replaced the\n  `someDenseAmountNumerator` and `someDenseAmountDenominator` `Integers`
  with a\n  single `someDenseAmount` `Rational` number. Similarly for `someDiscreteScale`\n
  \ and `someExchangeRateRate`. The `mkSomeDense`, `someDiscreteScale` and\n  `mkSomeDense`
  also take a `Rational` now.\n\n* _COMPILER ASSISTED BREAKING CHANGE_. The `truncate`,
  `floor`, `celing` and\n  `round` functions now return just `0` as a reminder if
  there's no significant\n  reminder, instead of `Nothing`.\n\n* Added instances for
  `serialise`.\n\n* Added instances for `xmlbf`.\n\n* Fixed `Show` instances so that
  surrounding parentheses are included when\n  necessary.\n\n* New currencies: Ripple,
  Litecoin, Ada, Monero.\n\n\n# Version 0.3\n\n* _COMPILER ASSISTED BREAKING CHANGE_.
  The `Data.Money` module was renamed to\n  `Money`.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. The `Data.Money.Internal` module is not\n  exposed anymore. All of its
  contents are now exported from the `Money` module.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. Renamed `discreteRep` to\n  `toDiscreteRep`.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. Renamed `denseRep` to `toDenseRep`.\n\n* _COMPILER ASSISTED BREAKING CHANGE_.
  Renamed `exchangeRateRep` to\n  `toExchangeRateRep`.\n\n* _COMPILER ASSISTED BREAKING
  CHANGE_. Renamed Iceleandic currency `\"eyir\"` to\n  `\"eyrir\"`\n\n* Remove upper
  bound constraints from all dependencies except `base`.\n\n* Made dependency on `store`
  optional for the test suite, so that it can run on\n  GHCJS.\n\n\n# Version 0.2\n\n*
  Cabal flags are now manual (`aeson`, `binary`, `bytes`, `cereal`, `deepseq`,\n  `hashable`).\n\n*
  Backwards compatibility with GHC 7.10.\n\n* Fix `Store` instances and test them.\n\n\n#
  Version 0.1\n\n* Initial release.\n"
basic-deps:
  base: (>=4.8 && <5.0)
  text: -any
  vector-space: -any
  constraints: -any
  binary: -any
  hashable: -any
  deepseq: -any
  QuickCheck: -any
all-versions:
- '0.1'
- '0.2'
- '0.3'
- '0.4'
- 0.4.1
- '0.5'
- '0.6'
- '0.7'
- 0.7.1
- '0.8'
- 0.8.1
- '0.9'
- 0.9.1
author: Renzo Carbonara
latest: 0.9.1
description-type: markdown
description: |
  The Haskell `safe-money` library offers type-safe and lossless encoding and
  operations for monetary values in all world currencies, including fiat
  currencies, precious metals and crypto-currencies.

  Useful instances for the many types defined by `safe-money` can be found
  in these other libraries:

  * [safe-money-aeson](https://hackage.haskell.org/package/safe-money-aeson):
    `FromJSON` and `ToJSON` instances (from the
    [aeson](https://hackage.haskell.org/package/aeson) library).

  * [safe-money-cereal](https://hackage.haskell.org/package/safe-money-cereal):
    `Serialize` instances (from the
    [cereal](https://hackage.haskell.org/package/cereal) library).

  * [safe-money-serialise](https://hackage.haskell.org/package/safe-money-serialise):
    `Serialise` instances (from the
    [serialise](https://hackage.haskell.org/package/serialise) library).

  * [safe-money-store](https://hackage.haskell.org/package/safe-money-store):
    `Store` instances (from the
    [store](https://hackage.haskell.org/package/store) library).

  * [safe-money-xmlbf](https://hackage.haskell.org/package/safe-money-xmlbf):
    `FromXml` and `ToXml` instances (from the
    [xmlbf](https://hackage.haskell.org/package/xmlbf) library).
license-name: BSD-3-Clause
