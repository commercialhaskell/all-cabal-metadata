homepage: ''
changelog-type: ''
hash: e6ec3238c649695edd661d0437a41d3a0ae1f8bb198968f8cee180f73244373a
test-bench-deps:
  rio: -any
  gotyno-hs: -any
  base: '>=4.9.1.0 && <5'
  hspec: '>=2.0.0'
  text: -any
  megaparsec: -any
  pretty-show: -any
  fsnotify: -any
maintainer: Rickard Andersson <gonz@severnatazvezda.com>
synopsis: A type definition compiler supporting multiple output languages.
changelog: ''
basic-deps:
  rio: -any
  gotyno-hs: -any
  base: '>=4.9.1.0 && <5'
  text: -any
  megaparsec: -any
  pretty-show: -any
  optparse-applicative: -any
  fsnotify: -any
all-versions:
- 1.0.0
- 1.0.1
author: ''
latest: 1.0.1
description-type: markdown
description: "# gotyno-hs\n\nA tool for generating validation/encoding/decoding code
  for types via a type definition language.\nSee details of the language [here](#the-language).\n\n##
  Installation\n\nMake sure you have the Haskell tool\n[`stack`](https://docs.haskellstack.org/en/stable/install_and_upgrade/).
  This is used for building\nthe entire project and once you've installed it, it will
  manage having the correct version of the\ncompiler and all the Haskell libraries
  that are used as well.\n\nOnce we have `stack` installed we can simply run the following
  in this project directory:\n\n```\nstack install\n```\n\nStack will now install
  `gotyno-hs` as a binary in your `$HOME/.local/bin` directory. If you've made\nsure
  that you have this directory in your `$PATH` you can execute `gotyno-hs` anywhere.\n\nIf
  we wanted to compile a file at `examples/basic.gotyno` into both TypeScript and
  F# into separate\noutput directories as well as watch for file changes and recompile
  when they happen, we could\nexecute the following at this point:\n\n```bash\n$ gotyno-hs
  --typescript ts-output --fsharp fsharp-output --watch examples/basic.gotyno\nWatching
  directory: '<ABSOLUTE-PATH-TO-EXAMPLES-DIRECTORY>'\n```\n\n## Supported languages\n\n-
  TypeScript\n- F#\n- Python\n\n## Planned support\n\n- Haskell\n- PureScript\n\n##
  Maybe supported in the future\n\n- Kotlin\n- Swift\n- Scala 3 (if it's better now)\n-
  Elixir\n\n## Options you can pass to the compiler\n\nThe help text for the compiler
  illustrates most of what you can do.\n\n```bash\n$ gotyno-hs --help\ngotyno - Compile
  type definitions into encoders/decoders for languages\n\nUsage: gotyno-hs [--ts|--typescript
  =|-|PATH] [--fs|--fsharp =|-|PATH] \n                 [-w|--watch] [-v|--verbose]
  GOTYNOFILE\n  Compile type definitions into encoders/decoders for languages\n\nAvailable
  options:\n  --ts,--typescript =|-|PATH\n                           Set TypeScript
  output\n  --fs,--fsharp =|-|PATH   Set FSharp output\n  --py,--python =|-|PATH   Set
  Python output\n  -w,--watch               Watch files and recompile automatically\n
  \ -v,--verbose             Output info about compilation\n  -h,--help                Show
  this help text\n```\n\n### `=|-|PATH`\n\nThe output destination for a language can
  be set to `=` for \"same as input file\" `-` for standard\noutput or a path for
  all output for that language.\n\n## TypeScript example\n\n[basic.gotyno](./examples/basic.gotyno)
  has an example of some types being defined and\n[basic.ts](./test/reference-output/basic.ts)
  is the automatically generated TypeScript output from\nthis file. This directory
  contains other examples, used primarily for testing purposes.\n\nBehind the scenes
  it's using a validation library I wrote for validating `unknown` values\n(for the
  most part against given interface definitions).\n\n## F# example\n\n[basic.gotyno](./examples/basic.gotyno)
  has an example of some types being defined and\n[basic.fs](./test/reference-output/basic.fs)
  is the automatically generated F# output from this\nfile. This directory contains
  other examples, used primarily for testing purposes.\n\nThe F# version uses `Thoth`
  for JSON decoding, as well as an additional extension library to it for\nsome custom
  decoding helpers that I wrote.\n\nImport names (and by extension declaration source
  names) are automatically converted to use an\ninitial uppercase letter for F#. Note,
  however, that PascalCase is not automatically converted to.\nIf import names are
  written in snake_case the output will be Snake_case. For the most part camelCase\nwill
  work well for Gotyno file names, since the output will be \"CamelCase\" for that
  particular\nexample.\n\n## The Language\n\nAll supported type names are uppercase
  and type definitions currently are enforced as such as well.\n\n### Annotations/Types\n\n-
  `?TypeName` signifies an optional type.\n- `*TypeName` signifies a pointer to that
  type. In languages where pointers are hidden from the user\n  this may not be visible
  in types generated for it.\n- `[]TypeName` signifies a sequence of several `TypeName`
  with a length known at run-time, whereas\n  `[N]TypeName` signifies a sequence of
  several `TypeName` with a known and enforced length at\n  compile-time. Some languages
  may or may not have the latter concept and will use only the former\n  for code
  generation.\n- `TypeName<OtherTypeName>` signifies an application of a generic type,
  such that whatever type\n  variable `TypeName` takes in its definition is filled
  in with `OtherTypeName` in this specific\n  instance.\n- Conversely, `struct/union
  TypeName <T>{ ... }` is how one defines a type that takes a type\n  parameter. The
  `<T>` part is seen here to take and provide a type `T` for the adjacent scope,\n
  \ hence its position in the syntax.\n- The type `\"SomeValue\"` signifies a literal
  string of that value and can be used very effectively\n  in TypeScript.\n- The unsigned
  integer type is the same, but for integers. It's debatable whether this is useful
  to\n  have.\n\n### Structs\n\n```\nstruct Recruiter {\n    name: String\n}\n\nstruct
  Person {\n    name: String\n    age: U8\n    efficiency: F32\n    on_vacation: Boolean\n
  \   hobbies: []String\n    last_fifteen_comments: [15]String\n    recruiter: ?Recruiter\n}\n\nstruct
  Generic <T>{\n    field: T\n    other_field: ?T\n    other_field_with_slice: []T\n}\n```\n\n###
  Enums\n\n```\nenum Colors {\n    red = \"FF0000\"\n    green = \"00FF00\"\n    blue
  = \"0000FF\"\n}\n```\n\n### Unions\n\n#### Tagged\n\n```\nunion InteractionEvent
  {\n    Click: Coordinates\n    KeyPress: KeyCode\n    Focus: *Element\n}\n\nunion
  Option <T>{\n    None\n    Some: T\n}\n\nunion Result<E, T>{\n    Error: E\n    Ok:
  T\n}\n```\n\n#### Untagged\n\nSometimes a union that carries no extra tags is required,
  though usually these will have to be\nidentified less automatically, perhaps via
  custom tags in their respective payload:\n\n```\nstruct SomeType {\n    type: \"SomeType\"\n
  \   some_field: F32\n    some_other_field: ?String\n}\n\nstruct SomeOtherType {\n
  \   type: \"SomeOtherType\"\n    active: Boolean\n    some_other_field: ?String\n}\n\nuntagged
  union Possible {\n    SomeType\n    SomeOtherType\n    String\n}\n```\n\nIn TypeScript,
  for example, the correct type guard and validator for this untagged union will be\ngenerated,
  and the literal string fields can still be used for identifying which type one has.\n\n####
  Setting the tag key and embedding it in payload structures\n\nThe above can also
  be accomplished by setting the tag key to be embedded in options passed to the\n`union`
  keyword (we can also set which key is used):\n\n```\nstruct SomeType {\n    some_field:
  F32\n    some_other_field: ?String\n}\n\nstruct SomeOtherType {\n    active: Boolean\n
  \   some_other_field: ?String\n}\n\nunion(tag = type_tag, embedded) Possible {\n
  \   FirstConstructor: SomeType\n    SecondConstructor: SomeOtherType\n}\n```\n\nThis
  effectively will create a structure where we get the field `type_tag` embedded in
  the payload\nstructures (`SomeType` & `SomeOtherType`) with the values `\"FirstConstructor\"`
  and\n`\"SecondConstructor\"` respectively.\n\nNote that in order to embed a type
  key we need the payload (if present) to be a structure type,\notherwise we have
  no fields to merge the type tag field into.\n\nBoth checks for existence of the
  referenced payload types and checks that they are structures are\ndone during compilation.\n\n###
  Declarations\n\nWhen a type that is outside of Gotyno files is needed, we can use
  a declaration to assert that it\nexists. It will function much like an import in
  the generated code and it's up to the user to supply\nthe required functionality
  for each language in the required file:\n\n```\ndeclare external.Option<T>\n\ndeclare
  otherExternalModule.Plain\n\nstruct HasOption<T> {\n    field: Option<T>\n    field2:
  Plain\n}\n```\n\nNote that the above code will generate an import for each unique
  source module\n(on the left of the '.') and each usage is automatically recognized
  as a reference to a declaration.\nThe code output will rely on this module being
  present in the same output directory as the generated\ncode.\n"
license-name: BSD-2-Clause
