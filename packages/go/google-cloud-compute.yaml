all-versions:
- 0.1.0.0
- 1.1.0.0
author: tushar
basic-deps:
  aeson: <3
  base: '>=4.7 && <5'
  bytestring: '>=0.9.1.4'
  containers: '>=0.6 && <1'
  google-cloud-common: '>=1.1.0.0 && <1.2.0.0'
  http-conduit: '>=2.2 && <2.4'
  text: '>=1.2 && <3'
changelog: |
  # Changelog for `google-cloud-compute`

  All notable changes to this project will be documented in this file.

  The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),
  and this project adheres to the
  [Haskell Package Versioning Policy](https://pvp.haskell.org/).

  ## Unreleased

  ## 1.1.0.0 - 2025-09-11

  - Synchronized version bump for v1.1.0.0 release.

  ## 0.1.0.0 - YYYY-MM-DD
changelog-type: markdown
description: |
  # google-cloud-compute

  Haskell idiomatic client for [Google Cloud Platform](https://cloud.google.com/) Compute service.

  Full docs are available at https://github.com/tusharad/google-cloud-haskell

  ## Installation

  - Cabal: add to your `.cabal`
    - `build-depends: google-cloud-compute == 1.1.0.0`
  - Stack: add to your `package.yaml`
    - `dependencies: - google-cloud-compute == 1.1.0.0`

  This package depends on `google-cloud-common` for auth and HTTP helpers.

  ## Authentication

  Authentication is handled by `google-cloud-common` and follows this order:

  1. Use `GOOGLE_APPLICATION_CREDENTIALS` to load a Service Account JSON and
     exchange a signed JWT for an access token.
  2. Otherwise, use the Compute metadata server (suitable for GCE/GKE).

  ## Examples

  Below are minimal examples. See `examples/` in the repo for more.

  ```haskell
  {-# LANGUAGE OverloadedStrings #-}

  import Google.Cloud.Compute.Instance

  -- List instances
  listInstancesExample :: IO ()
  listInstancesExample = do
    let projectId = "my-gcp-project"
        zone = "us-central1-a"
        query = defaultListInstancesQuery
    result <- listInstances projectId zone (Just query)
    case result of
      Left err -> putStrLn ("Error: " <> err)
      Right instances -> print instances

  -- Create an instance
  createInstanceExample :: IO ()
  createInstanceExample = do
    let projectId = "my-gcp-project"
        zone = "us-central1-a"
        instanceName = "my-instance"
        machineType = "e2-medium"
        ops = defaultInsertInstanceOps projectId zone instanceName machineType
    res <- insertInstance projectId zone ops (Just (InsertInstanceQuery (Just "req-123") Nothing))
    case res of
      Left err -> putStrLn ("Create error: " <> err)
      Right _  -> putStrLn "Create initiated"

  -- Start/Stop an instance
  startStopExample :: IO ()
  startStopExample = do
    let projectId = "my-gcp-project"
        zone = "us-central1-a"
        name = "my-instance"
        reqId = defaultRequestIdQuery "req-456"
    _ <- startInstance projectId zone name (Just reqId)
    _ <- stopInstance  projectId zone name (Just reqId)
    putStrLn "Start/Stop submitted"
  ```

  Additional modules:

  - `Google.Cloud.Compute.Disk`
  - `Google.Cloud.Compute.Firewall`
  - `Google.Cloud.Compute.Network`

  ## License

  MIT Â© Contributors
description-type: markdown
hash: eb3eb1f1e534983340de6a7d52ed1182d38735fc52f94edd7d381fdecb96c595
homepage: https://github.com/tusharad/google-cloud-haskell#readme
latest: 1.1.0.0
license-name: MIT
maintainer: tusharadhatrao@gmail.com
synopsis: GCP Client for Haskell
test-bench-deps:
  aeson: <3
  base: '>=4.7 && <5'
  bytestring: '>=0.9.1.4'
  containers: '>=0.6 && <1'
  google-cloud-common: '>=1.1.0.0 && <1.2.0.0'
  google-cloud-compute: '>=0'
  hspec: '>=1.3'
  http-conduit: '>=2.2 && <2.4'
  text: '>=1.2 && <3'
