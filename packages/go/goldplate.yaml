homepage: https://github.com/fugue/goldplate
changelog-type: markdown
hash: 0b691e2f6e36351106d8ab413191b4128dddd0ebe3525414b388cc43c279d7f2
test-bench-deps: {}
maintainer: Jasper Van der Jeugt <jasper@fugue.co>
synopsis: A lightweight golden test runner
changelog: |
  # CHANGELOG

   -  0.2.0 (2021-05-24)
       *  Change output to [Test Anything Protocol](https://testanything.org/).
       *  Add `working_directory` field (by Beatrice Vergani).

   -  0.1.3 (2021-02-10)
       *  Bump `aeson` dependency upper bound to 1.5.
       *  Bump GHC to 8.10.3.

   -  0.1.2 (2020-11-05)
       *  Bump `regex-pcre-builtin` dependency lower bound to 0.95.1.3 to fix
          issue with `Text` regexes (by Stefano Debenedetti).
       *  Fix issue with `replace` in post process step.  If the string was not
          matched at all, or if there was a remainder, it could get dropped
          (by Stefano Debenedetti).

   -  0.1.1 (2020-06-29)
       *  Add `GOLDPLATE_BASENAME` and `GOLDPLATE_INPUT_BASENAME` environment
          variables.
       *  Fix issue with `GOLDPLATE_FILE` environment variable.

   -  0.1.0 (2020-06-21)
       *  Initial release.
basic-deps:
  bytestring: '>=0.10 && <0.12'
  base: '>=4.11 && <5'
  Diff: '>=0.3 && <0.5'
  aeson-pretty: '>=0.8 && <0.9'
  unordered-containers: '>=0.2 && <0.3'
  text: '>=1.2 && <2.1'
  filepath: '>=1.4 && <1.5'
  process: '>=1.6 && <1.7'
  async: '>=2.2 && <2.3'
  regex-pcre-builtin: '>=0.95.1.3 && <0.96'
  optparse-applicative: '>=0.14 && <0.18'
  Glob: '>=0.10 && <0.11'
  aeson: '>=1.4 && <2.1'
  directory: '>=1.3 && <1.4'
all-versions:
- 0.1.0
- 0.1.1
- 0.1.2
- 0.1.3
- 0.2.0
author: Jasper Van der Jeugt <jasper@fugue.co>
latest: 0.2.0
description-type: markdown
description: "# goldplate \U0001F3C5\n\n    $ goldplate -j2 tests/\n    1..26\n    ok
  tests/prettify-json.goldplate: exit_code\n    ok tests/prettify-json.goldplate:
  stdout\n    ok tests/env.goldplate: exit_code\n    ok tests/env.goldplate: stdout\n
  \   ...\n\n`goldplate` is a cute and simple opaque [golden test] runner for CLI\napplications.
  \ You place your test cases in a directory, annotate them with\n`.goldplate` files,
  and that's it.  It is completely language agnostic.  And\nperhaps its best feature
  is that it can automaticallyâœ¨\U0001FA84 fix your tests outputs!\n\nGive `goldplate`
  a try if:\n\n -  You are testing a CLI application\n -  The application produces
  deterministic output (e.g. compilers, prettifiers,\n    convertors)\n -  The application
  is quick to start (a process is created for every test)\n -  Your output is text-based
  and not huge in size\n\nAt [Fugue](https://fugue.co), we've been using internal
  versions of this tool\nsince 2016, so it should be pretty stable.\n\n`goldplate`
  produces output compatible with the [Test Anything Protocol].\n\n## Table of Contents\n\n-
  \  [Tutorial](#tutorial)\n    -   [Creating a first test](#creating-a-first-test)\n
  \   -   [Feeding input on stdin](#feeding-input-on-stdin)\n    -   [Setting environment\n
  \       variables](#setting-environment-variables)\n    -   [Setting work\n        directory](#setting-work-directory)\n
  \   -   [Globbing input files](#globbing-input-files)\n    -   [Post processing:
  find and\n        replace](#post-processing-find-and-replace)\n    -   [Post processing:
  prettify\n        JSON](#post-processing-prettify-json)\n    -   [Created files
  and\n        directories](#created-files-and-directories)\n-   [Installation](#installation)\n
  \   -   [Using stack](#using-stack)\n    -   [Using Cabal](#using-cabal)\n-   [Reference](#reference)\n
  \   -   [Syntax](#syntax)\n    -   [Environment variables](#environment-variables)\n-
  \  [Similar projects](#similar-projects)\n\n## Tutorial\n\n### Creating a first
  test\n\nImagine we are up to testing the behaviour of `echo` command.  In this very\nsimple
  example, we run `echo \"Hello, world!\"` and expect it to print `Hello,\nworld!`
  to the stdout stream as a result.\n\nCreate a new file `echo.goldplate` and add
  the following content:\n\n```json\n{\n    \"command\": \"echo\",\n    \"arguments\":
  [\"Hello, world!\"],\n    \"asserts\": [\n        {\"exit_code\": 0},\n        {\"stdout\":
  \"hello-world.txt\"}\n    ]\n}\n```\n\nLet's go through this bit by bit.\n\nThe
  test invocation is specified by the `command` and `arguments` fields.  We\nare invoking
  the `echo` process with a single argument, `\"Hello, world!\"`.\n\nThe expected
  results of our test live in the `asserts` field.  This simple test\nhas two asserts:\n\n1.
  \ We verify that the exit code is 0 (success).\n2.  We check the `stdout` (output)
  of the command against the contents of\n    the file `hello-world.txt`.\n\nWe haven't
  created `hello-world.txt` yet, but that's not a problem.  We can\ninvoke `goldplate
  --fix` to create it:\n\n    $ goldplate echo.goldplate --pretty-diff --fix\n    1..2\n
  \   ok echo.goldplate: exit_code\n    not ok echo.goldplate: stdout\n         diff:\n
  \        0a1\n         > Hello, world!\n         fixed ./hello-world.txt\n\nAfter
  `hello-world.txt` has been created with proper contents, subsequent\n`goldplate`
  invocations will pass:\n\n    $ goldplate echo.goldplate\n    1..2\n    ok echo.goldplate:
  exit_code\n    ok echo.goldplate: stdout\n\nYou can view the full example here:\n\n
  -  [`tests/echo.goldplate`](tests/echo.goldplate)\n -  [`tests/hello-world.txt`](tests/hello-world.txt)\n\n###
  Feeding input on stdin\n\nView example:\n\n -  [`tests/cat.goldplate`](tests/cat.goldplate)\n
  -  [`tests/cat.stdout`](tests/cat.stdout)\n\nYou can pass one or multiple lines
  of input to the command by using the `stdin`\nfield.\n\n### Setting environment
  variables\n\nView example:\n\n -  [`tests/env.goldplate`](tests/env.goldplate)\n
  -  [`tests/env.stdout`](tests/env.stdout)\n\nThe `environment` field can be used
  to set environment variables for the\nprogram.\n\n`goldplate` also sets [a number
  of environment\nvariables](#environment-variables).  You can use these directly
  within the\nconfiguration JSON.  In this example, we use:\n\n    {\"stdout\": \"${GOLDPLATE_NAME}.stdout\"}\n\nRather
  than:\n\n    {\"stdout\": \"env.stdout\"}\n\nWe found this to be good practice,
  it makes mass-renaming of tests much easier.\n\n### Setting work directory\n\nView
  example:\n\n -  [`tests/work-dir.goldplate`](tests/work-dir.goldplate)\n -  [`tests/work-dir.stdout`](tests/work-dir.stdout)\n\nThe
  `working_directory` field can be used to set the work directory in which the\ncommand
  will be executed. It can either be an absolute path or a path relative\nto the `goldplate`
  file. If a `working_directory` is specified then the other\nfields like `input_files`
  and `stdout` need to be relative to the\n`working_directory` as well.\n\nIf a work
  directory is not specified the `command` will be executed in the\nsame directory
  as the `goldplate` file.\n\n### Globbing input files\n\nView example:\n\n -  [`tests/glob.goldplate`](tests/glob.goldplate)\n
  -  [`tests/glob-1.txt`](tests/glob-1.txt)\n -  [`tests/glob-1.stdout`](tests/glob-1.stdout)\n
  -  [`tests/glob-2.txt`](tests/glob-2.txt)\n -  [`tests/glob-2.stdout`](tests/glob-2.stdout)\n\n`.goldplate`
  files are fairly small but if you have a whole directory of files\nthat you just
  want to run the same command on, they can get very repetitive.\nThis is why `goldplate`
  provides a simple way to pull in multiple input files.\n\nIf the `input_files` field
  is set to a glob, all asserts will be ran for _every_\nmatching input file.  `goldplate`
  will set the following variables:\n\n -  `${GOLDPLATE_INPUT_FILE}`: the path to
  the input file\n -  `${GOLDPLATE_INPUT_NAME}`: the input file without extension\n\n###
  Post processing: find and replace\n\nView example:\n\n -  [`tests/replace.goldplate`](tests/replace.goldplate)\n
  -  [`tests/replace.stdout`](tests/replace.stdout)\n\nSometimes you may want to do
  a find-and-replace on the actual output, for\nexample to filter out timestamps or
  other information that you do not expect to\nmatch up against the expected output.\n\n###
  Post processing: prettify JSON\n\nView example:\n\n -  [`tests/prettify-json.goldplate`](tests/prettify-json.goldplate)\n
  -  [`tests/prettify-json.json`](tests/prettify-json.json)\n\nMany modern CLI tools
  output JSON.  You can use the `prettify_json` post\nprocessor to make sure the JSON
  is converted to a normalized form with sorted\nkeys and consistent indentation.\n\n###
  Created files and directories\n\nView example:\n\n -  [`tests/create.goldplate`](tests/create.goldplate)\n
  -  [`tests/create.file`](tests/create.file)\n\n`goldplate` is geared towards checking
  the `stdout` and `stderr` outputs of a\nprogram, but you can also check that files
  were created with specific contents.\nIf you do this, `goldplate` will remove these
  files and directories afterwards\nto leave a clean repository behind.\n\n## Installation\n\nInstallation
  through source is done using standard Haskell tooling -- [Cabal]\nand [stack] both
  work well.\n\n### Using stack\n\n1.  Install [stack] for your platform.\n2.  Clone
  this repository and `cd` into it.\n3.  Run `stack install`.\n4.  Make sure `$HOME/.local/bin`
  is in your `$PATH`.\n\n### Using Cabal\n\n1.  Install [Cabal] for your platform.\n2.
  \ Clone this repository and `cd` into it.\n3.  Run `cabal install`.\n4.  Make sure
  `$HOME/.cabal/bin` is in your `$PATH`.\n\n## Reference\n\n### Syntax\n\nEnvironment
  variables can be spliced into the configuration using `${VAR}`\nsyntax within strings.
  \ To escape this syntax, use `$${VAR}` to get a literal\n`${VAR}`, `$$${VAR}` to
  get a literal `$${VAR}`, and so on.\n\n### Environment variables\n\nThe test is
  always executed in the directory that holds the `.goldplate` file.\n`goldplate`
  will always set the following environment variables:\n\n -  `GOLDPLATE_FILE`: The
  filename of the `.goldplate` file.\n -  `GOLDPLATE_NAME`: The filename of the `.goldplate`
  file _without_ the\n    extension.\n -  `GOLDPLATE_BASENAME`: The basename (filename
  without directory) of\n    the `.goldplate` file.\n\nWhen dealing with [multiple
  input files](#globbing-input-files), the following\nadditional variables are set:\n\n
  -  `GOLDPLATE_INPUT_FILE`: The input file name (relative to the current\n    directory).\n
  -  `GOLDPLATE_INPUT_NAME`: The same as `GOLDPLATE_INPUT_FILE` but without\n    the
  extension.\n -  `GOLDPLATE_INPUT_BASENAME`: The basename (filename without directory)
  of\n    the input file.\n\nHere is an example that outputs all of these environment
  variables:\n\n -  [`tests/builtin.goldplate`](tests/builtin.goldplate)\n -  [`tests/builtin.stdout`](tests/builtin.stdout)\n\n##
  Similar projects\n\nA similar project is [smoke].  I think `goldplate` has two major
  advantages\nover smoke:\n\n -  It can fix the output files automatically using `--fix`!
  \ This is very\n    useful if you make a change to your tool that affects _a lot_
  of test\n    files.  You still need to manually review the diff, but at least you
  don't\n    need to manually update the specs.\n -  You can avoid most repetitive
  configs by using\n    [simple globbing](#globbing-input-files).\n\n[Cabal]: https://www.haskell.org/cabal/\n[golden
  test]: https://ro-che.info/articles/2017-12-04-golden-tests\n[stack]: https://docs.haskellstack.org/en/stable/README/\n[smoke]:
  https://github.com/SamirTalwar/smoke\n[Test Anything Protocol]: http://testanything.org/\n"
license-name: Apache-2.0
