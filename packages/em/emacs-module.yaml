all-versions:
- '0.1'
- 0.1.1
- 0.1.1.1
- '0.2'
- 0.2.1
- 0.2.1.1
- '0.3'
author: Sergey Vinokurov
basic-deps:
  base: '>=4.16 && <5'
  bytestring: '>=0'
  deepseq: '>=0'
  exceptions: '>=0'
  filepath: '>=1.5'
  monad-control: '>=0'
  monad-interleave: '>=0.2'
  mtl: '>=2.3'
  os-string: '>=0'
  prettyprinter: '>=1.7'
  prettyprinter-combinators: '>=0.1.1'
  primitive: '>=0'
  template-haskell: '>=0'
  text: '>=2.0.1'
  transformers-base: '>=0'
  tuples-homogenous-h98: '>=0'
  vector: '>=0.13'
  void: '>=0'
changelog: |
  # 0.3

  - Add `extractByteString` function to the `EmacsMonad` class

  # 0.2.1.1

  - Fix build with GHC 9.10.1

  # 0.2.1

  - Expose `make_unibyte_string` as `makeBinaryString`

  # 0.2

  - Major rework of the package’s core

  - Bump minimum required Emacs version to 28 due to exposing `process_input` from API. It allows to check whether user wants to abort and control should be returned back to Emacs ASAP

  - Bump minimum required `base` version to 4.14 - minimum supported GHC is 8.10

  - Symbols can be either statically known or dynamically known. This is mostly an optimization that doesn’t affect symbol use but client code may require updating. Statically known symbol are just pointers to statically allocated (by GHC) bytes and the pointers are simply passed to Emacs to create symbols.

  - Some commonly used symbols are now cached on first use so they won’t be re-interned on subsequent uses. New symbols can be defined by users.

  - `makeFunction` now cleans up after itself and no longer has memory leak if called a lot of times (which shouldn’t have typically happened anyway but still nice to have just in case)

  - `makeFunctionExtra` and `EmacsFunctionExtra` are gone. They offered to pass extra pointer into subroutine exposed to Emacs but it was never needed since arbitrary closure can be exposed. Now extra pointer is used to clean up result of `makeFunction`.

  - Removed `extractUnboxedVectorWith` - now regular `extractVector` produces generic vectors

  - Removed `extractVector` - `extractVectorWith` and similar for other vector/array types are preferable since they’re guaranteed to not create intermediate vectors/arrays

  - Introduce dedicated `Doc` type for function documentation that can be constructed from unboxed string literals to just pass the pointer around

  - `produceRef` and `EmacsReturn` are gone - vanilla `pure` and `EmacsRef` are enough

  - Symbol names got `IsString` instance and can be defined as string constants

  - Removed `UserPtrFinaliser` and `UserPtrFinaliserType`. Use `Foreign.ForeignPtr.FinalizerPtr` instead

  - `GlobalRef` got removed, instead `RawValue` is indexed by whether it’s going to be GC’ed after returning control back to Emacs

  - `funcall` and `funcallPrimitive` now accept any emacs value function rather than symbols only

  - `extractString` removed, `extractText` is now part of `MonadEmacs` typeclass

  # 0.1.1.1

  - Fix build with GHC 9.0+
  - Switch license from BSD 3 to Apache 2.0
  - Bump minimum required GHC to 8.10
  - Bump minimum `prettyprinter` to 1.7
changelog-type: markdown
description: |
  # A Haskell package for writing Emacs modules

  ## Why would anyone want to write Emacs modules in Haskell?
  Emacs Lisp is not a young language and can go quite a long way, but
  it has a couple of issues that are not going to be solved any time soon:

  - It’s dynamically typed which makes refactoring large extensions a pain
  - It’s intepreted and is quite slow. It might be argued that editors don’t
    need much computing power, but from time to time computation-intensive
    tasks do occur. For example, fuzzy matching provided by the cool
    [flx.el](https://github.com/lewang/flx) package and used by great
    [ivy.el](https://github.com/abo-abo/swiper) package to quickly find things.
  - Somewhat related to the previous point, there’s virtually no support
    for parallelising computations. There’re [adavances](https://www.gnu.org/software/emacs/draft/manual/html_node/elisp/Threads.html) on adding threads
    to Emacs lisp, but this only provides [concurrency, but no parallelism](https://stackoverflow.com/questions/1050222/what-is-the-difference-between-concurrency-and-parallelism).

    Haskell is well known for solving points 1 and 3 outlined above.
    For me it also solves point 2 by providing enough performance and adding
    parallelism on top of it.

    If you think this might be a good idea and would like to see what
    this package can do for you, you can look at part of
    [my emacs config](https://github.com/sergv/emacs-native/tree/master/lib/Emacs)
    that uses this package to implement things like

    + Rewrite of `flx.el` that leverages parallelism
    + Fast search across filesystem
    + Concurrrent grep reimplementation (somewhat dubious since things like `ripgrep` exist)

  ## FAQ
  ### How do I start writing my own extensions?
  See tutorial at https://github.com/sergv/emacs-module/blob/master/Tutorial.md.

  Also check out
  [this package’s tests](https://github.com/sergv/emacs-module/blob/master/test/src/Emacs/TestsInit.hs).

  ### What about Windows?
  It works, Cabal can build a dll for you.

  ### How it’s related to [haskell-emacs](https://github.com/knupfer/haskell-emacs)?
  The `haskell-emacs` aims to address the same problem - writing Emacs
  extensions in Haskell, but uses different approach. It seems to use
  some kind of marshalling scheme to make Emacs data available in
  Haskell with a caveat that not all Emacs types can be converted (e.g.
  buffers cannot be typically serialised). Presumably, an extension
  built with this project will look like an executable that reads sexps
  from stdin and produces output on stdout. Or, possibly, as a daemon
  process that communicates with Emacs over network.

  This project is a bit different. It wraps Emacs C API for writing new
  extensions that can manipulate Emacs values directly, without
  marhsalling. In this approach, an extension will look like a shared
  library/dll that can be loaded by standard emacs with `(load "/tmp/libmy-ext.so")`.

  ## Supported GHC versions

  Tested with GHC `9.2`, `9.4`, `9.6`, `9.8`.
description-type: markdown
hash: 0b55aa5cf3953c8b76312dc2f5094772126576a185f9f03990180c57f22bef80
homepage: https://github.com/sergv/emacs-module
latest: '0.3'
license-name: Apache-2.0
maintainer: Sergey Vinokurov <serg.foo@gmail.com>
synopsis: Utilities to write Emacs dynamic modules
test-bench-deps: {}
